var rhythmgame =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/dropzone/dist/dropzone.js":
/*!************************************************!*\
  !*** ./node_modules/dropzone/dist/dropzone.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/*
 *
 * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
// The Emitter class provides the ability to call `.on()` on Dropzone to listen
// to events.
// It is strongly based on component's emitter class, and I removed the
// functionality because of the dependency hell with different frameworks.
var Emitter = /*#__PURE__*/function () {
  function Emitter() {
    _classCallCheck(this, Emitter);
  }

  _createClass(Emitter, [{
    key: "on",
    // Add an event listener for given event
    value: function on(event, fn) {
      this._callbacks = this._callbacks || {}; // Create namespace for this event

      if (!this._callbacks[event]) {
        this._callbacks[event] = [];
      }

      this._callbacks[event].push(fn);

      return this;
    }
  }, {
    key: "emit",
    value: function emit(event) {
      this._callbacks = this._callbacks || {};
      var callbacks = this._callbacks[event];

      if (callbacks) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var _iterator = _createForOfIteratorHelper(callbacks),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var callback = _step.value;
            callback.apply(this, args);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return this;
    } // Remove event listener for given event. If fn is not provided, all event
    // listeners for that event will be removed. If neither is provided, all
    // event listeners will be removed.

  }, {
    key: "off",
    value: function off(event, fn) {
      if (!this._callbacks || arguments.length === 0) {
        this._callbacks = {};
        return this;
      } // specific event


      var callbacks = this._callbacks[event];

      if (!callbacks) {
        return this;
      } // remove all handlers


      if (arguments.length === 1) {
        delete this._callbacks[event];
        return this;
      } // remove specific handler


      for (var i = 0; i < callbacks.length; i++) {
        var callback = callbacks[i];

        if (callback === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }

      return this;
    }
  }]);

  return Emitter;
}();

var Dropzone = /*#__PURE__*/function (_Emitter) {
  _inherits(Dropzone, _Emitter);

  var _super = _createSuper(Dropzone);

  _createClass(Dropzone, null, [{
    key: "initClass",
    value: function initClass() {
      // Exposing the emitter class, mainly for tests
      this.prototype.Emitter = Emitter;
      /*
       This is a list of all available events you can register on a dropzone object.
        You can register an event handler like this:
        dropzone.on("dragEnter", function() { });
        */

      this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];
      this.prototype.defaultOptions = {
        /**
         * Has to be specified on elements other than form (or when the form
         * doesn't have an `action` attribute). You can also
         * provide a function that will be called with `files` and
         * must return the url (since `v3.12.0`)
         */
        url: null,

        /**
         * Can be changed to `"put"` if necessary. You can also provide a function
         * that will be called with `files` and must return the method (since `v3.12.0`).
         */
        method: "post",

        /**
         * Will be set on the XHRequest.
         */
        withCredentials: false,

        /**
         * The timeout for the XHR requests in milliseconds (since `v4.4.0`).
         */
        timeout: 30000,

        /**
         * How many file uploads to process in parallel (See the
         * Enqueuing file uploads documentation section for more info)
         */
        parallelUploads: 2,

        /**
         * Whether to send multiple files in one request. If
         * this it set to true, then the fallback file input element will
         * have the `multiple` attribute as well. This option will
         * also trigger additional events (like `processingmultiple`). See the events
         * documentation section for more information.
         */
        uploadMultiple: false,

        /**
         * Whether you want files to be uploaded in chunks to your server. This can't be
         * used in combination with `uploadMultiple`.
         *
         * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.
         */
        chunking: false,

        /**
         * If `chunking` is enabled, this defines whether **every** file should be chunked,
         * even if the file size is below chunkSize. This means, that the additional chunk
         * form data will be submitted and the `chunksUploaded` callback will be invoked.
         */
        forceChunking: false,

        /**
         * If `chunking` is `true`, then this defines the chunk size in bytes.
         */
        chunkSize: 2000000,

        /**
         * If `true`, the individual chunks of a file are being uploaded simultaneously.
         */
        parallelChunkUploads: false,

        /**
         * Whether a chunk should be retried if it fails.
         */
        retryChunks: false,

        /**
         * If `retryChunks` is true, how many times should it be retried.
         */
        retryChunksLimit: 3,

        /**
         * If not `null` defines how many files this Dropzone handles. If it exceeds,
         * the event `maxfilesexceeded` will be called. The dropzone element gets the
         * class `dz-max-files-reached` accordingly so you can provide visual feedback.
         */
        maxFilesize: 256,

        /**
         * The name of the file param that gets transferred.
         * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then
         * Dropzone will append `[]` to the name.
         */
        paramName: "file",

        /**
         * Whether thumbnails for images should be generated
         */
        createImageThumbnails: true,

        /**
         * In MB. When the filename exceeds this limit, the thumbnail will not be generated.
         */
        maxThumbnailFilesize: 10,

        /**
         * If `null`, the ratio of the image will be used to calculate it.
         */
        thumbnailWidth: 120,

        /**
         * The same as `thumbnailWidth`. If both are null, images will not be resized.
         */
        thumbnailHeight: 120,

        /**
         * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.
         * Can be either `contain` or `crop`.
         */
        thumbnailMethod: 'crop',

        /**
         * If set, images will be resized to these dimensions before being **uploaded**.
         * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect
         * ratio of the file will be preserved.
         *
         * The `options.transformFile` function uses these options, so if the `transformFile` function
         * is overridden, these options don't do anything.
         */
        resizeWidth: null,

        /**
         * See `resizeWidth`.
         */
        resizeHeight: null,

        /**
         * The mime type of the resized image (before it gets uploaded to the server).
         * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.
         * See `resizeWidth` for more information.
         */
        resizeMimeType: null,

        /**
         * The quality of the resized images. See `resizeWidth`.
         */
        resizeQuality: 0.8,

        /**
         * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.
         * Can be either `contain` or `crop`.
         */
        resizeMethod: 'contain',

        /**
         * The base that is used to calculate the filesize. You can change this to
         * 1024 if you would rather display kibibytes, mebibytes, etc...
         * 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte` not `1 kilobyte`.
         * You can change this to `1024` if you don't care about validity.
         */
        filesizeBase: 1000,

        /**
         * Can be used to limit the maximum number of files that will be handled by this Dropzone
         */
        maxFiles: null,

        /**
         * An optional object to send additional headers to the server. Eg:
         * `{ "My-Awesome-Header": "header value" }`
         */
        headers: null,

        /**
         * If `true`, the dropzone element itself will be clickable, if `false`
         * nothing will be clickable.
         *
         * You can also pass an HTML element, a CSS selector (for multiple elements)
         * or an array of those. In that case, all of those elements will trigger an
         * upload when clicked.
         */
        clickable: true,

        /**
         * Whether hidden files in directories should be ignored.
         */
        ignoreHiddenFiles: true,

        /**
         * The default implementation of `accept` checks the file's mime type or
         * extension against this list. This is a comma separated list of mime
         * types or file extensions.
         *
         * Eg.: `image/*,application/pdf,.psd`
         *
         * If the Dropzone is `clickable` this option will also be used as
         * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)
         * parameter on the hidden file input as well.
         */
        acceptedFiles: null,

        /**
         * **Deprecated!**
         * Use acceptedFiles instead.
         */
        acceptedMimeTypes: null,

        /**
         * If false, files will be added to the queue but the queue will not be
         * processed automatically.
         * This can be useful if you need some additional user input before sending
         * files (or if you want want all files sent at once).
         * If you're ready to send the file simply call `myDropzone.processQueue()`.
         *
         * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation
         * section for more information.
         */
        autoProcessQueue: true,

        /**
         * If false, files added to the dropzone will not be queued by default.
         * You'll have to call `enqueueFile(file)` manually.
         */
        autoQueue: true,

        /**
         * If `true`, this will add a link to every file preview to remove or cancel (if
         * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`
         * and `dictRemoveFile` options are used for the wording.
         */
        addRemoveLinks: false,

        /**
         * Defines where to display the file previews – if `null` the
         * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS
         * selector. The element should have the `dropzone-previews` class so
         * the previews are displayed properly.
         */
        previewsContainer: null,

        /**
         * This is the element the hidden input field (which is used when clicking on the
         * dropzone to trigger file selection) will be appended to. This might
         * be important in case you use frameworks to switch the content of your page.
         *
         * Can be a selector string, or an element directly.
         */
        hiddenInputContainer: "body",

        /**
         * If null, no capture type will be specified
         * If camera, mobile devices will skip the file selection and choose camera
         * If microphone, mobile devices will skip the file selection and choose the microphone
         * If camcorder, mobile devices will skip the file selection and choose the camera in video mode
         * On apple devices multiple must be set to false.  AcceptedFiles may need to
         * be set to an appropriate mime type (e.g. "image/*", "audio/*", or "video/*").
         */
        capture: null,

        /**
         * **Deprecated**. Use `renameFile` instead.
         */
        renameFilename: null,

        /**
         * A function that is invoked before the file is uploaded to the server and renames the file.
         * This function gets the `File` as argument and can use the `file.name`. The actual name of the
         * file that gets used during the upload can be accessed through `file.upload.filename`.
         */
        renameFile: null,

        /**
         * If `true` the fallback will be forced. This is very useful to test your server
         * implementations first and make sure that everything works as
         * expected without dropzone if you experience problems, and to test
         * how your fallbacks will look.
         */
        forceFallback: false,

        /**
         * The text used before any files are dropped.
         */
        dictDefaultMessage: "Drop files here to upload",

        /**
         * The text that replaces the default message text it the browser is not supported.
         */
        dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",

        /**
         * The text that will be added before the fallback form.
         * If you provide a  fallback element yourself, or if this option is `null` this will
         * be ignored.
         */
        dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",

        /**
         * If the filesize is too big.
         * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.
         */
        dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",

        /**
         * If the file doesn't match the file type.
         */
        dictInvalidFileType: "You can't upload files of this type.",

        /**
         * If the server response was invalid.
         * `{{statusCode}}` will be replaced with the servers status code.
         */
        dictResponseError: "Server responded with {{statusCode}} code.",

        /**
         * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
         */
        dictCancelUpload: "Cancel upload",

        /**
         * The text that is displayed if an upload was manually canceled
         */
        dictUploadCanceled: "Upload canceled.",

        /**
         * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
         */
        dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",

        /**
         * If `addRemoveLinks` is true, the text to be used to remove a file.
         */
        dictRemoveFile: "Remove file",

        /**
         * If this is not null, then the user will be prompted before removing a file.
         */
        dictRemoveFileConfirmation: null,

        /**
         * Displayed if `maxFiles` is st and exceeded.
         * The string `{{maxFiles}}` will be replaced by the configuration value.
         */
        dictMaxFilesExceeded: "You can not upload any more files.",

        /**
         * Allows you to translate the different units. Starting with `tb` for terabytes and going down to
         * `b` for bytes.
         */
        dictFileSizeUnits: {
          tb: "TB",
          gb: "GB",
          mb: "MB",
          kb: "KB",
          b: "b"
        },

        /**
         * Called when dropzone initialized
         * You can add event listeners here
         */
        init: function init() {},

        /**
         * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`
         * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case
         * of a function, this needs to return a map.
         *
         * The default implementation does nothing for normal uploads, but adds relevant information for
         * chunked uploads.
         *
         * This is the same as adding hidden input fields in the form element.
         */
        params: function params(files, xhr, chunk) {
          if (chunk) {
            return {
              dzuuid: chunk.file.upload.uuid,
              dzchunkindex: chunk.index,
              dztotalfilesize: chunk.file.size,
              dzchunksize: this.options.chunkSize,
              dztotalchunkcount: chunk.file.upload.totalChunkCount,
              dzchunkbyteoffset: chunk.index * this.options.chunkSize
            };
          }
        },

        /**
         * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)
         * and a `done` function as parameters.
         *
         * If the done function is invoked without arguments, the file is "accepted" and will
         * be processed. If you pass an error message, the file is rejected, and the error
         * message will be displayed.
         * This function will not be called if the file is too big or doesn't match the mime types.
         */
        accept: function accept(file, done) {
          return done();
        },

        /**
         * The callback that will be invoked when all chunks have been uploaded for a file.
         * It gets the file for which the chunks have been uploaded as the first parameter,
         * and the `done` function as second. `done()` needs to be invoked when everything
         * needed to finish the upload process is done.
         */
        chunksUploaded: function chunksUploaded(file, done) {
          done();
        },

        /**
         * Gets called when the browser is not supported.
         * The default implementation shows the fallback input field and adds
         * a text.
         */
        fallback: function fallback() {
          // This code should pass in IE7... :(
          var messageElement;
          this.element.className = "".concat(this.element.className, " dz-browser-not-supported");

          var _iterator2 = _createForOfIteratorHelper(this.element.getElementsByTagName("div")),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var child = _step2.value;

              if (/(^| )dz-message($| )/.test(child.className)) {
                messageElement = child;
                child.className = "dz-message"; // Removes the 'dz-default' class

                break;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          if (!messageElement) {
            messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
            this.element.appendChild(messageElement);
          }

          var span = messageElement.getElementsByTagName("span")[0];

          if (span) {
            if (span.textContent != null) {
              span.textContent = this.options.dictFallbackMessage;
            } else if (span.innerText != null) {
              span.innerText = this.options.dictFallbackMessage;
            }
          }

          return this.element.appendChild(this.getFallbackForm());
        },

        /**
         * Gets called to calculate the thumbnail dimensions.
         *
         * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:
         *
         *  - `srcWidth` & `srcHeight` (required)
         *  - `trgWidth` & `trgHeight` (required)
         *  - `srcX` & `srcY` (optional, default `0`)
         *  - `trgX` & `trgY` (optional, default `0`)
         *
         * Those values are going to be used by `ctx.drawImage()`.
         */
        resize: function resize(file, width, height, resizeMethod) {
          var info = {
            srcX: 0,
            srcY: 0,
            srcWidth: file.width,
            srcHeight: file.height
          };
          var srcRatio = file.width / file.height; // Automatically calculate dimensions if not specified

          if (width == null && height == null) {
            width = info.srcWidth;
            height = info.srcHeight;
          } else if (width == null) {
            width = height * srcRatio;
          } else if (height == null) {
            height = width / srcRatio;
          } // Make sure images aren't upscaled


          width = Math.min(width, info.srcWidth);
          height = Math.min(height, info.srcHeight);
          var trgRatio = width / height;

          if (info.srcWidth > width || info.srcHeight > height) {
            // Image is bigger and needs rescaling
            if (resizeMethod === 'crop') {
              if (srcRatio > trgRatio) {
                info.srcHeight = file.height;
                info.srcWidth = info.srcHeight * trgRatio;
              } else {
                info.srcWidth = file.width;
                info.srcHeight = info.srcWidth / trgRatio;
              }
            } else if (resizeMethod === 'contain') {
              // Method 'contain'
              if (srcRatio > trgRatio) {
                height = width / srcRatio;
              } else {
                width = height * srcRatio;
              }
            } else {
              throw new Error("Unknown resizeMethod '".concat(resizeMethod, "'"));
            }
          }

          info.srcX = (file.width - info.srcWidth) / 2;
          info.srcY = (file.height - info.srcHeight) / 2;
          info.trgWidth = width;
          info.trgHeight = height;
          return info;
        },

        /**
         * Can be used to transform the file (for example, resize an image if necessary).
         *
         * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes
         * images according to those dimensions.
         *
         * Gets the `file` as the first parameter, and a `done()` function as the second, that needs
         * to be invoked with the file when the transformation is done.
         */
        transformFile: function transformFile(file, done) {
          if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) {
            return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);
          } else {
            return done(file);
          }
        },

        /**
         * A string that contains the template used for each dropped
         * file. Change it to fulfill your needs but make sure to properly
         * provide all elements.
         *
         * If you want to use an actual HTML element instead of providing a String
         * as a config option, you could create a div with the id `tpl`,
         * put the template inside it and provide the element like this:
         *
         *     document
         *       .querySelector('#tpl')
         *       .innerHTML
         *
         */
        previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <title>Check</title>\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <title>Error</title>\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>",
        // END OPTIONS
        // (Required by the dropzone documentation parser)

        /*
         Those functions register themselves to the events on init and handle all
         the user interface specific stuff. Overwriting them won't break the upload
         but can break the way it's displayed.
         You can overwrite them if you don't like the default behavior. If you just
         want to add an additional event handler, register it on the dropzone object
         and don't overwrite those options.
         */
        // Those are self explanatory and simply concern the DragnDrop.
        drop: function drop(e) {
          return this.element.classList.remove("dz-drag-hover");
        },
        dragstart: function dragstart(e) {},
        dragend: function dragend(e) {
          return this.element.classList.remove("dz-drag-hover");
        },
        dragenter: function dragenter(e) {
          return this.element.classList.add("dz-drag-hover");
        },
        dragover: function dragover(e) {
          return this.element.classList.add("dz-drag-hover");
        },
        dragleave: function dragleave(e) {
          return this.element.classList.remove("dz-drag-hover");
        },
        paste: function paste(e) {},
        // Called whenever there are no files left in the dropzone anymore, and the
        // dropzone should be displayed as if in the initial state.
        reset: function reset() {
          return this.element.classList.remove("dz-started");
        },
        // Called when a file is added to the queue
        // Receives `file`
        addedfile: function addedfile(file) {
          var _this2 = this;

          if (this.element === this.previewsContainer) {
            this.element.classList.add("dz-started");
          }

          if (this.previewsContainer) {
            file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
            file.previewTemplate = file.previewElement; // Backwards compatibility

            this.previewsContainer.appendChild(file.previewElement);

            var _iterator3 = _createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-name]")),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var node = _step3.value;
                node.textContent = file.name;
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            var _iterator4 = _createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-size]")),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                node = _step4.value;
                node.innerHTML = this.filesize(file.size);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            if (this.options.addRemoveLinks) {
              file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>".concat(this.options.dictRemoveFile, "</a>"));
              file.previewElement.appendChild(file._removeLink);
            }

            var removeFileEvent = function removeFileEvent(e) {
              e.preventDefault();
              e.stopPropagation();

              if (file.status === Dropzone.UPLOADING) {
                return Dropzone.confirm(_this2.options.dictCancelUploadConfirmation, function () {
                  return _this2.removeFile(file);
                });
              } else {
                if (_this2.options.dictRemoveFileConfirmation) {
                  return Dropzone.confirm(_this2.options.dictRemoveFileConfirmation, function () {
                    return _this2.removeFile(file);
                  });
                } else {
                  return _this2.removeFile(file);
                }
              }
            };

            var _iterator5 = _createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-remove]")),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var removeLink = _step5.value;
                removeLink.addEventListener("click", removeFileEvent);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        },
        // Called whenever a file is removed.
        removedfile: function removedfile(file) {
          if (file.previewElement != null && file.previewElement.parentNode != null) {
            file.previewElement.parentNode.removeChild(file.previewElement);
          }

          return this._updateMaxFilesReachedClass();
        },
        // Called when a thumbnail has been generated
        // Receives `file` and `dataUrl`
        thumbnail: function thumbnail(file, dataUrl) {
          if (file.previewElement) {
            file.previewElement.classList.remove("dz-file-preview");

            var _iterator6 = _createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-thumbnail]")),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var thumbnailElement = _step6.value;
                thumbnailElement.alt = file.name;
                thumbnailElement.src = dataUrl;
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }

            return setTimeout(function () {
              return file.previewElement.classList.add("dz-image-preview");
            }, 1);
          }
        },
        // Called whenever an error occurs
        // Receives `file` and `message`
        error: function error(file, message) {
          if (file.previewElement) {
            file.previewElement.classList.add("dz-error");

            if (typeof message !== "string" && message.error) {
              message = message.error;
            }

            var _iterator7 = _createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-errormessage]")),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var node = _step7.value;
                node.textContent = message;
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          }
        },
        errormultiple: function errormultiple() {},
        // Called when a file gets processed. Since there is a cue, not all added
        // files are processed immediately.
        // Receives `file`
        processing: function processing(file) {
          if (file.previewElement) {
            file.previewElement.classList.add("dz-processing");

            if (file._removeLink) {
              return file._removeLink.innerHTML = this.options.dictCancelUpload;
            }
          }
        },
        processingmultiple: function processingmultiple() {},
        // Called whenever the upload progress gets updated.
        // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.
        // To get the total number of bytes of the file, use `file.size`
        uploadprogress: function uploadprogress(file, progress, bytesSent) {
          if (file.previewElement) {
            var _iterator8 = _createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-uploadprogress]")),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var node = _step8.value;
                node.nodeName === 'PROGRESS' ? node.value = progress : node.style.width = "".concat(progress, "%");
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }
        },
        // Called whenever the total upload progress gets updated.
        // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent
        totaluploadprogress: function totaluploadprogress() {},
        // Called just before the file is sent. Gets the `xhr` object as second
        // parameter, so you can modify it (for example to add a CSRF token) and a
        // `formData` object to add additional information.
        sending: function sending() {},
        sendingmultiple: function sendingmultiple() {},
        // When the complete upload is finished and successful
        // Receives `file`
        success: function success(file) {
          if (file.previewElement) {
            return file.previewElement.classList.add("dz-success");
          }
        },
        successmultiple: function successmultiple() {},
        // When the upload is canceled.
        canceled: function canceled(file) {
          return this.emit("error", file, this.options.dictUploadCanceled);
        },
        canceledmultiple: function canceledmultiple() {},
        // When the upload is finished, either with success or an error.
        // Receives `file`
        complete: function complete(file) {
          if (file._removeLink) {
            file._removeLink.innerHTML = this.options.dictRemoveFile;
          }

          if (file.previewElement) {
            return file.previewElement.classList.add("dz-complete");
          }
        },
        completemultiple: function completemultiple() {},
        maxfilesexceeded: function maxfilesexceeded() {},
        maxfilesreached: function maxfilesreached() {},
        queuecomplete: function queuecomplete() {},
        addedfiles: function addedfiles() {}
      };
      this.prototype._thumbnailQueue = [];
      this.prototype._processingThumbnail = false;
    } // global utility

  }, {
    key: "extend",
    value: function extend(target) {
      for (var _len2 = arguments.length, objects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        objects[_key2 - 1] = arguments[_key2];
      }

      for (var _i = 0, _objects = objects; _i < _objects.length; _i++) {
        var object = _objects[_i];

        for (var key in object) {
          var val = object[key];
          target[key] = val;
        }
      }

      return target;
    }
  }]);

  function Dropzone(el, options) {
    var _this;

    _classCallCheck(this, Dropzone);

    _this = _super.call(this);
    var fallback, left;
    _this.element = el; // For backwards compatibility since the version was in the prototype previously

    _this.version = Dropzone.version;
    _this.defaultOptions.previewTemplate = _this.defaultOptions.previewTemplate.replace(/\n*/g, "");
    _this.clickableElements = [];
    _this.listeners = [];
    _this.files = []; // All files

    if (typeof _this.element === "string") {
      _this.element = document.querySelector(_this.element);
    } // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.


    if (!_this.element || _this.element.nodeType == null) {
      throw new Error("Invalid dropzone element.");
    }

    if (_this.element.dropzone) {
      throw new Error("Dropzone already attached.");
    } // Now add this dropzone to the instances.


    Dropzone.instances.push(_assertThisInitialized(_this)); // Put the dropzone inside the element itself.

    _this.element.dropzone = _assertThisInitialized(_this);
    var elementOptions = (left = Dropzone.optionsForElement(_this.element)) != null ? left : {};
    _this.options = Dropzone.extend({}, _this.defaultOptions, elementOptions, options != null ? options : {}); // If the browser failed, just call the fallback and leave

    if (_this.options.forceFallback || !Dropzone.isBrowserSupported()) {
      return _possibleConstructorReturn(_this, _this.options.fallback.call(_assertThisInitialized(_this)));
    } // @options.url = @element.getAttribute "action" unless @options.url?


    if (_this.options.url == null) {
      _this.options.url = _this.element.getAttribute("action");
    }

    if (!_this.options.url) {
      throw new Error("No URL provided.");
    }

    if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) {
      throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
    }

    if (_this.options.uploadMultiple && _this.options.chunking) {
      throw new Error('You cannot set both: uploadMultiple and chunking.');
    } // Backwards compatibility


    if (_this.options.acceptedMimeTypes) {
      _this.options.acceptedFiles = _this.options.acceptedMimeTypes;
      delete _this.options.acceptedMimeTypes;
    } // Backwards compatibility


    if (_this.options.renameFilename != null) {
      _this.options.renameFile = function (file) {
        return _this.options.renameFilename.call(_assertThisInitialized(_this), file.name, file);
      };
    }

    if (typeof _this.options.method === 'string') {
      _this.options.method = _this.options.method.toUpperCase();
    }

    if ((fallback = _this.getExistingFallback()) && fallback.parentNode) {
      // Remove the fallback
      fallback.parentNode.removeChild(fallback);
    } // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false


    if (_this.options.previewsContainer !== false) {
      if (_this.options.previewsContainer) {
        _this.previewsContainer = Dropzone.getElement(_this.options.previewsContainer, "previewsContainer");
      } else {
        _this.previewsContainer = _this.element;
      }
    }

    if (_this.options.clickable) {
      if (_this.options.clickable === true) {
        _this.clickableElements = [_this.element];
      } else {
        _this.clickableElements = Dropzone.getElements(_this.options.clickable, "clickable");
      }
    }

    _this.init();

    return _this;
  } // Returns all files that have been accepted


  _createClass(Dropzone, [{
    key: "getAcceptedFiles",
    value: function getAcceptedFiles() {
      return this.files.filter(function (file) {
        return file.accepted;
      }).map(function (file) {
        return file;
      });
    } // Returns all files that have been rejected
    // Not sure when that's going to be useful, but added for completeness.

  }, {
    key: "getRejectedFiles",
    value: function getRejectedFiles() {
      return this.files.filter(function (file) {
        return !file.accepted;
      }).map(function (file) {
        return file;
      });
    }
  }, {
    key: "getFilesWithStatus",
    value: function getFilesWithStatus(status) {
      return this.files.filter(function (file) {
        return file.status === status;
      }).map(function (file) {
        return file;
      });
    } // Returns all files that are in the queue

  }, {
    key: "getQueuedFiles",
    value: function getQueuedFiles() {
      return this.getFilesWithStatus(Dropzone.QUEUED);
    }
  }, {
    key: "getUploadingFiles",
    value: function getUploadingFiles() {
      return this.getFilesWithStatus(Dropzone.UPLOADING);
    }
  }, {
    key: "getAddedFiles",
    value: function getAddedFiles() {
      return this.getFilesWithStatus(Dropzone.ADDED);
    } // Files that are either queued or uploading

  }, {
    key: "getActiveFiles",
    value: function getActiveFiles() {
      return this.files.filter(function (file) {
        return file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED;
      }).map(function (file) {
        return file;
      });
    } // The function that gets called when Dropzone is initialized. You
    // can (and should) setup event listeners inside this function.

  }, {
    key: "init",
    value: function init() {
      var _this3 = this;

      // In case it isn't set already
      if (this.element.tagName === "form") {
        this.element.setAttribute("enctype", "multipart/form-data");
      }

      if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><button class=\"dz-button\" type=\"button\">".concat(this.options.dictDefaultMessage, "</button></div>")));
      }

      if (this.clickableElements.length) {
        var setupHiddenFileInput = function setupHiddenFileInput() {
          if (_this3.hiddenFileInput) {
            _this3.hiddenFileInput.parentNode.removeChild(_this3.hiddenFileInput);
          }

          _this3.hiddenFileInput = document.createElement("input");

          _this3.hiddenFileInput.setAttribute("type", "file");

          if (_this3.options.maxFiles === null || _this3.options.maxFiles > 1) {
            _this3.hiddenFileInput.setAttribute("multiple", "multiple");
          }

          _this3.hiddenFileInput.className = "dz-hidden-input";

          if (_this3.options.acceptedFiles !== null) {
            _this3.hiddenFileInput.setAttribute("accept", _this3.options.acceptedFiles);
          }

          if (_this3.options.capture !== null) {
            _this3.hiddenFileInput.setAttribute("capture", _this3.options.capture);
          } // Not setting `display="none"` because some browsers don't accept clicks
          // on elements that aren't displayed.


          _this3.hiddenFileInput.style.visibility = "hidden";
          _this3.hiddenFileInput.style.position = "absolute";
          _this3.hiddenFileInput.style.top = "0";
          _this3.hiddenFileInput.style.left = "0";
          _this3.hiddenFileInput.style.height = "0";
          _this3.hiddenFileInput.style.width = "0";
          Dropzone.getElement(_this3.options.hiddenInputContainer, 'hiddenInputContainer').appendChild(_this3.hiddenFileInput);
          return _this3.hiddenFileInput.addEventListener("change", function () {
            var files = _this3.hiddenFileInput.files;

            if (files.length) {
              var _iterator9 = _createForOfIteratorHelper(files),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var file = _step9.value;

                  _this3.addFile(file);
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
            }

            _this3.emit("addedfiles", files);

            return setupHiddenFileInput();
          });
        };

        setupHiddenFileInput();
      }

      this.URL = window.URL !== null ? window.URL : window.webkitURL; // Setup all event listeners on the Dropzone object itself.
      // They're not in @setupEventListeners() because they shouldn't be removed
      // again when the dropzone gets disabled.

      var _iterator10 = _createForOfIteratorHelper(this.events),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var eventName = _step10.value;
          this.on(eventName, this.options[eventName]);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      this.on("uploadprogress", function () {
        return _this3.updateTotalUploadProgress();
      });
      this.on("removedfile", function () {
        return _this3.updateTotalUploadProgress();
      });
      this.on("canceled", function (file) {
        return _this3.emit("complete", file);
      }); // Emit a `queuecomplete` event if all files finished uploading.

      this.on("complete", function (file) {
        if (_this3.getAddedFiles().length === 0 && _this3.getUploadingFiles().length === 0 && _this3.getQueuedFiles().length === 0) {
          // This needs to be deferred so that `queuecomplete` really triggers after `complete`
          return setTimeout(function () {
            return _this3.emit("queuecomplete");
          }, 0);
        }
      });

      var containsFiles = function containsFiles(e) {
        if (e.dataTransfer.types) {
          // Because e.dataTransfer.types is an Object in
          // IE, we need to iterate like this instead of
          // using e.dataTransfer.types.some()
          for (var i = 0; i < e.dataTransfer.types.length; i++) {
            if (e.dataTransfer.types[i] === "Files") return true;
          }
        }

        return false;
      };

      var noPropagation = function noPropagation(e) {
        // If there are no files, we don't want to stop
        // propagation so we don't interfere with other
        // drag and drop behaviour.
        if (!containsFiles(e)) return;
        e.stopPropagation();

        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      }; // Create the listeners


      this.listeners = [{
        element: this.element,
        events: {
          "dragstart": function dragstart(e) {
            return _this3.emit("dragstart", e);
          },
          "dragenter": function dragenter(e) {
            noPropagation(e);
            return _this3.emit("dragenter", e);
          },
          "dragover": function dragover(e) {
            // Makes it possible to drag files from chrome's download bar
            // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar
            // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)
            var efct;

            try {
              efct = e.dataTransfer.effectAllowed;
            } catch (error) {}

            e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
            noPropagation(e);
            return _this3.emit("dragover", e);
          },
          "dragleave": function dragleave(e) {
            return _this3.emit("dragleave", e);
          },
          "drop": function drop(e) {
            noPropagation(e);
            return _this3.drop(e);
          },
          "dragend": function dragend(e) {
            return _this3.emit("dragend", e);
          }
        } // This is disabled right now, because the browsers don't implement it properly.
        // "paste": (e) =>
        //   noPropagation e
        //   @paste e

      }];
      this.clickableElements.forEach(function (clickableElement) {
        return _this3.listeners.push({
          element: clickableElement,
          events: {
            "click": function click(evt) {
              // Only the actual dropzone or the message element should trigger file selection
              if (clickableElement !== _this3.element || evt.target === _this3.element || Dropzone.elementInside(evt.target, _this3.element.querySelector(".dz-message"))) {
                _this3.hiddenFileInput.click(); // Forward the click

              }

              return true;
            }
          }
        });
      });
      this.enable();
      return this.options.init.call(this);
    } // Not fully tested yet

  }, {
    key: "destroy",
    value: function destroy() {
      this.disable();
      this.removeAllFiles(true);

      if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {
        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
        this.hiddenFileInput = null;
      }

      delete this.element.dropzone;
      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
    }
  }, {
    key: "updateTotalUploadProgress",
    value: function updateTotalUploadProgress() {
      var totalUploadProgress;
      var totalBytesSent = 0;
      var totalBytes = 0;
      var activeFiles = this.getActiveFiles();

      if (activeFiles.length) {
        var _iterator11 = _createForOfIteratorHelper(this.getActiveFiles()),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var file = _step11.value;
            totalBytesSent += file.upload.bytesSent;
            totalBytes += file.upload.total;
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        totalUploadProgress = 100 * totalBytesSent / totalBytes;
      } else {
        totalUploadProgress = 100;
      }

      return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
    } // @options.paramName can be a function taking one parameter rather than a string.
    // A parameter name for a file is obtained simply by calling this with an index number.

  }, {
    key: "_getParamName",
    value: function _getParamName(n) {
      if (typeof this.options.paramName === "function") {
        return this.options.paramName(n);
      } else {
        return "".concat(this.options.paramName).concat(this.options.uploadMultiple ? "[".concat(n, "]") : "");
      }
    } // If @options.renameFile is a function,
    // the function will be used to rename the file.name before appending it to the formData

  }, {
    key: "_renameFile",
    value: function _renameFile(file) {
      if (typeof this.options.renameFile !== "function") {
        return file.name;
      }

      return this.options.renameFile(file);
    } // Returns a form that can be used as fallback if the browser does not support DragnDrop
    //
    // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.
    // This code has to pass in IE7 :(

  }, {
    key: "getFallbackForm",
    value: function getFallbackForm() {
      var existingFallback, form;

      if (existingFallback = this.getExistingFallback()) {
        return existingFallback;
      }

      var fieldsString = "<div class=\"dz-fallback\">";

      if (this.options.dictFallbackText) {
        fieldsString += "<p>".concat(this.options.dictFallbackText, "</p>");
      }

      fieldsString += "<input type=\"file\" name=\"".concat(this._getParamName(0), "\" ").concat(this.options.uploadMultiple ? 'multiple="multiple"' : undefined, " /><input type=\"submit\" value=\"Upload!\"></div>");
      var fields = Dropzone.createElement(fieldsString);

      if (this.element.tagName !== "FORM") {
        form = Dropzone.createElement("<form action=\"".concat(this.options.url, "\" enctype=\"multipart/form-data\" method=\"").concat(this.options.method, "\"></form>"));
        form.appendChild(fields);
      } else {
        // Make sure that the enctype and method attributes are set properly
        this.element.setAttribute("enctype", "multipart/form-data");
        this.element.setAttribute("method", this.options.method);
      }

      return form != null ? form : fields;
    } // Returns the fallback elements if they exist already
    //
    // This code has to pass in IE7 :(

  }, {
    key: "getExistingFallback",
    value: function getExistingFallback() {
      var getFallback = function getFallback(elements) {
        var _iterator12 = _createForOfIteratorHelper(elements),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var el = _step12.value;

            if (/(^| )fallback($| )/.test(el.className)) {
              return el;
            }
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      };

      for (var _i2 = 0, _arr = ["div", "form"]; _i2 < _arr.length; _i2++) {
        var tagName = _arr[_i2];
        var fallback;

        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
          return fallback;
        }
      }
    } // Activates all listeners stored in @listeners

  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      return this.listeners.map(function (elementListeners) {
        return function () {
          var result = [];

          for (var event in elementListeners.events) {
            var listener = elementListeners.events[event];
            result.push(elementListeners.element.addEventListener(event, listener, false));
          }

          return result;
        }();
      });
    } // Deactivates all listeners stored in @listeners

  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      return this.listeners.map(function (elementListeners) {
        return function () {
          var result = [];

          for (var event in elementListeners.events) {
            var listener = elementListeners.events[event];
            result.push(elementListeners.element.removeEventListener(event, listener, false));
          }

          return result;
        }();
      });
    } // Removes all event listeners and cancels all files in the queue or being processed.

  }, {
    key: "disable",
    value: function disable() {
      var _this4 = this;

      this.clickableElements.forEach(function (element) {
        return element.classList.remove("dz-clickable");
      });
      this.removeEventListeners();
      this.disabled = true;
      return this.files.map(function (file) {
        return _this4.cancelUpload(file);
      });
    }
  }, {
    key: "enable",
    value: function enable() {
      delete this.disabled;
      this.clickableElements.forEach(function (element) {
        return element.classList.add("dz-clickable");
      });
      return this.setupEventListeners();
    } // Returns a nicely formatted filesize

  }, {
    key: "filesize",
    value: function filesize(size) {
      var selectedSize = 0;
      var selectedUnit = "b";

      if (size > 0) {
        var units = ['tb', 'gb', 'mb', 'kb', 'b'];

        for (var i = 0; i < units.length; i++) {
          var unit = units[i];
          var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;

          if (size >= cutoff) {
            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
            selectedUnit = unit;
            break;
          }
        }

        selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits
      }

      return "<strong>".concat(selectedSize, "</strong> ").concat(this.options.dictFileSizeUnits[selectedUnit]);
    } // Adds or removes the `dz-max-files-reached` class from the form.

  }, {
    key: "_updateMaxFilesReachedClass",
    value: function _updateMaxFilesReachedClass() {
      if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
        if (this.getAcceptedFiles().length === this.options.maxFiles) {
          this.emit('maxfilesreached', this.files);
        }

        return this.element.classList.add("dz-max-files-reached");
      } else {
        return this.element.classList.remove("dz-max-files-reached");
      }
    }
  }, {
    key: "drop",
    value: function drop(e) {
      if (!e.dataTransfer) {
        return;
      }

      this.emit("drop", e); // Convert the FileList to an Array
      // This is necessary for IE11

      var files = [];

      for (var i = 0; i < e.dataTransfer.files.length; i++) {
        files[i] = e.dataTransfer.files[i];
      } // Even if it's a folder, files.length will contain the folders.


      if (files.length) {
        var items = e.dataTransfer.items;

        if (items && items.length && items[0].webkitGetAsEntry != null) {
          // The browser supports dropping of folders, so handle items instead of files
          this._addFilesFromItems(items);
        } else {
          this.handleFiles(files);
        }
      }

      this.emit("addedfiles", files);
    }
  }, {
    key: "paste",
    value: function paste(e) {
      if (__guard__(e != null ? e.clipboardData : undefined, function (x) {
        return x.items;
      }) == null) {
        return;
      }

      this.emit("paste", e);
      var items = e.clipboardData.items;

      if (items.length) {
        return this._addFilesFromItems(items);
      }
    }
  }, {
    key: "handleFiles",
    value: function handleFiles(files) {
      var _iterator13 = _createForOfIteratorHelper(files),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var file = _step13.value;
          this.addFile(file);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    } // When a folder is dropped (or files are pasted), items must be handled
    // instead of files.

  }, {
    key: "_addFilesFromItems",
    value: function _addFilesFromItems(items) {
      var _this5 = this;

      return function () {
        var result = [];

        var _iterator14 = _createForOfIteratorHelper(items),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var item = _step14.value;
            var entry;

            if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {
              if (entry.isFile) {
                result.push(_this5.addFile(item.getAsFile()));
              } else if (entry.isDirectory) {
                // Append all files from that directory to files
                result.push(_this5._addFilesFromDirectory(entry, entry.name));
              } else {
                result.push(undefined);
              }
            } else if (item.getAsFile != null) {
              if (item.kind == null || item.kind === "file") {
                result.push(_this5.addFile(item.getAsFile()));
              } else {
                result.push(undefined);
              }
            } else {
              result.push(undefined);
            }
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        return result;
      }();
    } // Goes through the directory, and adds each file it finds recursively

  }, {
    key: "_addFilesFromDirectory",
    value: function _addFilesFromDirectory(directory, path) {
      var _this6 = this;

      var dirReader = directory.createReader();

      var errorHandler = function errorHandler(error) {
        return __guardMethod__(console, 'log', function (o) {
          return o.log(error);
        });
      };

      var readEntries = function readEntries() {
        return dirReader.readEntries(function (entries) {
          if (entries.length > 0) {
            var _iterator15 = _createForOfIteratorHelper(entries),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var entry = _step15.value;

                if (entry.isFile) {
                  entry.file(function (file) {
                    if (_this6.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                      return;
                    }

                    file.fullPath = "".concat(path, "/").concat(file.name);
                    return _this6.addFile(file);
                  });
                } else if (entry.isDirectory) {
                  _this6._addFilesFromDirectory(entry, "".concat(path, "/").concat(entry.name));
                }
              } // Recursively call readEntries() again, since browser only handle
              // the first 100 entries.
              // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries

            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }

            readEntries();
          }

          return null;
        }, errorHandler);
      };

      return readEntries();
    } // If `done()` is called without argument the file is accepted
    // If you call it with an error message, the file is rejected
    // (This allows for asynchronous validation)
    //
    // This function checks the filesize, and if the file.type passes the
    // `acceptedFiles` check.

  }, {
    key: "accept",
    value: function accept(file, done) {
      if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1024 * 1024) {
        done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
        done(this.options.dictInvalidFileType);
      } else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
        this.emit("maxfilesexceeded", file);
      } else {
        this.options.accept.call(this, file, done);
      }
    }
  }, {
    key: "addFile",
    value: function addFile(file) {
      var _this7 = this;

      file.upload = {
        uuid: Dropzone.uuidv4(),
        progress: 0,
        // Setting the total upload size to file.size for the beginning
        // It's actual different than the size to be transmitted.
        total: file.size,
        bytesSent: 0,
        filename: this._renameFile(file) // Not setting chunking information here, because the acutal data — and
        // thus the chunks — might change if `options.transformFile` is set
        // and does something to the data.

      };
      this.files.push(file);
      file.status = Dropzone.ADDED;
      this.emit("addedfile", file);

      this._enqueueThumbnail(file);

      this.accept(file, function (error) {
        if (error) {
          file.accepted = false;

          _this7._errorProcessing([file], error); // Will set the file.status

        } else {
          file.accepted = true;

          if (_this7.options.autoQueue) {
            _this7.enqueueFile(file);
          } // Will set .accepted = true

        }

        _this7._updateMaxFilesReachedClass();
      });
    } // Wrapper for enqueueFile

  }, {
    key: "enqueueFiles",
    value: function enqueueFiles(files) {
      var _iterator16 = _createForOfIteratorHelper(files),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var file = _step16.value;
          this.enqueueFile(file);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }

      return null;
    }
  }, {
    key: "enqueueFile",
    value: function enqueueFile(file) {
      var _this8 = this;

      if (file.status === Dropzone.ADDED && file.accepted === true) {
        file.status = Dropzone.QUEUED;

        if (this.options.autoProcessQueue) {
          return setTimeout(function () {
            return _this8.processQueue();
          }, 0); // Deferring the call
        }
      } else {
        throw new Error("This file can't be queued because it has already been processed or was rejected.");
      }
    }
  }, {
    key: "_enqueueThumbnail",
    value: function _enqueueThumbnail(file) {
      var _this9 = this;

      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
        this._thumbnailQueue.push(file);

        return setTimeout(function () {
          return _this9._processThumbnailQueue();
        }, 0); // Deferring the call
      }
    }
  }, {
    key: "_processThumbnailQueue",
    value: function _processThumbnailQueue() {
      var _this10 = this;

      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
        return;
      }

      this._processingThumbnail = true;

      var file = this._thumbnailQueue.shift();

      return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function (dataUrl) {
        _this10.emit("thumbnail", file, dataUrl);

        _this10._processingThumbnail = false;
        return _this10._processThumbnailQueue();
      });
    } // Can be called by the user to remove a file

  }, {
    key: "removeFile",
    value: function removeFile(file) {
      if (file.status === Dropzone.UPLOADING) {
        this.cancelUpload(file);
      }

      this.files = without(this.files, file);
      this.emit("removedfile", file);

      if (this.files.length === 0) {
        return this.emit("reset");
      }
    } // Removes all files that aren't currently processed from the list

  }, {
    key: "removeAllFiles",
    value: function removeAllFiles(cancelIfNecessary) {
      // Create a copy of files since removeFile() changes the @files array.
      if (cancelIfNecessary == null) {
        cancelIfNecessary = false;
      }

      var _iterator17 = _createForOfIteratorHelper(this.files.slice()),
          _step17;

      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var file = _step17.value;

          if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
            this.removeFile(file);
          }
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }

      return null;
    } // Resizes an image before it gets sent to the server. This function is the default behavior of
    // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with
    // the resized blob.

  }, {
    key: "resizeImage",
    value: function resizeImage(file, width, height, resizeMethod, callback) {
      var _this11 = this;

      return this.createThumbnail(file, width, height, resizeMethod, true, function (dataUrl, canvas) {
        if (canvas == null) {
          // The image has not been resized
          return callback(file);
        } else {
          var resizeMimeType = _this11.options.resizeMimeType;

          if (resizeMimeType == null) {
            resizeMimeType = file.type;
          }

          var resizedDataURL = canvas.toDataURL(resizeMimeType, _this11.options.resizeQuality);

          if (resizeMimeType === 'image/jpeg' || resizeMimeType === 'image/jpg') {
            // Now add the original EXIF information
            resizedDataURL = ExifRestore.restore(file.dataURL, resizedDataURL);
          }

          return callback(Dropzone.dataURItoBlob(resizedDataURL));
        }
      });
    }
  }, {
    key: "createThumbnail",
    value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {
      var _this12 = this;

      var fileReader = new FileReader();

      fileReader.onload = function () {
        file.dataURL = fileReader.result; // Don't bother creating a thumbnail for SVG images since they're vector

        if (file.type === "image/svg+xml") {
          if (callback != null) {
            callback(fileReader.result);
          }

          return;
        }

        _this12.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);
      };

      fileReader.readAsDataURL(file);
    } // `mockFile` needs to have these attributes:
    // 
    //     { name: 'name', size: 12345, imageUrl: '' }
    //
    // `callback` will be invoked when the image has been downloaded and displayed.
    // `crossOrigin` will be added to the `img` tag when accessing the file.

  }, {
    key: "displayExistingFile",
    value: function displayExistingFile(mockFile, imageUrl, callback, crossOrigin) {
      var _this13 = this;

      var resizeThumbnail = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      this.emit("addedfile", mockFile);
      this.emit("complete", mockFile);

      if (!resizeThumbnail) {
        this.emit("thumbnail", mockFile, imageUrl);
        if (callback) callback();
      } else {
        var onDone = function onDone(thumbnail) {
          _this13.emit('thumbnail', mockFile, thumbnail);

          if (callback) callback();
        };

        mockFile.dataURL = imageUrl;
        this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.resizeMethod, this.options.fixOrientation, onDone, crossOrigin);
      }
    }
  }, {
    key: "createThumbnailFromUrl",
    value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {
      var _this14 = this;

      // Not using `new Image` here because of a bug in latest Chrome versions.
      // See https://github.com/enyo/dropzone/pull/226
      var img = document.createElement("img");

      if (crossOrigin) {
        img.crossOrigin = crossOrigin;
      } // fixOrientation is not needed anymore with browsers handling imageOrientation


      fixOrientation = getComputedStyle(document.body)['imageOrientation'] == 'from-image' ? false : fixOrientation;

      img.onload = function () {
        var loadExif = function loadExif(callback) {
          return callback(1);
        };

        if (typeof EXIF !== 'undefined' && EXIF !== null && fixOrientation) {
          loadExif = function loadExif(callback) {
            return EXIF.getData(img, function () {
              return callback(EXIF.getTag(this, 'Orientation'));
            });
          };
        }

        return loadExif(function (orientation) {
          file.width = img.width;
          file.height = img.height;

          var resizeInfo = _this14.options.resize.call(_this14, file, width, height, resizeMethod);

          var canvas = document.createElement("canvas");
          var ctx = canvas.getContext("2d");
          canvas.width = resizeInfo.trgWidth;
          canvas.height = resizeInfo.trgHeight;

          if (orientation > 4) {
            canvas.width = resizeInfo.trgHeight;
            canvas.height = resizeInfo.trgWidth;
          }

          switch (orientation) {
            case 2:
              // horizontal flip
              ctx.translate(canvas.width, 0);
              ctx.scale(-1, 1);
              break;

            case 3:
              // 180° rotate left
              ctx.translate(canvas.width, canvas.height);
              ctx.rotate(Math.PI);
              break;

            case 4:
              // vertical flip
              ctx.translate(0, canvas.height);
              ctx.scale(1, -1);
              break;

            case 5:
              // vertical flip + 90 rotate right
              ctx.rotate(0.5 * Math.PI);
              ctx.scale(1, -1);
              break;

            case 6:
              // 90° rotate right
              ctx.rotate(0.5 * Math.PI);
              ctx.translate(0, -canvas.width);
              break;

            case 7:
              // horizontal flip + 90 rotate right
              ctx.rotate(0.5 * Math.PI);
              ctx.translate(canvas.height, -canvas.width);
              ctx.scale(-1, 1);
              break;

            case 8:
              // 90° rotate left
              ctx.rotate(-0.5 * Math.PI);
              ctx.translate(-canvas.height, 0);
              break;
          } // This is a bugfix for iOS' scaling bug.


          drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
          var thumbnail = canvas.toDataURL("image/png");

          if (callback != null) {
            return callback(thumbnail, canvas);
          }
        });
      };

      if (callback != null) {
        img.onerror = callback;
      }

      return img.src = file.dataURL;
    } // Goes through the queue and processes files if there aren't too many already.

  }, {
    key: "processQueue",
    value: function processQueue() {
      var parallelUploads = this.options.parallelUploads;
      var processingLength = this.getUploadingFiles().length;
      var i = processingLength; // There are already at least as many files uploading than should be

      if (processingLength >= parallelUploads) {
        return;
      }

      var queuedFiles = this.getQueuedFiles();

      if (!(queuedFiles.length > 0)) {
        return;
      }

      if (this.options.uploadMultiple) {
        // The files should be uploaded in one request
        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
      } else {
        while (i < parallelUploads) {
          if (!queuedFiles.length) {
            return;
          } // Nothing left to process


          this.processFile(queuedFiles.shift());
          i++;
        }
      }
    } // Wrapper for `processFiles`

  }, {
    key: "processFile",
    value: function processFile(file) {
      return this.processFiles([file]);
    } // Loads the file, then calls finishedLoading()

  }, {
    key: "processFiles",
    value: function processFiles(files) {
      var _iterator18 = _createForOfIteratorHelper(files),
          _step18;

      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var file = _step18.value;
          file.processing = true; // Backwards compatibility

          file.status = Dropzone.UPLOADING;
          this.emit("processing", file);
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }

      if (this.options.uploadMultiple) {
        this.emit("processingmultiple", files);
      }

      return this.uploadFiles(files);
    }
  }, {
    key: "_getFilesWithXhr",
    value: function _getFilesWithXhr(xhr) {
      var files;
      return files = this.files.filter(function (file) {
        return file.xhr === xhr;
      }).map(function (file) {
        return file;
      });
    } // Cancels the file upload and sets the status to CANCELED
    // **if** the file is actually being uploaded.
    // If it's still in the queue, the file is being removed from it and the status
    // set to CANCELED.

  }, {
    key: "cancelUpload",
    value: function cancelUpload(file) {
      if (file.status === Dropzone.UPLOADING) {
        var groupedFiles = this._getFilesWithXhr(file.xhr);

        var _iterator19 = _createForOfIteratorHelper(groupedFiles),
            _step19;

        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var groupedFile = _step19.value;
            groupedFile.status = Dropzone.CANCELED;
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }

        if (typeof file.xhr !== 'undefined') {
          file.xhr.abort();
        }

        var _iterator20 = _createForOfIteratorHelper(groupedFiles),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var _groupedFile = _step20.value;
            this.emit("canceled", _groupedFile);
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }

        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", groupedFiles);
        }
      } else if (file.status === Dropzone.ADDED || file.status === Dropzone.QUEUED) {
        file.status = Dropzone.CANCELED;
        this.emit("canceled", file);

        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", [file]);
        }
      }

      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    }
  }, {
    key: "resolveOption",
    value: function resolveOption(option) {
      if (typeof option === 'function') {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        return option.apply(this, args);
      }

      return option;
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(file) {
      return this.uploadFiles([file]);
    }
  }, {
    key: "uploadFiles",
    value: function uploadFiles(files) {
      var _this15 = this;

      this._transformFiles(files, function (transformedFiles) {
        if (_this15.options.chunking) {
          // Chunking is not allowed to be used with `uploadMultiple` so we know
          // that there is only __one__file.
          var transformedFile = transformedFiles[0];
          files[0].upload.chunked = _this15.options.chunking && (_this15.options.forceChunking || transformedFile.size > _this15.options.chunkSize);
          files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / _this15.options.chunkSize);
        }

        if (files[0].upload.chunked) {
          // This file should be sent in chunks!
          // If the chunking option is set, we **know** that there can only be **one** file, since
          // uploadMultiple is not allowed with this option.
          var file = files[0];
          var _transformedFile = transformedFiles[0];
          var startedChunkCount = 0;
          file.upload.chunks = [];

          var handleNextChunk = function handleNextChunk() {
            var chunkIndex = 0; // Find the next item in file.upload.chunks that is not defined yet.

            while (file.upload.chunks[chunkIndex] !== undefined) {
              chunkIndex++;
            } // This means, that all chunks have already been started.


            if (chunkIndex >= file.upload.totalChunkCount) return;
            startedChunkCount++;
            var start = chunkIndex * _this15.options.chunkSize;
            var end = Math.min(start + _this15.options.chunkSize, _transformedFile.size);
            var dataBlock = {
              name: _this15._getParamName(0),
              data: _transformedFile.webkitSlice ? _transformedFile.webkitSlice(start, end) : _transformedFile.slice(start, end),
              filename: file.upload.filename,
              chunkIndex: chunkIndex
            };
            file.upload.chunks[chunkIndex] = {
              file: file,
              index: chunkIndex,
              dataBlock: dataBlock,
              // In case we want to retry.
              status: Dropzone.UPLOADING,
              progress: 0,
              retries: 0 // The number of times this block has been retried.

            };

            _this15._uploadData(files, [dataBlock]);
          };

          file.upload.finishedChunkUpload = function (chunk) {
            var allFinished = true;
            chunk.status = Dropzone.SUCCESS; // Clear the data from the chunk

            chunk.dataBlock = null; // Leaving this reference to xhr intact here will cause memory leaks in some browsers

            chunk.xhr = null;

            for (var i = 0; i < file.upload.totalChunkCount; i++) {
              if (file.upload.chunks[i] === undefined) {
                return handleNextChunk();
              }

              if (file.upload.chunks[i].status !== Dropzone.SUCCESS) {
                allFinished = false;
              }
            }

            if (allFinished) {
              _this15.options.chunksUploaded(file, function () {
                _this15._finished(files, '', null);
              });
            }
          };

          if (_this15.options.parallelChunkUploads) {
            for (var i = 0; i < file.upload.totalChunkCount; i++) {
              handleNextChunk();
            }
          } else {
            handleNextChunk();
          }
        } else {
          var dataBlocks = [];

          for (var _i3 = 0; _i3 < files.length; _i3++) {
            dataBlocks[_i3] = {
              name: _this15._getParamName(_i3),
              data: transformedFiles[_i3],
              filename: files[_i3].upload.filename
            };
          }

          _this15._uploadData(files, dataBlocks);
        }
      });
    } /// Returns the right chunk for given file and xhr

  }, {
    key: "_getChunk",
    value: function _getChunk(file, xhr) {
      for (var i = 0; i < file.upload.totalChunkCount; i++) {
        if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) {
          return file.upload.chunks[i];
        }
      }
    } // This function actually uploads the file(s) to the server.
    // If dataBlocks contains the actual data to upload (meaning, that this could either be transformed
    // files, or individual chunks for chunked upload).

  }, {
    key: "_uploadData",
    value: function _uploadData(files, dataBlocks) {
      var _this16 = this;

      var xhr = new XMLHttpRequest(); // Put the xhr object in the file objects to be able to reference it later.

      var _iterator21 = _createForOfIteratorHelper(files),
          _step21;

      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var file = _step21.value;
          file.xhr = xhr;
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }

      if (files[0].upload.chunked) {
        // Put the xhr object in the right chunk object, so it can be associated later, and found with _getChunk
        files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;
      }

      var method = this.resolveOption(this.options.method, files);
      var url = this.resolveOption(this.options.url, files);
      xhr.open(method, url, true); // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8

      xhr.timeout = this.resolveOption(this.options.timeout, files); // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179

      xhr.withCredentials = !!this.options.withCredentials;

      xhr.onload = function (e) {
        _this16._finishedUploading(files, xhr, e);
      };

      xhr.ontimeout = function () {
        _this16._handleUploadError(files, xhr, "Request timedout after ".concat(_this16.options.timeout / 1000, " seconds"));
      };

      xhr.onerror = function () {
        _this16._handleUploadError(files, xhr);
      }; // Some browsers do not have the .upload property


      var progressObj = xhr.upload != null ? xhr.upload : xhr;

      progressObj.onprogress = function (e) {
        return _this16._updateFilesUploadProgress(files, xhr, e);
      };

      var headers = {
        "Accept": "application/json",
        "Cache-Control": "no-cache",
        "X-Requested-With": "XMLHttpRequest"
      };

      if (this.options.headers) {
        Dropzone.extend(headers, this.options.headers);
      }

      for (var headerName in headers) {
        var headerValue = headers[headerName];

        if (headerValue) {
          xhr.setRequestHeader(headerName, headerValue);
        }
      }

      var formData = new FormData(); // Adding all @options parameters

      if (this.options.params) {
        var additionalParams = this.options.params;

        if (typeof additionalParams === 'function') {
          additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);
        }

        for (var key in additionalParams) {
          var value = additionalParams[key];

          if (Array.isArray(value)) {
            // The additional parameter contains an array,
            // so lets iterate over it to attach each value
            // individually.
            for (var i = 0; i < value.length; i++) {
              formData.append(key, value[i]);
            }
          } else {
            formData.append(key, value);
          }
        }
      } // Let the user add additional data if necessary


      var _iterator22 = _createForOfIteratorHelper(files),
          _step22;

      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var _file = _step22.value;
          this.emit("sending", _file, xhr, formData);
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }

      if (this.options.uploadMultiple) {
        this.emit("sendingmultiple", files, xhr, formData);
      }

      this._addFormElementData(formData); // Finally add the files
      // Has to be last because some servers (eg: S3) expect the file to be the last parameter


      for (var _i4 = 0; _i4 < dataBlocks.length; _i4++) {
        var dataBlock = dataBlocks[_i4];
        formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);
      }

      this.submitRequest(xhr, formData, files);
    } // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.

  }, {
    key: "_transformFiles",
    value: function _transformFiles(files, done) {
      var _this17 = this;

      var transformedFiles = []; // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.

      var doneCounter = 0;

      var _loop = function _loop(i) {
        _this17.options.transformFile.call(_this17, files[i], function (transformedFile) {
          transformedFiles[i] = transformedFile;

          if (++doneCounter === files.length) {
            done(transformedFiles);
          }
        });
      };

      for (var i = 0; i < files.length; i++) {
        _loop(i);
      }
    } // Takes care of adding other input elements of the form to the AJAX request

  }, {
    key: "_addFormElementData",
    value: function _addFormElementData(formData) {
      // Take care of other input elements
      if (this.element.tagName === "FORM") {
        var _iterator23 = _createForOfIteratorHelper(this.element.querySelectorAll("input, textarea, select, button")),
            _step23;

        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var input = _step23.value;
            var inputName = input.getAttribute("name");
            var inputType = input.getAttribute("type");
            if (inputType) inputType = inputType.toLowerCase(); // If the input doesn't have a name, we can't use it.

            if (typeof inputName === 'undefined' || inputName === null) continue;

            if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
              // Possibly multiple values
              var _iterator24 = _createForOfIteratorHelper(input.options),
                  _step24;

              try {
                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                  var option = _step24.value;

                  if (option.selected) {
                    formData.append(inputName, option.value);
                  }
                }
              } catch (err) {
                _iterator24.e(err);
              } finally {
                _iterator24.f();
              }
            } else if (!inputType || inputType !== "checkbox" && inputType !== "radio" || input.checked) {
              formData.append(inputName, input.value);
            }
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }
      }
    } // Invoked when there is new progress information about given files.
    // If e is not provided, it is assumed that the upload is finished.

  }, {
    key: "_updateFilesUploadProgress",
    value: function _updateFilesUploadProgress(files, xhr, e) {
      var progress;

      if (typeof e !== 'undefined') {
        progress = 100 * e.loaded / e.total;

        if (files[0].upload.chunked) {
          var file = files[0]; // Since this is a chunked upload, we need to update the appropriate chunk progress.

          var chunk = this._getChunk(file, xhr);

          chunk.progress = progress;
          chunk.total = e.total;
          chunk.bytesSent = e.loaded;
          var fileProgress = 0,
              fileTotal,
              fileBytesSent;
          file.upload.progress = 0;
          file.upload.total = 0;
          file.upload.bytesSent = 0;

          for (var i = 0; i < file.upload.totalChunkCount; i++) {
            if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].progress !== undefined) {
              file.upload.progress += file.upload.chunks[i].progress;
              file.upload.total += file.upload.chunks[i].total;
              file.upload.bytesSent += file.upload.chunks[i].bytesSent;
            }
          }

          file.upload.progress = file.upload.progress / file.upload.totalChunkCount;
        } else {
          var _iterator25 = _createForOfIteratorHelper(files),
              _step25;

          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var _file2 = _step25.value;
              _file2.upload.progress = progress;
              _file2.upload.total = e.total;
              _file2.upload.bytesSent = e.loaded;
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        }

        var _iterator26 = _createForOfIteratorHelper(files),
            _step26;

        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var _file3 = _step26.value;
            this.emit("uploadprogress", _file3, _file3.upload.progress, _file3.upload.bytesSent);
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }
      } else {
        // Called when the file finished uploading
        var allFilesFinished = true;
        progress = 100;

        var _iterator27 = _createForOfIteratorHelper(files),
            _step27;

        try {
          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
            var _file4 = _step27.value;

            if (_file4.upload.progress !== 100 || _file4.upload.bytesSent !== _file4.upload.total) {
              allFilesFinished = false;
            }

            _file4.upload.progress = progress;
            _file4.upload.bytesSent = _file4.upload.total;
          } // Nothing to do, all files already at 100%

        } catch (err) {
          _iterator27.e(err);
        } finally {
          _iterator27.f();
        }

        if (allFilesFinished) {
          return;
        }

        var _iterator28 = _createForOfIteratorHelper(files),
            _step28;

        try {
          for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
            var _file5 = _step28.value;
            this.emit("uploadprogress", _file5, progress, _file5.upload.bytesSent);
          }
        } catch (err) {
          _iterator28.e(err);
        } finally {
          _iterator28.f();
        }
      }
    }
  }, {
    key: "_finishedUploading",
    value: function _finishedUploading(files, xhr, e) {
      var response;

      if (files[0].status === Dropzone.CANCELED) {
        return;
      }

      if (xhr.readyState !== 4) {
        return;
      }

      if (xhr.responseType !== 'arraybuffer' && xhr.responseType !== 'blob') {
        response = xhr.responseText;

        if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
          try {
            response = JSON.parse(response);
          } catch (error) {
            e = error;
            response = "Invalid JSON response from server.";
          }
        }
      }

      this._updateFilesUploadProgress(files);

      if (!(200 <= xhr.status && xhr.status < 300)) {
        this._handleUploadError(files, xhr, response);
      } else {
        if (files[0].upload.chunked) {
          files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr));
        } else {
          this._finished(files, response, e);
        }
      }
    }
  }, {
    key: "_handleUploadError",
    value: function _handleUploadError(files, xhr, response) {
      if (files[0].status === Dropzone.CANCELED) {
        return;
      }

      if (files[0].upload.chunked && this.options.retryChunks) {
        var chunk = this._getChunk(files[0], xhr);

        if (chunk.retries++ < this.options.retryChunksLimit) {
          this._uploadData(files, [chunk.dataBlock]);

          return;
        } else {
          console.warn('Retried this chunk too often. Giving up.');
        }
      }

      this._errorProcessing(files, response || this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr);
    }
  }, {
    key: "submitRequest",
    value: function submitRequest(xhr, formData, files) {
      xhr.send(formData);
    } // Called internally when processing is finished.
    // Individual callbacks have to be called in the appropriate sections.

  }, {
    key: "_finished",
    value: function _finished(files, responseText, e) {
      var _iterator29 = _createForOfIteratorHelper(files),
          _step29;

      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var file = _step29.value;
          file.status = Dropzone.SUCCESS;
          this.emit("success", file, responseText, e);
          this.emit("complete", file);
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }

      if (this.options.uploadMultiple) {
        this.emit("successmultiple", files, responseText, e);
        this.emit("completemultiple", files);
      }

      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    } // Called internally when processing is finished.
    // Individual callbacks have to be called in the appropriate sections.

  }, {
    key: "_errorProcessing",
    value: function _errorProcessing(files, message, xhr) {
      var _iterator30 = _createForOfIteratorHelper(files),
          _step30;

      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var file = _step30.value;
          file.status = Dropzone.ERROR;
          this.emit("error", file, message, xhr);
          this.emit("complete", file);
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }

      if (this.options.uploadMultiple) {
        this.emit("errormultiple", files, message, xhr);
        this.emit("completemultiple", files);
      }

      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    }
  }], [{
    key: "uuidv4",
    value: function uuidv4() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    }
  }]);

  return Dropzone;
}(Emitter);

Dropzone.initClass();
Dropzone.version = "5.7.2"; // This is a map of options for your different dropzones. Add configurations
// to this object for your different dropzone elemens.
//
// Example:
//
//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };
//
// To disable autoDiscover for a specific element, you can set `false` as an option:
//
//     Dropzone.options.myDisabledElementId = false;
//
// And in html:
//
//     <form action="/upload" id="my-dropzone-element-id" class="dropzone"></form>

Dropzone.options = {}; // Returns the options for an element or undefined if none available.

Dropzone.optionsForElement = function (element) {
  // Get the `Dropzone.options.elementId` for this element if it exists
  if (element.getAttribute("id")) {
    return Dropzone.options[camelize(element.getAttribute("id"))];
  } else {
    return undefined;
  }
}; // Holds a list of all dropzone instances


Dropzone.instances = []; // Returns the dropzone for given element if any

Dropzone.forElement = function (element) {
  if (typeof element === "string") {
    element = document.querySelector(element);
  }

  if ((element != null ? element.dropzone : undefined) == null) {
    throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
  }

  return element.dropzone;
}; // Set to false if you don't want Dropzone to automatically find and attach to .dropzone elements.


Dropzone.autoDiscover = true; // Looks for all .dropzone elements and creates a dropzone for them

Dropzone.discover = function () {
  var dropzones;

  if (document.querySelectorAll) {
    dropzones = document.querySelectorAll(".dropzone");
  } else {
    dropzones = []; // IE :(

    var checkElements = function checkElements(elements) {
      return function () {
        var result = [];

        var _iterator31 = _createForOfIteratorHelper(elements),
            _step31;

        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var el = _step31.value;

            if (/(^| )dropzone($| )/.test(el.className)) {
              result.push(dropzones.push(el));
            } else {
              result.push(undefined);
            }
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }

        return result;
      }();
    };

    checkElements(document.getElementsByTagName("div"));
    checkElements(document.getElementsByTagName("form"));
  }

  return function () {
    var result = [];

    var _iterator32 = _createForOfIteratorHelper(dropzones),
        _step32;

    try {
      for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
        var dropzone = _step32.value;

        // Create a dropzone unless auto discover has been disabled for specific element
        if (Dropzone.optionsForElement(dropzone) !== false) {
          result.push(new Dropzone(dropzone));
        } else {
          result.push(undefined);
        }
      }
    } catch (err) {
      _iterator32.e(err);
    } finally {
      _iterator32.f();
    }

    return result;
  }();
}; // Since the whole Drag'n'Drop API is pretty new, some browsers implement it,
// but not correctly.
// So I created a blacklist of userAgents. Yes, yes. Browser sniffing, I know.
// But what to do when browsers *theoretically* support an API, but crash
// when using it.
//
// This is a list of regular expressions tested against navigator.userAgent
//
// ** It should only be used on browser that *do* support the API, but
// incorrectly **
//


Dropzone.blacklistedBrowsers = [// The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.
/opera.*(Macintosh|Windows Phone).*version\/12/i]; // Checks if the browser is supported

Dropzone.isBrowserSupported = function () {
  var capableBrowser = true;

  if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
    if (!("classList" in document.createElement("a"))) {
      capableBrowser = false;
    } else {
      // The browser supports the API, but may be blacklisted.
      var _iterator33 = _createForOfIteratorHelper(Dropzone.blacklistedBrowsers),
          _step33;

      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var regex = _step33.value;

          if (regex.test(navigator.userAgent)) {
            capableBrowser = false;
            continue;
          }
        }
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }
    }
  } else {
    capableBrowser = false;
  }

  return capableBrowser;
};

Dropzone.dataURItoBlob = function (dataURI) {
  // convert base64 to raw binary data held in a string
  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
  var byteString = atob(dataURI.split(',')[1]); // separate out the mime component

  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to an ArrayBuffer

  var ab = new ArrayBuffer(byteString.length);
  var ia = new Uint8Array(ab);

  for (var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {
    ia[i] = byteString.charCodeAt(i);
  } // write the ArrayBuffer to a blob


  return new Blob([ab], {
    type: mimeString
  });
}; // Returns an array without the rejected item


var without = function without(list, rejectedItem) {
  return list.filter(function (item) {
    return item !== rejectedItem;
  }).map(function (item) {
    return item;
  });
}; // abc-def_ghi -> abcDefGhi


var camelize = function camelize(str) {
  return str.replace(/[\-_](\w)/g, function (match) {
    return match.charAt(1).toUpperCase();
  });
}; // Creates an element from string


Dropzone.createElement = function (string) {
  var div = document.createElement("div");
  div.innerHTML = string;
  return div.childNodes[0];
}; // Tests if given element is inside (or simply is) the container


Dropzone.elementInside = function (element, container) {
  if (element === container) {
    return true;
  } // Coffeescript doesn't support do/while loops


  while (element = element.parentNode) {
    if (element === container) {
      return true;
    }
  }

  return false;
};

Dropzone.getElement = function (el, name) {
  var element;

  if (typeof el === "string") {
    element = document.querySelector(el);
  } else if (el.nodeType != null) {
    element = el;
  }

  if (element == null) {
    throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector or a plain HTML element."));
  }

  return element;
};

Dropzone.getElements = function (els, name) {
  var el, elements;

  if (els instanceof Array) {
    elements = [];

    try {
      var _iterator34 = _createForOfIteratorHelper(els),
          _step34;

      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          el = _step34.value;
          elements.push(this.getElement(el, name));
        }
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }
    } catch (e) {
      elements = null;
    }
  } else if (typeof els === "string") {
    elements = [];

    var _iterator35 = _createForOfIteratorHelper(document.querySelectorAll(els)),
        _step35;

    try {
      for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
        el = _step35.value;
        elements.push(el);
      }
    } catch (err) {
      _iterator35.e(err);
    } finally {
      _iterator35.f();
    }
  } else if (els.nodeType != null) {
    elements = [els];
  }

  if (elements == null || !elements.length) {
    throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."));
  }

  return elements;
}; // Asks the user the question and calls accepted or rejected accordingly
//
// The default implementation just uses `window.confirm` and then calls the
// appropriate callback.


Dropzone.confirm = function (question, accepted, rejected) {
  if (window.confirm(question)) {
    return accepted();
  } else if (rejected != null) {
    return rejected();
  }
}; // Validates the mime type like this:
//
// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept


Dropzone.isValidFile = function (file, acceptedFiles) {
  if (!acceptedFiles) {
    return true;
  } // If there are no accepted mime types, it's OK


  acceptedFiles = acceptedFiles.split(",");
  var mimeType = file.type;
  var baseMimeType = mimeType.replace(/\/.*$/, "");

  var _iterator36 = _createForOfIteratorHelper(acceptedFiles),
      _step36;

  try {
    for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
      var validType = _step36.value;
      validType = validType.trim();

      if (validType.charAt(0) === ".") {
        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
          return true;
        }
      } else if (/\/\*$/.test(validType)) {
        // This is something like a image/* mime type
        if (baseMimeType === validType.replace(/\/.*$/, "")) {
          return true;
        }
      } else {
        if (mimeType === validType) {
          return true;
        }
      }
    }
  } catch (err) {
    _iterator36.e(err);
  } finally {
    _iterator36.f();
  }

  return false;
}; // Augment jQuery


if (typeof jQuery !== 'undefined' && jQuery !== null) {
  jQuery.fn.dropzone = function (options) {
    return this.each(function () {
      return new Dropzone(this, options);
    });
  };
}

if ( true && module !== null) {
  module.exports = Dropzone;
} else {
  window.Dropzone = Dropzone;
} // Dropzone file status codes


Dropzone.ADDED = "added";
Dropzone.QUEUED = "queued"; // For backwards compatibility. Now, if a file is accepted, it's either queued
// or uploading.

Dropzone.ACCEPTED = Dropzone.QUEUED;
Dropzone.UPLOADING = "uploading";
Dropzone.PROCESSING = Dropzone.UPLOADING; // alias

Dropzone.CANCELED = "canceled";
Dropzone.ERROR = "error";
Dropzone.SUCCESS = "success";
/*

 Bugfix for iOS 6 and 7
 Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
 based on the work of https://github.com/stomita/ios-imagefile-megapixel

 */
// Detecting vertical squash in loaded image.
// Fixes a bug which squash image vertically while drawing into canvas for some images.
// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel

var detectVerticalSquash = function detectVerticalSquash(img) {
  var iw = img.naturalWidth;
  var ih = img.naturalHeight;
  var canvas = document.createElement("canvas");
  canvas.width = 1;
  canvas.height = ih;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0);

  var _ctx$getImageData = ctx.getImageData(1, 0, 1, ih),
      data = _ctx$getImageData.data; // search image edge pixel position in case it is squashed vertically.


  var sy = 0;
  var ey = ih;
  var py = ih;

  while (py > sy) {
    var alpha = data[(py - 1) * 4 + 3];

    if (alpha === 0) {
      ey = py;
    } else {
      sy = py;
    }

    py = ey + sy >> 1;
  }

  var ratio = py / ih;

  if (ratio === 0) {
    return 1;
  } else {
    return ratio;
  }
}; // A replacement for context.drawImage
// (args are for source and destination).


var drawImageIOSFix = function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
  var vertSquashRatio = detectVerticalSquash(img);
  return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
}; // Based on MinifyJpeg
// Source: http://www.perry.cz/files/ExifRestorer.js
// http://elicon.blog57.fc2.com/blog-entry-206.html


var ExifRestore = /*#__PURE__*/function () {
  function ExifRestore() {
    _classCallCheck(this, ExifRestore);
  }

  _createClass(ExifRestore, null, [{
    key: "initClass",
    value: function initClass() {
      this.KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    }
  }, {
    key: "encode64",
    value: function encode64(input) {
      var output = '';
      var chr1 = undefined;
      var chr2 = undefined;
      var chr3 = '';
      var enc1 = undefined;
      var enc2 = undefined;
      var enc3 = undefined;
      var enc4 = '';
      var i = 0;

      while (true) {
        chr1 = input[i++];
        chr2 = input[i++];
        chr3 = input[i++];
        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }

        output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);
        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';

        if (!(i < input.length)) {
          break;
        }
      }

      return output;
    }
  }, {
    key: "restore",
    value: function restore(origFileBase64, resizedFileBase64) {
      if (!origFileBase64.match('data:image/jpeg;base64,')) {
        return resizedFileBase64;
      }

      var rawImage = this.decode64(origFileBase64.replace('data:image/jpeg;base64,', ''));
      var segments = this.slice2Segments(rawImage);
      var image = this.exifManipulation(resizedFileBase64, segments);
      return "data:image/jpeg;base64,".concat(this.encode64(image));
    }
  }, {
    key: "exifManipulation",
    value: function exifManipulation(resizedFileBase64, segments) {
      var exifArray = this.getExifArray(segments);
      var newImageArray = this.insertExif(resizedFileBase64, exifArray);
      var aBuffer = new Uint8Array(newImageArray);
      return aBuffer;
    }
  }, {
    key: "getExifArray",
    value: function getExifArray(segments) {
      var seg = undefined;
      var x = 0;

      while (x < segments.length) {
        seg = segments[x];

        if (seg[0] === 255 & seg[1] === 225) {
          return seg;
        }

        x++;
      }

      return [];
    }
  }, {
    key: "insertExif",
    value: function insertExif(resizedFileBase64, exifArray) {
      var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', '');
      var buf = this.decode64(imageData);
      var separatePoint = buf.indexOf(255, 3);
      var mae = buf.slice(0, separatePoint);
      var ato = buf.slice(separatePoint);
      var array = mae;
      array = array.concat(exifArray);
      array = array.concat(ato);
      return array;
    }
  }, {
    key: "slice2Segments",
    value: function slice2Segments(rawImageArray) {
      var head = 0;
      var segments = [];

      while (true) {
        var length;

        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {
          break;
        }

        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {
          head += 2;
        } else {
          length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];
          var endPoint = head + length + 2;
          var seg = rawImageArray.slice(head, endPoint);
          segments.push(seg);
          head = endPoint;
        }

        if (head > rawImageArray.length) {
          break;
        }
      }

      return segments;
    }
  }, {
    key: "decode64",
    value: function decode64(input) {
      var output = '';
      var chr1 = undefined;
      var chr2 = undefined;
      var chr3 = '';
      var enc1 = undefined;
      var enc2 = undefined;
      var enc3 = undefined;
      var enc4 = '';
      var i = 0;
      var buf = []; // remove all characters that are not A-Z, a-z, 0-9, +, /, or =

      var base64test = /[^A-Za-z0-9\+\/\=]/g;

      if (base64test.exec(input)) {
        console.warn('There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, \'+\', \'/\',and \'=\'\nExpect errors in decoding.');
      }

      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

      while (true) {
        enc1 = this.KEY_STR.indexOf(input.charAt(i++));
        enc2 = this.KEY_STR.indexOf(input.charAt(i++));
        enc3 = this.KEY_STR.indexOf(input.charAt(i++));
        enc4 = this.KEY_STR.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        buf.push(chr1);

        if (enc3 !== 64) {
          buf.push(chr2);
        }

        if (enc4 !== 64) {
          buf.push(chr3);
        }

        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';

        if (!(i < input.length)) {
          break;
        }
      }

      return buf;
    }
  }]);

  return ExifRestore;
}();

ExifRestore.initClass();
/*
 * contentloaded.js
 *
 * Author: Diego Perini (diego.perini at gmail.com)
 * Summary: cross-browser wrapper for DOMContentLoaded
 * Updated: 20101020
 * License: MIT
 * Version: 1.2
 *
 * URL:
 * http://javascript.nwbox.com/ContentLoaded/
 * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
 */
// @win window reference
// @fn function reference

var contentLoaded = function contentLoaded(win, fn) {
  var done = false;
  var top = true;
  var doc = win.document;
  var root = doc.documentElement;
  var add = doc.addEventListener ? "addEventListener" : "attachEvent";
  var rem = doc.addEventListener ? "removeEventListener" : "detachEvent";
  var pre = doc.addEventListener ? "" : "on";

  var init = function init(e) {
    if (e.type === "readystatechange" && doc.readyState !== "complete") {
      return;
    }

    (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);

    if (!done && (done = true)) {
      return fn.call(win, e.type || e);
    }
  };

  var poll = function poll() {
    try {
      root.doScroll("left");
    } catch (e) {
      setTimeout(poll, 50);
      return;
    }

    return init("poll");
  };

  if (doc.readyState !== "complete") {
    if (doc.createEventObject && root.doScroll) {
      try {
        top = !win.frameElement;
      } catch (error) {}

      if (top) {
        poll();
      }
    }

    doc[add](pre + "DOMContentLoaded", init, false);
    doc[add](pre + "readystatechange", init, false);
    return win[add](pre + "load", init, false);
  }
}; // As a single function to be able to write tests.


Dropzone._autoDiscoverFunction = function () {
  if (Dropzone.autoDiscover) {
    return Dropzone.discover();
  }
};

contentLoaded(window, Dropzone._autoDiscoverFunction);

function __guard__(value, transform) {
  return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;
}

function __guardMethod__(obj, methodName, transform) {
  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {
    return transform(obj, methodName);
  } else {
    return undefined;
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/localforage/dist/localforage.js":
/*!******************************************************!*\
  !*** ./node_modules/localforage/dist/localforage.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/*!
    localForage -- Offline Storage, Improved
    Version 1.9.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(_dereq_,module,exports){
'use strict';
var immediate = _dereq_(1);

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

Promise.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

Promise.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

Promise.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

Promise.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"1":1}],3:[function(_dereq_,module,exports){
(function (global){
'use strict';
if (typeof global.Promise !== 'function') {
  global.Promise = _dereq_(2);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"2":2}],4:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getIDB() {
    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
    try {
        if (typeof indexedDB !== 'undefined') {
            return indexedDB;
        }
        if (typeof webkitIndexedDB !== 'undefined') {
            return webkitIndexedDB;
        }
        if (typeof mozIndexedDB !== 'undefined') {
            return mozIndexedDB;
        }
        if (typeof OIndexedDB !== 'undefined') {
            return OIndexedDB;
        }
        if (typeof msIndexedDB !== 'undefined') {
            return msIndexedDB;
        }
    } catch (e) {
        return;
    }
}

var idb = getIDB();

function isIndexedDBValid() {
    try {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        if (!idb || !idb.open) {
            return false;
        }
        // We mimic PouchDB here;
        //
        // We test for openDatabase because IE Mobile identifies itself
        // as Safari. Oh the lulz...
        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

        // Safari <10.1 does not meet our requirements for IDB support
        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
        // Safari 10.1 shipped with fetch, we can use that to detect it.
        // Note: this creates issues with `window.fetch` polyfills and
        // overrides; see:
        // https://github.com/localForage/localForage/issues/856
        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
        // some outdated implementations of IDB that appear on Samsung
        // and HTC Android devices <4.4 are missing IDBKeyRange
        // See: https://github.com/mozilla/localForage/issues/128
        // See: https://github.com/mozilla/localForage/issues/272
        typeof IDBKeyRange !== 'undefined';
    } catch (e) {
        return false;
    }
}

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
function createBlob(parts, properties) {
    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
    parts = parts || [];
    properties = properties || {};
    try {
        return new Blob(parts, properties);
    } catch (e) {
        if (e.name !== 'TypeError') {
            throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
            builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
    }
}

// This is CommonJS because lie is an external dependency, so Rollup
// can just ignore it.
if (typeof Promise === 'undefined') {
    // In the "nopromises" build this will just throw if you don't have
    // a global promise object, but it would throw anyway later.
    _dereq_(3);
}
var Promise$1 = Promise;

function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
}

function executeTwoCallbacks(promise, callback, errorCallback) {
    if (typeof callback === 'function') {
        promise.then(callback);
    }

    if (typeof errorCallback === 'function') {
        promise["catch"](errorCallback);
    }
}

function normalizeKey(key) {
    // Cast the key to a string, as that's all we can set as a key.
    if (typeof key !== 'string') {
        console.warn(key + ' used as a key, but it is not a string.');
        key = String(key);
    }

    return key;
}

function getCallback() {
    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
        return arguments[arguments.length - 1];
    }
}

// Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).

var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
var supportsBlobs = void 0;
var dbContexts = {};
var toString = Object.prototype.toString;

// Transaction Modes
var READ_ONLY = 'readonly';
var READ_WRITE = 'readwrite';

// Transform a binary string to an array buffer, because otherwise
// weird stuff happens when you try to work with the binary string directly.
// It is known.
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function _binStringToArrayBuffer(bin) {
    var length = bin.length;
    var buf = new ArrayBuffer(length);
    var arr = new Uint8Array(buf);
    for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
    }
    return buf;
}

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
// Code borrowed from PouchDB. See:
// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
//
function _checkBlobSupportWithoutCaching(idb) {
    return new Promise$1(function (resolve) {
        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
        var blob = createBlob(['']);
        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

        txn.onabort = function (e) {
            // If the transaction aborts now its due to not being able to
            // write to the database, likely due to the disk being full
            e.preventDefault();
            e.stopPropagation();
            resolve(false);
        };

        txn.oncomplete = function () {
            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
            var matchedEdge = navigator.userAgent.match(/Edge\//);
            // MS Edge pretends to be Chrome 42:
            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
        };
    })["catch"](function () {
        return false; // error, so assume unsupported
    });
}

function _checkBlobSupport(idb) {
    if (typeof supportsBlobs === 'boolean') {
        return Promise$1.resolve(supportsBlobs);
    }
    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
        supportsBlobs = value;
        return supportsBlobs;
    });
}

function _deferReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Create a deferred object representing the current database operation.
    var deferredOperation = {};

    deferredOperation.promise = new Promise$1(function (resolve, reject) {
        deferredOperation.resolve = resolve;
        deferredOperation.reject = reject;
    });

    // Enqueue the deferred operation.
    dbContext.deferredOperations.push(deferredOperation);

    // Chain its promise to the database readiness.
    if (!dbContext.dbReady) {
        dbContext.dbReady = deferredOperation.promise;
    } else {
        dbContext.dbReady = dbContext.dbReady.then(function () {
            return deferredOperation.promise;
        });
    }
}

function _advanceReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Resolve its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.resolve();
        return deferredOperation.promise;
    }
}

function _rejectReadiness(dbInfo, err) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Reject its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.reject(err);
        return deferredOperation.promise;
    }
}

function _getConnection(dbInfo, upgradeNeeded) {
    return new Promise$1(function (resolve, reject) {
        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

        if (dbInfo.db) {
            if (upgradeNeeded) {
                _deferReadiness(dbInfo);
                dbInfo.db.close();
            } else {
                return resolve(dbInfo.db);
            }
        }

        var dbArgs = [dbInfo.name];

        if (upgradeNeeded) {
            dbArgs.push(dbInfo.version);
        }

        var openreq = idb.open.apply(idb, dbArgs);

        if (upgradeNeeded) {
            openreq.onupgradeneeded = function (e) {
                var db = openreq.result;
                try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e.oldVersion <= 1) {
                        // Added when support for blob shims was added
                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                } catch (ex) {
                    if (ex.name === 'ConstraintError') {
                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                        throw ex;
                    }
                }
            };
        }

        openreq.onerror = function (e) {
            e.preventDefault();
            reject(openreq.error);
        };

        openreq.onsuccess = function () {
            resolve(openreq.result);
            _advanceReadiness(dbInfo);
        };
    });
}

function _getOriginalConnection(dbInfo) {
    return _getConnection(dbInfo, false);
}

function _getUpgradedConnection(dbInfo) {
    return _getConnection(dbInfo, true);
}

function _isUpgradeNeeded(dbInfo, defaultVersion) {
    if (!dbInfo.db) {
        return true;
    }

    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
    var isDowngrade = dbInfo.version < dbInfo.db.version;
    var isUpgrade = dbInfo.version > dbInfo.db.version;

    if (isDowngrade) {
        // If the version is not the default one
        // then warn for impossible downgrade.
        if (dbInfo.version !== defaultVersion) {
            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
        }
        // Align the versions to prevent errors.
        dbInfo.version = dbInfo.db.version;
    }

    if (isUpgrade || isNewStore) {
        // If the store is new then increment the version (if needed).
        // This will trigger an "upgradeneeded" event which is required
        // for creating a store.
        if (isNewStore) {
            var incVersion = dbInfo.db.version + 1;
            if (incVersion > dbInfo.version) {
                dbInfo.version = incVersion;
            }
        }

        return true;
    }

    return false;
}

// encode a blob for indexeddb engines that don't support blobs
function _encodeBlob(blob) {
    return new Promise$1(function (resolve, reject) {
        var reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = function (e) {
            var base64 = btoa(e.target.result || '');
            resolve({
                __local_forage_encoded_blob: true,
                data: base64,
                type: blob.type
            });
        };
        reader.readAsBinaryString(blob);
    });
}

// decode an encoded blob
function _decodeBlob(encodedBlob) {
    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
    return createBlob([arrayBuff], { type: encodedBlob.type });
}

// is this one of our fancy encoded blobs?
function _isEncodedBlob(value) {
    return value && value.__local_forage_encoded_blob;
}

// Specialize the default `ready()` function by making it dependent
// on the current database operations. Thus, the driver will be actually
// ready when it's been initialized (default) *and* there are no pending
// operations on the database (initiated by some other instances).
function _fullyReady(callback) {
    var self = this;

    var promise = self._initReady().then(function () {
        var dbContext = dbContexts[self._dbInfo.name];

        if (dbContext && dbContext.dbReady) {
            return dbContext.dbReady;
        }
    });

    executeTwoCallbacks(promise, callback, callback);
    return promise;
}

// Try to establish a new db connection to replace the
// current one which is broken (i.e. experiencing
// InvalidStateError while creating a transaction).
function _tryReconnect(dbInfo) {
    _deferReadiness(dbInfo);

    var dbContext = dbContexts[dbInfo.name];
    var forages = dbContext.forages;

    for (var i = 0; i < forages.length; i++) {
        var forage = forages[i];
        if (forage._dbInfo.db) {
            forage._dbInfo.db.close();
            forage._dbInfo.db = null;
        }
    }
    dbInfo.db = null;

    return _getOriginalConnection(dbInfo).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        // store the latest db reference
        // in case the db was upgraded
        dbInfo.db = dbContext.db = db;
        for (var i = 0; i < forages.length; i++) {
            forages[i]._dbInfo.db = db;
        }
    })["catch"](function (err) {
        _rejectReadiness(dbInfo, err);
        throw err;
    });
}

// FF doesn't like Promises (micro-tasks) and IDDB store operations,
// so we have to do it with callbacks
function createTransaction(dbInfo, mode, callback, retries) {
    if (retries === undefined) {
        retries = 1;
    }

    try {
        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
        callback(null, tx);
    } catch (err) {
        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
            return Promise$1.resolve().then(function () {
                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                    // increase the db version, to create the new ObjectStore
                    if (dbInfo.db) {
                        dbInfo.version = dbInfo.db.version + 1;
                    }
                    // Reopen the database for upgrading.
                    return _getUpgradedConnection(dbInfo);
                }
            }).then(function () {
                return _tryReconnect(dbInfo).then(function () {
                    createTransaction(dbInfo, mode, callback, retries - 1);
                });
            })["catch"](callback);
        }

        callback(err);
    }
}

function createDbContext() {
    return {
        // Running localForages sharing a database.
        forages: [],
        // Shared database.
        db: null,
        // Database readiness (promise).
        dbReady: null,
        // Deferred operations on the database.
        deferredOperations: []
    };
}

// Open the IndexedDB database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    // Get the current context of the database;
    var dbContext = dbContexts[dbInfo.name];

    // ...or create a new context.
    if (!dbContext) {
        dbContext = createDbContext();
        // Register the new context in the global container.
        dbContexts[dbInfo.name] = dbContext;
    }

    // Register itself as a running localForage in the current context.
    dbContext.forages.push(self);

    // Replace the default `ready()` function with the specialized one.
    if (!self._initReady) {
        self._initReady = self.ready;
        self.ready = _fullyReady;
    }

    // Create an array of initialization states of the related localForages.
    var initPromises = [];

    function ignoreErrors() {
        // Don't handle errors here,
        // just makes sure related localForages aren't pending.
        return Promise$1.resolve();
    }

    for (var j = 0; j < dbContext.forages.length; j++) {
        var forage = dbContext.forages[j];
        if (forage !== self) {
            // Don't wait for itself...
            initPromises.push(forage._initReady()["catch"](ignoreErrors));
        }
    }

    // Take a snapshot of the related localForages.
    var forages = dbContext.forages.slice(0);

    // Initialize the connection process only when
    // all the related localForages aren't pending.
    return Promise$1.all(initPromises).then(function () {
        dbInfo.db = dbContext.db;
        // Get the connection or open a new one without upgrade.
        return _getOriginalConnection(dbInfo);
    }).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        dbInfo.db = dbContext.db = db;
        self._dbInfo = dbInfo;
        // Share the final connection amongst related localForages.
        for (var k = 0; k < forages.length; k++) {
            var forage = forages[k];
            if (forage !== self) {
                // Self is already up-to-date.
                forage._dbInfo.db = dbInfo.db;
                forage._dbInfo.version = dbInfo.version;
            }
        }
    });
}

function getItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.get(key);

                    req.onsuccess = function () {
                        var value = req.result;
                        if (value === undefined) {
                            value = null;
                        }
                        if (_isEncodedBlob(value)) {
                            value = _decodeBlob(value);
                        }
                        resolve(value);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items stored in database.
function iterate(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (cursor) {
                            var value = cursor.value;
                            if (_isEncodedBlob(value)) {
                                value = _decodeBlob(value);
                            }
                            var result = iterator(value, cursor.key, iterationNumber++);

                            // when the iterator callback returns any
                            // (non-`undefined`) value, then we stop
                            // the iteration immediately
                            if (result !== void 0) {
                                resolve(result);
                            } else {
                                cursor["continue"]();
                            }
                        } else {
                            resolve();
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);

    return promise;
}

function setItem(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        var dbInfo;
        self.ready().then(function () {
            dbInfo = self._dbInfo;
            if (toString.call(value) === '[object Blob]') {
                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
                    if (blobSupport) {
                        return value;
                    }
                    return _encodeBlob(value);
                });
            }
            return value;
        }).then(function (value) {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);

                    // The reason we don't _save_ null is because IE 10 does
                    // not support saving the `null` type in IndexedDB. How
                    // ironic, given the bug below!
                    // See: https://github.com/mozilla/localForage/issues/161
                    if (value === null) {
                        value = undefined;
                    }

                    var req = store.put(value, key);

                    transaction.oncomplete = function () {
                        // Cast to undefined so the value passed to
                        // callback/promise is the same as what one would get out
                        // of `getItem()` later. This leads to some weirdness
                        // (setItem('foo', undefined) will return `null`), but
                        // it's not my fault localStorage is our baseline and that
                        // it's weird.
                        if (value === undefined) {
                            value = null;
                        }

                        resolve(value);
                    };
                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function removeItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    // We use a Grunt task to make this safe for IE and some
                    // versions of Android (including those used by Cordova).
                    // Normally IE won't like `.delete()` and will insist on
                    // using `['delete']()`, but we have a build step that
                    // fixes this for us now.
                    var req = store["delete"](key);
                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onerror = function () {
                        reject(req.error);
                    };

                    // The request will be also be aborted if we've exceeded our storage
                    // space.
                    transaction.onabort = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function clear(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.clear();

                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function length(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.count();

                    req.onsuccess = function () {
                        resolve(req.result);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function key(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        if (n < 0) {
            resolve(null);

            return;
        }

        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openKeyCursor();

                    req.onsuccess = function () {
                        var cursor = req.result;
                        if (!cursor) {
                            // this means there weren't enough keys
                            resolve(null);

                            return;
                        }

                        if (n === 0) {
                            // We have the first key, return it if that's what they
                            // wanted.
                            resolve(cursor.key);
                        } else {
                            if (!advanced) {
                                // Otherwise, ask the cursor to skip ahead n
                                // records.
                                advanced = true;
                                cursor.advance(n);
                            } else {
                                // When we get here, we've got the nth key.
                                resolve(cursor.key);
                            }
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openKeyCursor();
                    var keys = [];

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (!cursor) {
                            resolve(keys);
                            return;
                        }

                        keys.push(cursor.key);
                        cursor["continue"]();
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
            var dbContext = dbContexts[options.name];
            var forages = dbContext.forages;
            dbContext.db = db;
            for (var i = 0; i < forages.length; i++) {
                forages[i]._dbInfo.db = db;
            }
            return db;
        });

        if (!options.storeName) {
            promise = dbPromise.then(function (db) {
                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                }

                var dropDBPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.deleteDatabase(options.name);

                    req.onerror = req.onblocked = function (err) {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        reject(err);
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        resolve(db);
                    };
                });

                return dropDBPromise.then(function (db) {
                    dbContext.db = db;
                    for (var i = 0; i < forages.length; i++) {
                        var _forage = forages[i];
                        _advanceReadiness(_forage._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        } else {
            promise = dbPromise.then(function (db) {
                if (!db.objectStoreNames.contains(options.storeName)) {
                    return;
                }

                var newVersion = db.version + 1;

                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                    forage._dbInfo.version = newVersion;
                }

                var dropObjectPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.open(options.name, newVersion);

                    req.onerror = function (err) {
                        var db = req.result;
                        db.close();
                        reject(err);
                    };

                    req.onupgradeneeded = function () {
                        var db = req.result;
                        db.deleteObjectStore(options.storeName);
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        db.close();
                        resolve(db);
                    };
                });

                return dropObjectPromise.then(function (db) {
                    dbContext.db = db;
                    for (var j = 0; j < forages.length; j++) {
                        var _forage2 = forages[j];
                        _forage2._dbInfo.db = db;
                        _advanceReadiness(_forage2._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        }
    }

    executeCallback(promise, callback);
    return promise;
}

var asyncStorage = {
    _driver: 'asyncStorage',
    _initStorage: _initStorage,
    _support: isIndexedDBValid(),
    iterate: iterate,
    getItem: getItem,
    setItem: setItem,
    removeItem: removeItem,
    clear: clear,
    length: length,
    key: key,
    keys: keys,
    dropInstance: dropInstance
};

function isWebSQLValid() {
    return typeof openDatabase === 'function';
}

// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
// it to Base64, so this is how we store it to prevent very strange errors with less
// verbose ways of binary <-> string data storage.
var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

var BLOB_TYPE_PREFIX = '~~local_forage_type~';
var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

var SERIALIZED_MARKER = '__lfsc__:';
var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

// OMG the serializations!
var TYPE_ARRAYBUFFER = 'arbf';
var TYPE_BLOB = 'blob';
var TYPE_INT8ARRAY = 'si08';
var TYPE_UINT8ARRAY = 'ui08';
var TYPE_UINT8CLAMPEDARRAY = 'uic8';
var TYPE_INT16ARRAY = 'si16';
var TYPE_INT32ARRAY = 'si32';
var TYPE_UINT16ARRAY = 'ur16';
var TYPE_UINT32ARRAY = 'ui32';
var TYPE_FLOAT32ARRAY = 'fl32';
var TYPE_FLOAT64ARRAY = 'fl64';
var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

var toString$1 = Object.prototype.toString;

function stringToBuffer(serializedString) {
    // Fill the string into a ArrayBuffer.
    var bufferLength = serializedString.length * 0.75;
    var len = serializedString.length;
    var i;
    var p = 0;
    var encoded1, encoded2, encoded3, encoded4;

    if (serializedString[serializedString.length - 1] === '=') {
        bufferLength--;
        if (serializedString[serializedString.length - 2] === '=') {
            bufferLength--;
        }
    }

    var buffer = new ArrayBuffer(bufferLength);
    var bytes = new Uint8Array(buffer);

    for (i = 0; i < len; i += 4) {
        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

        /*jslint bitwise: true */
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return buffer;
}

// Converts a buffer to a string to store, serialized, in the backend
// storage library.
function bufferToString(buffer) {
    // base64-arraybuffer
    var bytes = new Uint8Array(buffer);
    var base64String = '';
    var i;

    for (i = 0; i < bytes.length; i += 3) {
        /*jslint bitwise: true */
        base64String += BASE_CHARS[bytes[i] >> 2];
        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64String += BASE_CHARS[bytes[i + 2] & 63];
    }

    if (bytes.length % 3 === 2) {
        base64String = base64String.substring(0, base64String.length - 1) + '=';
    } else if (bytes.length % 3 === 1) {
        base64String = base64String.substring(0, base64String.length - 2) + '==';
    }

    return base64String;
}

// Serialize a value, afterwards executing a callback (which usually
// instructs the `setItem()` callback/promise to be executed). This is how
// we store binary data with localStorage.
function serialize(value, callback) {
    var valueType = '';
    if (value) {
        valueType = toString$1.call(value);
    }

    // Cannot use `value instanceof ArrayBuffer` or such here, as these
    // checks fail when running the tests using casper.js...
    //
    // TODO: See why those tests fail and use a better solution.
    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
        // Convert binary arrays to a string and prefix the string with
        // a special marker.
        var buffer;
        var marker = SERIALIZED_MARKER;

        if (value instanceof ArrayBuffer) {
            buffer = value;
            marker += TYPE_ARRAYBUFFER;
        } else {
            buffer = value.buffer;

            if (valueType === '[object Int8Array]') {
                marker += TYPE_INT8ARRAY;
            } else if (valueType === '[object Uint8Array]') {
                marker += TYPE_UINT8ARRAY;
            } else if (valueType === '[object Uint8ClampedArray]') {
                marker += TYPE_UINT8CLAMPEDARRAY;
            } else if (valueType === '[object Int16Array]') {
                marker += TYPE_INT16ARRAY;
            } else if (valueType === '[object Uint16Array]') {
                marker += TYPE_UINT16ARRAY;
            } else if (valueType === '[object Int32Array]') {
                marker += TYPE_INT32ARRAY;
            } else if (valueType === '[object Uint32Array]') {
                marker += TYPE_UINT32ARRAY;
            } else if (valueType === '[object Float32Array]') {
                marker += TYPE_FLOAT32ARRAY;
            } else if (valueType === '[object Float64Array]') {
                marker += TYPE_FLOAT64ARRAY;
            } else {
                callback(new Error('Failed to get type for BinaryArray'));
            }
        }

        callback(marker + bufferToString(buffer));
    } else if (valueType === '[object Blob]') {
        // Conver the blob to a binaryArray and then to a string.
        var fileReader = new FileReader();

        fileReader.onload = function () {
            // Backwards-compatible prefix for the blob type.
            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
        };

        fileReader.readAsArrayBuffer(value);
    } else {
        try {
            callback(JSON.stringify(value));
        } catch (e) {
            console.error("Couldn't convert value into a JSON string: ", value);

            callback(null, e);
        }
    }
}

// Deserialize data we've inserted into a value column/field. We place
// special markers into our strings to mark them as encoded; this isn't
// as nice as a meta field, but it's the only sane thing we can do whilst
// keeping localStorage support intact.
//
// Oftentimes this will just deserialize JSON content, but if we have a
// special marker (SERIALIZED_MARKER, defined above), we will extract
// some kind of arraybuffer/binary data/typed array out of the string.
function deserialize(value) {
    // If we haven't marked this string as being specially serialized (i.e.
    // something other than serialized JSON), we can just return it and be
    // done with it.
    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
        return JSON.parse(value);
    }

    // The following code deals with deserializing some kind of Blob or
    // TypedArray. First we separate out the type of data we're dealing
    // with from the data itself.
    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

    var blobType;
    // Backwards-compatible blob type serialization strategy.
    // DBs created with older versions of localForage will simply not have the blob type.
    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
        blobType = matcher[1];
        serializedString = serializedString.substring(matcher[0].length);
    }
    var buffer = stringToBuffer(serializedString);

    // Return the right type based on the code/type set during
    // serialization.
    switch (type) {
        case TYPE_ARRAYBUFFER:
            return buffer;
        case TYPE_BLOB:
            return createBlob([buffer], { type: blobType });
        case TYPE_INT8ARRAY:
            return new Int8Array(buffer);
        case TYPE_UINT8ARRAY:
            return new Uint8Array(buffer);
        case TYPE_UINT8CLAMPEDARRAY:
            return new Uint8ClampedArray(buffer);
        case TYPE_INT16ARRAY:
            return new Int16Array(buffer);
        case TYPE_UINT16ARRAY:
            return new Uint16Array(buffer);
        case TYPE_INT32ARRAY:
            return new Int32Array(buffer);
        case TYPE_UINT32ARRAY:
            return new Uint32Array(buffer);
        case TYPE_FLOAT32ARRAY:
            return new Float32Array(buffer);
        case TYPE_FLOAT64ARRAY:
            return new Float64Array(buffer);
        default:
            throw new Error('Unkown type: ' + type);
    }
}

var localforageSerializer = {
    serialize: serialize,
    deserialize: deserialize,
    stringToBuffer: stringToBuffer,
    bufferToString: bufferToString
};

/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

function createDbTable(t, dbInfo, callback, errorCallback) {
    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
}

// Open the WebSQL database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage$1(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
        }
    }

    var dbInfoPromise = new Promise$1(function (resolve, reject) {
        // Open the database; the openDatabase API will automatically
        // create it for us if it doesn't exist.
        try {
            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
        } catch (e) {
            return reject(e);
        }

        // Create our key/value table if it doesn't exist.
        dbInfo.db.transaction(function (t) {
            createDbTable(t, dbInfo, function () {
                self._dbInfo = dbInfo;
                resolve();
            }, function (t, error) {
                reject(error);
            });
        }, reject);
    });

    dbInfo.serializer = localforageSerializer;
    return dbInfoPromise;
}

function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
    t.executeSql(sqlStatement, args, callback, function (t, error) {
        if (error.code === error.SYNTAX_ERR) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
                if (!results.rows.length) {
                    // if the table is missing (was deleted)
                    // re-create it table and retry
                    createDbTable(t, dbInfo, function () {
                        t.executeSql(sqlStatement, args, callback, errorCallback);
                    }, errorCallback);
                } else {
                    errorCallback(t, error);
                }
            }, errorCallback);
        } else {
            errorCallback(t, error);
        }
    }, errorCallback);
}

function getItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;

                    // Check to see if this is serialized content we need to
                    // unpack.
                    if (result) {
                        result = dbInfo.serializer.deserialize(result);
                    }

                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function iterate$1(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;

            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
                    var rows = results.rows;
                    var length = rows.length;

                    for (var i = 0; i < length; i++) {
                        var item = rows.item(i);
                        var result = item.value;

                        // Check to see if this is serialized content
                        // we need to unpack.
                        if (result) {
                            result = dbInfo.serializer.deserialize(result);
                        }

                        result = iterator(result, item.key, i + 1);

                        // void(0) prevents problems with redefinition
                        // of `undefined`.
                        if (result !== void 0) {
                            resolve(result);
                            return;
                        }
                    }

                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function _setItem(key, value, callback, retriesLeft) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            // The localStorage API doesn't return undefined values in an
            // "expected" way, so undefined is always cast to null in all
            // drivers. See: https://github.com/mozilla/localForage/pull/42
            if (value === undefined) {
                value = null;
            }

            // Save the original value to pass to the callback.
            var originalValue = value;

            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    dbInfo.db.transaction(function (t) {
                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
                            resolve(originalValue);
                        }, function (t, error) {
                            reject(error);
                        });
                    }, function (sqlError) {
                        // The transaction failed; check
                        // to see if it's a quota error.
                        if (sqlError.code === sqlError.QUOTA_ERR) {
                            // We reject the callback outright for now, but
                            // it's worth trying to re-run the transaction.
                            // Even if the user accepts the prompt to use
                            // more storage on Safari, this error will
                            // be called.
                            //
                            // Try to re-run the transaction.
                            if (retriesLeft > 0) {
                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                                return;
                            }
                            reject(sqlError);
                        }
                    });
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function setItem$1(key, value, callback) {
    return _setItem.apply(this, [key, value, callback, 1]);
}

function removeItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Deletes every item in the table.
// TODO: Find out if this resets the AUTO_INCREMENT number.
function clear$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Does a simple `COUNT(key)` to get the number of items stored in
// localForage.
function length$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                // Ahhh, SQL makes this one soooooo easy.
                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
                    var result = results.rows.item(0).c;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Return the key located at key index X; essentially gets the key from a
// `WHERE id = ?`. This is the most efficient way I can think to implement
// this rarely-used (in my experience) part of the API, but it can seem
// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
// the ID of each key will change every time it's updated. Perhaps a stored
// procedure for the `setItem()` SQL would solve this problem?
// TODO: Don't change ID on `setItem()`.
function key$1(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
                    var keys = [];

                    for (var i = 0; i < results.rows.length; i++) {
                        keys.push(results.rows.item(i).key);
                    }

                    resolve(keys);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// https://www.w3.org/TR/webdatabase/#databases
// > There is no way to enumerate or delete the databases available for an origin from this API.
function getAllStoreNames(db) {
    return new Promise$1(function (resolve, reject) {
        db.transaction(function (t) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
                var storeNames = [];

                for (var i = 0; i < results.rows.length; i++) {
                    storeNames.push(results.rows.item(i).name);
                }

                resolve({
                    db: db,
                    storeNames: storeNames
                });
            }, function (t, error) {
                reject(error);
            });
        }, function (sqlError) {
            reject(sqlError);
        });
    });
}

function dropInstance$1(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            var db;
            if (options.name === currentConfig.name) {
                // use the db reference of the current instance
                db = self._dbInfo.db;
            } else {
                db = openDatabase(options.name, '', '', 0);
            }

            if (!options.storeName) {
                // drop all database tables
                resolve(getAllStoreNames(db));
            } else {
                resolve({
                    db: db,
                    storeNames: [options.storeName]
                });
            }
        }).then(function (operationInfo) {
            return new Promise$1(function (resolve, reject) {
                operationInfo.db.transaction(function (t) {
                    function dropTable(storeName) {
                        return new Promise$1(function (resolve, reject) {
                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
                                resolve();
                            }, function (t, error) {
                                reject(error);
                            });
                        });
                    }

                    var operations = [];
                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                        operations.push(dropTable(operationInfo.storeNames[i]));
                    }

                    Promise$1.all(operations).then(function () {
                        resolve();
                    })["catch"](function (e) {
                        reject(e);
                    });
                }, function (sqlError) {
                    reject(sqlError);
                });
            });
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var webSQLStorage = {
    _driver: 'webSQLStorage',
    _initStorage: _initStorage$1,
    _support: isWebSQLValid(),
    iterate: iterate$1,
    getItem: getItem$1,
    setItem: setItem$1,
    removeItem: removeItem$1,
    clear: clear$1,
    length: length$1,
    key: key$1,
    keys: keys$1,
    dropInstance: dropInstance$1
};

function isLocalStorageValid() {
    try {
        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
        // in IE8 typeof localStorage.setItem === 'object'
        !!localStorage.setItem;
    } catch (e) {
        return false;
    }
}

function _getKeyPrefix(options, defaultConfig) {
    var keyPrefix = options.name + '/';

    if (options.storeName !== defaultConfig.storeName) {
        keyPrefix += options.storeName + '/';
    }
    return keyPrefix;
}

// Check if localStorage throws when saving an item
function checkIfLocalStorageThrows() {
    var localStorageTestKey = '_localforage_support_test';

    try {
        localStorage.setItem(localStorageTestKey, true);
        localStorage.removeItem(localStorageTestKey);

        return false;
    } catch (e) {
        return true;
    }
}

// Check if localStorage is usable and allows to save an item
// This method checks if localStorage is usable in Safari Private Browsing
// mode, or in any other case where the available quota for localStorage
// is 0 and there wasn't any saved items yet.
function _isLocalStorageUsable() {
    return !checkIfLocalStorageThrows() || localStorage.length > 0;
}

// Config the localStorage backend, using options set in the config.
function _initStorage$2(options) {
    var self = this;
    var dbInfo = {};
    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

    if (!_isLocalStorageUsable()) {
        return Promise$1.reject();
    }

    self._dbInfo = dbInfo;
    dbInfo.serializer = localforageSerializer;

    return Promise$1.resolve();
}

// Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!
function clear$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var keyPrefix = self._dbInfo.keyPrefix;

        for (var i = localStorage.length - 1; i >= 0; i--) {
            var key = localStorage.key(i);

            if (key.indexOf(keyPrefix) === 0) {
                localStorage.removeItem(key);
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.
function getItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result = localStorage.getItem(dbInfo.keyPrefix + key);

        // If a result was found, parse it from the serialized
        // string into a JS object. If result isn't truthy, the key
        // is likely undefined and we'll pass it straight to the
        // callback.
        if (result) {
            result = dbInfo.serializer.deserialize(result);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items in the store.
function iterate$2(iterator, callback) {
    var self = this;

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var keyPrefix = dbInfo.keyPrefix;
        var keyPrefixLength = keyPrefix.length;
        var length = localStorage.length;

        // We use a dedicated iterator instead of the `i` variable below
        // so other keys we fetch in localStorage aren't counted in
        // the `iterationNumber` argument passed to the `iterate()`
        // callback.
        //
        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
        var iterationNumber = 1;

        for (var i = 0; i < length; i++) {
            var key = localStorage.key(i);
            if (key.indexOf(keyPrefix) !== 0) {
                continue;
            }
            var value = localStorage.getItem(key);

            // If a result was found, parse it from the serialized
            // string into a JS object. If result isn't truthy, the
            // key is likely undefined and we'll pass it straight
            // to the iterator.
            if (value) {
                value = dbInfo.serializer.deserialize(value);
            }

            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

            if (value !== void 0) {
                return value;
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Same as localStorage's key() method, except takes a callback.
function key$2(n, callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result;
        try {
            result = localStorage.key(n);
        } catch (error) {
            result = null;
        }

        // Remove the prefix from the key, if a key is found.
        if (result) {
            result = result.substring(dbInfo.keyPrefix.length);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var length = localStorage.length;
        var keys = [];

        for (var i = 0; i < length; i++) {
            var itemKey = localStorage.key(i);
            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
            }
        }

        return keys;
    });

    executeCallback(promise, callback);
    return promise;
}

// Supply the number of keys in the datastore to the callback function.
function length$2(callback) {
    var self = this;
    var promise = self.keys().then(function (keys) {
        return keys.length;
    });

    executeCallback(promise, callback);
    return promise;
}

// Remove an item from the store, nice and simple.
function removeItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        localStorage.removeItem(dbInfo.keyPrefix + key);
    });

    executeCallback(promise, callback);
    return promise;
}

// Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.
function setItem$2(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        // Convert undefined values to null.
        // https://github.com/mozilla/localForage/pull/42
        if (value === undefined) {
            value = null;
        }

        // Save the original value to pass to the callback.
        var originalValue = value;

        return new Promise$1(function (resolve, reject) {
            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    try {
                        localStorage.setItem(dbInfo.keyPrefix + key, value);
                        resolve(originalValue);
                    } catch (e) {
                        // localStorage capacity exceeded.
                        // TODO: Make this a specific error/event.
                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                            reject(e);
                        }
                        reject(e);
                    }
                }
            });
        });
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance$2(options, callback) {
    callback = getCallback.apply(this, arguments);

    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        var currentConfig = this.config();
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            if (!options.storeName) {
                resolve(options.name + '/');
            } else {
                resolve(_getKeyPrefix(options, self._defaultConfig));
            }
        }).then(function (keyPrefix) {
            for (var i = localStorage.length - 1; i >= 0; i--) {
                var key = localStorage.key(i);

                if (key.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key);
                }
            }
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var localStorageWrapper = {
    _driver: 'localStorageWrapper',
    _initStorage: _initStorage$2,
    _support: isLocalStorageValid(),
    iterate: iterate$2,
    getItem: getItem$2,
    setItem: setItem$2,
    removeItem: removeItem$2,
    clear: clear$2,
    length: length$2,
    key: key$2,
    keys: keys$2,
    dropInstance: dropInstance$2
};

var sameValue = function sameValue(x, y) {
    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
};

var includes = function includes(array, searchElement) {
    var len = array.length;
    var i = 0;
    while (i < len) {
        if (sameValue(array[i], searchElement)) {
            return true;
        }
        i++;
    }

    return false;
};

var isArray = Array.isArray || function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
};

// Drivers are stored here when `defineDriver()` is called.
// They are shared across all instances of localForage.
var DefinedDrivers = {};

var DriverSupport = {};

var DefaultDrivers = {
    INDEXEDDB: asyncStorage,
    WEBSQL: webSQLStorage,
    LOCALSTORAGE: localStorageWrapper
};

var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

var OptionalDriverMethods = ['dropInstance'];

var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

var DefaultConfig = {
    description: '',
    driver: DefaultDriverOrder.slice(),
    name: 'localforage',
    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
    // we can use without a prompt.
    size: 4980736,
    storeName: 'keyvaluepairs',
    version: 1.0
};

function callWhenReady(localForageInstance, libraryMethod) {
    localForageInstance[libraryMethod] = function () {
        var _args = arguments;
        return localForageInstance.ready().then(function () {
            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
        });
    };
}

function extend() {
    for (var i = 1; i < arguments.length; i++) {
        var arg = arguments[i];

        if (arg) {
            for (var _key in arg) {
                if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                        arguments[0][_key] = arg[_key].slice();
                    } else {
                        arguments[0][_key] = arg[_key];
                    }
                }
            }
        }
    }

    return arguments[0];
}

var LocalForage = function () {
    function LocalForage(options) {
        _classCallCheck(this, LocalForage);

        for (var driverTypeKey in DefaultDrivers) {
            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                var driver = DefaultDrivers[driverTypeKey];
                var driverName = driver._driver;
                this[driverTypeKey] = driverName;

                if (!DefinedDrivers[driverName]) {
                    // we don't need to wait for the promise,
                    // since the default drivers can be defined
                    // in a blocking manner
                    this.defineDriver(driver);
                }
            }
        }

        this._defaultConfig = extend({}, DefaultConfig);
        this._config = extend({}, this._defaultConfig, options);
        this._driverSet = null;
        this._initDriver = null;
        this._ready = false;
        this._dbInfo = null;

        this._wrapLibraryMethodsWithReady();
        this.setDriver(this._config.driver)["catch"](function () {});
    }

    // Set any config values for localForage; can be called anytime before
    // the first API call (e.g. `getItem`, `setItem`).
    // We loop through options so we don't overwrite existing config
    // values.


    LocalForage.prototype.config = function config(options) {
        // If the options argument is an object, we use it to set values.
        // Otherwise, we return either a specified config value or all
        // config values.
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
            // If localforage is ready and fully initialized, we can't set
            // any new configuration values. Instead, we return an error.
            if (this._ready) {
                return new Error("Can't call config() after localforage " + 'has been used.');
            }

            for (var i in options) {
                if (i === 'storeName') {
                    options[i] = options[i].replace(/\W/g, '_');
                }

                if (i === 'version' && typeof options[i] !== 'number') {
                    return new Error('Database version must be a number.');
                }

                this._config[i] = options[i];
            }

            // after all config options are set and
            // the driver option is used, try setting it
            if ('driver' in options && options.driver) {
                return this.setDriver(this._config.driver);
            }

            return true;
        } else if (typeof options === 'string') {
            return this._config[options];
        } else {
            return this._config;
        }
    };

    // Used to define a custom driver, shared across all instances of
    // localForage.


    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
        var promise = new Promise$1(function (resolve, reject) {
            try {
                var driverName = driverObject._driver;
                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

                // A driver name should be defined and not overlap with the
                // library-defined, default drivers.
                if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                }

                var driverMethods = LibraryMethods.concat('_initStorage');
                for (var i = 0, len = driverMethods.length; i < len; i++) {
                    var driverMethodName = driverMethods[i];

                    // when the property is there,
                    // it should be a method even when optional
                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
                        reject(complianceError);
                        return;
                    }
                }

                var configureMissingMethods = function configureMissingMethods() {
                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                        return function () {
                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
                            var promise = Promise$1.reject(error);
                            executeCallback(promise, arguments[arguments.length - 1]);
                            return promise;
                        };
                    };

                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                        var optionalDriverMethod = OptionalDriverMethods[_i];
                        if (!driverObject[optionalDriverMethod]) {
                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                        }
                    }
                };

                configureMissingMethods();

                var setDriverSupport = function setDriverSupport(support) {
                    if (DefinedDrivers[driverName]) {
                        console.info('Redefining LocalForage driver: ' + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    // don't use a then, so that we can define
                    // drivers that have simple _support methods
                    // in a blocking manner
                    resolve();
                };

                if ('_support' in driverObject) {
                    if (driverObject._support && typeof driverObject._support === 'function') {
                        driverObject._support().then(setDriverSupport, reject);
                    } else {
                        setDriverSupport(!!driverObject._support);
                    }
                } else {
                    setDriverSupport(true);
                }
            } catch (e) {
                reject(e);
            }
        });

        executeTwoCallbacks(promise, callback, errorCallback);
        return promise;
    };

    LocalForage.prototype.driver = function driver() {
        return this._driver || null;
    };

    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
        return getDriverPromise;
    };

    LocalForage.prototype.getSerializer = function getSerializer(callback) {
        var serializerPromise = Promise$1.resolve(localforageSerializer);
        executeTwoCallbacks(serializerPromise, callback);
        return serializerPromise;
    };

    LocalForage.prototype.ready = function ready(callback) {
        var self = this;

        var promise = self._driverSet.then(function () {
            if (self._ready === null) {
                self._ready = self._initDriver();
            }

            return self._ready;
        });

        executeTwoCallbacks(promise, callback, callback);
        return promise;
    };

    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
        var self = this;

        if (!isArray(drivers)) {
            drivers = [drivers];
        }

        var supportedDrivers = this._getSupportedDrivers(drivers);

        function setDriverToConfig() {
            self._config.driver = self.driver();
        }

        function extendSelfWithDriver(driver) {
            self._extend(driver);
            setDriverToConfig();

            self._ready = self._initStorage(self._config);
            return self._ready;
        }

        function initDriver(supportedDrivers) {
            return function () {
                var currentDriverIndex = 0;

                function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers.length) {
                        var driverName = supportedDrivers[currentDriverIndex];
                        currentDriverIndex++;

                        self._dbInfo = null;
                        self._ready = null;

                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }

                    setDriverToConfig();
                    var error = new Error('No available storage method found.');
                    self._driverSet = Promise$1.reject(error);
                    return self._driverSet;
                }

                return driverPromiseLoop();
            };
        }

        // There might be a driver initialization in progress
        // so wait for it to finish in order to avoid a possible
        // race condition to set _dbInfo
        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
            return Promise$1.resolve();
        }) : Promise$1.resolve();

        this._driverSet = oldDriverSetDone.then(function () {
            var driverName = supportedDrivers[0];
            self._dbInfo = null;
            self._ready = null;

            return self.getDriver(driverName).then(function (driver) {
                self._driver = driver._driver;
                setDriverToConfig();
                self._wrapLibraryMethodsWithReady();
                self._initDriver = initDriver(supportedDrivers);
            });
        })["catch"](function () {
            setDriverToConfig();
            var error = new Error('No available storage method found.');
            self._driverSet = Promise$1.reject(error);
            return self._driverSet;
        });

        executeTwoCallbacks(this._driverSet, callback, errorCallback);
        return this._driverSet;
    };

    LocalForage.prototype.supports = function supports(driverName) {
        return !!DriverSupport[driverName];
    };

    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
        extend(this, libraryMethodsAndProperties);
    };

    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
        var supportedDrivers = [];
        for (var i = 0, len = drivers.length; i < len; i++) {
            var driverName = drivers[i];
            if (this.supports(driverName)) {
                supportedDrivers.push(driverName);
            }
        }
        return supportedDrivers;
    };

    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
        // Add a stub for each driver API method that delays the call to the
        // corresponding driver method until localForage is ready. These stubs
        // will be replaced by the driver methods as soon as the driver is
        // loaded, so there is no performance impact.
        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
            callWhenReady(this, LibraryMethods[i]);
        }
    };

    LocalForage.prototype.createInstance = function createInstance(options) {
        return new LocalForage(options);
    };

    return LocalForage;
}();

// The actual localForage object that we expose as a module or via a
// global. It's extended by pulling in one of our other libraries.


var localforage_js = new LocalForage();

module.exports = localforage_js;

},{"3":3}]},{},[4])(4)
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sha3/index.js":
/*!************************************!*\
  !*** ./node_modules/sha3/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.SHAKE=exports.SHA3Hash=exports.SHA3=exports.Keccak=void 0;var _buffer=__webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");var _sponge=_interopRequireDefault(__webpack_require__(/*! ./sponge */ "./node_modules/sha3/sponge/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var createHash=function createHash(_ref){var allowedSizes=_ref.allowedSizes,padding=_ref.padding;return function Hash(){var _this=this;var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:512;if(!this||this.constructor!==Hash){return new Hash(size)}if(allowedSizes&&!allowedSizes.includes(size)){throw new Error("Unsupported hash length")}var sponge=new _sponge["default"]({capacity:size});this.update=function(input){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"utf8";if(_buffer.Buffer.isBuffer(input)){sponge.absorb(input);return _this}if(typeof input==="string"){return _this.update(_buffer.Buffer.from(input,encoding))}throw new TypeError("Not a string or buffer")};this.digest=function(){var formatOrOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"binary";var options=typeof formatOrOptions==="string"?{format:formatOrOptions}:formatOrOptions;var buffer=sponge.squeeze({buffer:options.buffer,padding:options.padding||padding});if(options.format&&options.format!=="binary"){return buffer.toString(options.format)}return buffer};this.reset=function(){sponge.reset();return _this};return this}};var Keccak=createHash({allowedSizes:[224,256,384,512],padding:1});exports.Keccak=Keccak;var SHA3=createHash({allowedSizes:[224,256,384,512],padding:6});exports.SHA3=SHA3;var SHAKE=createHash({allowedSizes:[128,256],padding:31});exports.SHAKE=SHAKE;var SHA3Hash=Keccak;exports.SHA3Hash=SHA3Hash;SHA3.SHA3Hash=SHA3Hash;var _default=SHA3;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/index.js":
/*!*******************************************!*\
  !*** ./node_modules/sha3/sponge/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _buffer=__webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");var _permute=_interopRequireDefault(__webpack_require__(/*! ./permute */ "./node_modules/sha3/sponge/permute/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var xorWords=function xorWords(I,O){for(var i=0;i<I.length;i+=8){var o=i/4;O[o]^=I[i+7]<<24|I[i+6]<<16|I[i+5]<<8|I[i+4];O[o+1]^=I[i+3]<<24|I[i+2]<<16|I[i+1]<<8|I[i]}return O};var readWords=function readWords(I,O){for(var o=0;o<O.length;o+=8){var i=o/4;O[o]=I[i+1];O[o+1]=I[i+1]>>>8;O[o+2]=I[i+1]>>>16;O[o+3]=I[i+1]>>>24;O[o+4]=I[i];O[o+5]=I[i]>>>8;O[o+6]=I[i]>>>16;O[o+7]=I[i]>>>24}return O};var Sponge=function Sponge(_ref){var _this=this;var capacity=_ref.capacity,padding=_ref.padding;var keccak=(0,_permute["default"])();var stateSize=200;var blockSize=capacity/8;var queueSize=stateSize-capacity/4;var queueOffset=0;var state=new Uint32Array(stateSize/4);var queue=_buffer.Buffer.allocUnsafe(queueSize);this.absorb=function(buffer){for(var i=0;i<buffer.length;i++){queue[queueOffset]=buffer[i];queueOffset+=1;if(queueOffset>=queueSize){xorWords(queue,state);keccak(state);queueOffset=0}}return _this};this.squeeze=function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var output={buffer:options.buffer||_buffer.Buffer.allocUnsafe(blockSize),padding:options.padding||padding,queue:_buffer.Buffer.allocUnsafe(queue.length),state:new Uint32Array(state.length)};queue.copy(output.queue);for(var i=0;i<state.length;i++){output.state[i]=state[i]}output.queue.fill(0,queueOffset);output.queue[queueOffset]|=output.padding;output.queue[queueSize-1]|=128;xorWords(output.queue,output.state);for(var offset=0;offset<output.buffer.length;offset+=queueSize){keccak(output.state);readWords(output.state,output.buffer.slice(offset,offset+queueSize))}return output.buffer};this.reset=function(){queue.fill(0);state.fill(0);queueOffset=0;return _this};return this};var _default=Sponge;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/chi/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/chi/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _copy=_interopRequireDefault(__webpack_require__(/*! ../copy */ "./node_modules/sha3/sponge/permute/copy/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var chi=function chi(_ref){var A=_ref.A,C=_ref.C;for(var y=0;y<25;y+=5){for(var x=0;x<5;x++){(0,_copy["default"])(A,y+x)(C,x)}for(var _x=0;_x<5;_x++){var xy=(y+_x)*2;var x1=(_x+1)%5*2;var x2=(_x+2)%5*2;A[xy]^=~C[x1]&C[x2];A[xy+1]^=~C[x1+1]&C[x2+1]}}};var _default=chi;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/copy/index.js":
/*!********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/copy/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var copy=function copy(I,i){return function(O,o){var oi=o*2;var ii=i*2;O[oi]=I[ii];O[oi+1]=I[ii+1]}};module.exports=copy;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/index.js":
/*!***************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _chi=_interopRequireDefault(__webpack_require__(/*! ./chi */ "./node_modules/sha3/sponge/permute/chi/index.js"));var _iota=_interopRequireDefault(__webpack_require__(/*! ./iota */ "./node_modules/sha3/sponge/permute/iota/index.js"));var _rhoPi=_interopRequireDefault(__webpack_require__(/*! ./rho-pi */ "./node_modules/sha3/sponge/permute/rho-pi/index.js"));var _theta=_interopRequireDefault(__webpack_require__(/*! ./theta */ "./node_modules/sha3/sponge/permute/theta/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var permute=function permute(){var C=new Uint32Array(10);var D=new Uint32Array(10);var W=new Uint32Array(2);return function(A){for(var roundIndex=0;roundIndex<24;roundIndex++){(0,_theta["default"])({A:A,C:C,D:D,W:W});(0,_rhoPi["default"])({A:A,C:C,W:W});(0,_chi["default"])({A:A,C:C});(0,_iota["default"])({A:A,roundIndex:roundIndex})}C.fill(0);D.fill(0);W.fill(0)}};var _default=permute;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/iota/index.js":
/*!********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/iota/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _roundConstants=_interopRequireDefault(__webpack_require__(/*! ./round-constants */ "./node_modules/sha3/sponge/permute/iota/round-constants/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var iota=function iota(_ref){var A=_ref.A,roundIndex=_ref.roundIndex;var i=roundIndex*2;A[0]^=_roundConstants["default"][i];A[1]^=_roundConstants["default"][i+1]};var _default=iota;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/iota/round-constants/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/iota/round-constants/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var ROUND_CONSTANTS=new Uint32Array([0,1,0,32898,2147483648,32906,2147483648,2147516416,0,32907,0,2147483649,2147483648,2147516545,2147483648,32777,0,138,0,136,0,2147516425,0,2147483658,0,2147516555,2147483648,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,0,32778,2147483648,2147483658,2147483648,2147516545,2147483648,32896,0,2147483649,2147483648,2147516424]);var _default=ROUND_CONSTANTS;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/rho-pi/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/rho-pi/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _piShuffles=_interopRequireDefault(__webpack_require__(/*! ./pi-shuffles */ "./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js"));var _rhoOffsets=_interopRequireDefault(__webpack_require__(/*! ./rho-offsets */ "./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js"));var _copy=_interopRequireDefault(__webpack_require__(/*! ../copy */ "./node_modules/sha3/sponge/permute/copy/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var rhoPi=function rhoPi(_ref){var A=_ref.A,C=_ref.C,W=_ref.W;(0,_copy["default"])(A,1)(W,0);var H=0;var L=0;var Wi=0;var ri=32;for(var i=0;i<24;i++){var j=_piShuffles["default"][i];var r=_rhoOffsets["default"][i];(0,_copy["default"])(A,j)(C,0);H=W[0];L=W[1];ri=32-r;Wi=r<32?0:1;W[Wi]=H<<r|L>>>ri;W[(Wi+1)%2]=L<<r|H>>>ri;(0,_copy["default"])(W,0)(A,j);(0,_copy["default"])(C,0)(W,0)}};var _default=rhoPi;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var PI_SHUFFLES=[10,7,11,17,18,3,5,16,8,21,24,4,15,23,19,13,12,2,20,14,22,9,6,1];var _default=PI_SHUFFLES;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var RHO_OFFSETS=[1,3,6,10,15,21,28,36,45,55,2,14,27,41,56,8,25,43,62,18,39,61,20,44];var _default=RHO_OFFSETS;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/theta/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/theta/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _copy=_interopRequireDefault(__webpack_require__(/*! ../copy */ "./node_modules/sha3/sponge/permute/copy/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var theta=function theta(_ref){var A=_ref.A,C=_ref.C,D=_ref.D,W=_ref.W;var H=0;var L=0;for(var x=0;x<5;x++){var x20=x*2;var x21=(x+5)*2;var x22=(x+10)*2;var x23=(x+15)*2;var x24=(x+20)*2;C[x20]=A[x20]^A[x21]^A[x22]^A[x23]^A[x24];C[x20+1]=A[x20+1]^A[x21+1]^A[x22+1]^A[x23+1]^A[x24+1]}for(var _x=0;_x<5;_x++){(0,_copy["default"])(C,(_x+1)%5)(W,0);H=W[0];L=W[1];W[0]=H<<1|L>>>31;W[1]=L<<1|H>>>31;D[_x*2]=C[(_x+4)%5*2]^W[0];D[_x*2+1]=C[(_x+4)%5*2+1]^W[1];for(var y=0;y<25;y+=5){A[(y+_x)*2]^=D[_x*2];A[(y+_x)*2+1]^=D[_x*2+1]}}};var _default=theta;exports["default"]=_default;

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/scripts/abstract_playing_display.ts":
/*!*************************************************!*\
  !*** ./src/scripts/abstract_playing_display.ts ***!
  \*************************************************/
/*! exports provided: AbstractPlayingDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractPlayingDisplay", function() { return AbstractPlayingDisplay; });
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rectangle */ "./src/scripts/rectangle.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _player_key_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./player_key_action */ "./src/scripts/player_key_action.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");






class AbstractPlayingDisplay {
    constructor(tracks, audioFile, config, scene, returnPage, songTitle) {
        this.isDebugMode = false;
        this.bounds = _rectangle__WEBPACK_IMPORTED_MODULE_1__["Rectangle"].fromTopLeft((scene.sketchInstance.width - 240) / 2, (scene.sketchInstance.height - 480) / 2, 240, 480);
        this.songTitle = songTitle;
    }
    handleAccuracyEvent(accuracyEvent) {
        this.accuracyRecording.update(accuracyEvent);
        this.accuracyFeedbackParticles.update(accuracyEvent);
        this.accuracyFeedbackText.update(accuracyEvent);
        this.accuracyFeedbackFlash.update(accuracyEvent);
        this.comboText.update(accuracyEvent);
        if (this.liveComparison !== undefined) {
            this.liveComparison.update(accuracyEvent);
        }
        this.errorBar.update(accuracyEvent);
        this.handleMiss(accuracyEvent);
    }
    draw() {
        let currentTimeInSeconds = this.timeManager.getCurrentTimeInSeconds(performance.now());
        if (currentTimeInSeconds >= this.gameEndTime && !this.showResultsScreen) {
            this.accuracyRecording.state = _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__["AccuracyRecordingState"].READY;
            this.endSong();
        }
        this.missManager.update(currentTimeInSeconds);
        this.displayManager.draw(currentTimeInSeconds);
        this.receptorShrinkReaction.draw();
        if (this.config.isAccuracyTextEnabled) {
            this.accuracyFeedbackText.draw(currentTimeInSeconds);
        }
        if (this.config.isComboTextEnabled) {
            this.comboText.draw(currentTimeInSeconds);
        }
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.draw(currentTimeInSeconds);
        }
        if (this.config.isAccuracyFlashEnabled) {
            this.accuracyFeedbackFlash.draw(currentTimeInSeconds);
        }
        if (this.config.isAccuracyParticlesEnabled) {
            this.accuracyFeedbackParticles.draw(currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.draw(currentTimeInSeconds);
        }
        if (this.liveComparison !== undefined && this.config.isLiveComparisonEnabled) {
            this.liveComparison.draw(currentTimeInSeconds);
        }
        if (this.config.isErrorBarEnabled) {
            this.errorBar.draw(currentTimeInSeconds);
        }
    }
    bindKeyBindingsToActions() {
        let keyBindings = _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.keyBindings.get(this.noteManager.tracks.length);
        let isSpacebarBound = false;
        let spacebarKeyCode = 32;
        for (let i = 0; i < keyBindings.length; i++) {
            let keyBinding = keyBindings[i];
            if (keyBinding.keyCode === spacebarKeyCode) {
                isSpacebarBound = true;
            }
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].keyboardEventManager.bindKeyToAction(keyBinding.keyCode, () => this.handlePlayerKeyEvent(new _player_key_action__WEBPACK_IMPORTED_MODULE_3__["PlayerKeyEvent"](this.timeManager.getCurrentTimeInSeconds(performance.now()), keyBinding.trackNumber, _player_key_action__WEBPACK_IMPORTED_MODULE_3__["KeyState"].DOWN)), () => this.handlePlayerKeyEvent(new _player_key_action__WEBPACK_IMPORTED_MODULE_3__["PlayerKeyEvent"](this.timeManager.getCurrentTimeInSeconds(performance.now()), keyBinding.trackNumber, _player_key_action__WEBPACK_IMPORTED_MODULE_3__["KeyState"].UP)));
        }
        _index__WEBPACK_IMPORTED_MODULE_2__["global"].keyboardEventManager.bindKeyToAction(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.quitKey, () => {
            this.endSong();
        });
        if (!isSpacebarBound) {
            // bind key to nothing to make sure the default behavior is prevented
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].keyboardEventManager.bindKeyToAction(spacebarKeyCode, () => {
            });
        }
    }
    handlePlayerKeyEvent(playerKeyEvent) {
        this.receptorShrinkReaction.update(playerKeyEvent);
        this.accuracyManager.handlePlayerKeyEvent(playerKeyEvent);
    }
    onTrackHold(trackNumber, currentTimeInSeconds) {
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.holdTrack.call(this.holdGlow, trackNumber, currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.holdTrack.call(this.holdParticles, trackNumber, currentTimeInSeconds);
        }
    }
    onTrackUnhold(trackNumber, currentTimeInSeconds) {
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.unholdTrack.call(this.holdGlow, trackNumber, currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.unholdTrack.call(this.holdParticles, trackNumber, currentTimeInSeconds);
        }
    }
    unbindKeys() {
        _index__WEBPACK_IMPORTED_MODULE_2__["global"].keyboardEventManager.unbindKey(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.quitKey);
        let keyBindings = _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.keyBindings.get(this.noteManager.tracks.length);
        for (let i = 0; i < keyBindings.length; i++) {
            let keyBinding = keyBindings[i];
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].keyboardEventManager.unbindKey(keyBinding.keyCode);
        }
    }
    handleMiss(accuracyEvent) {
        if (!_accuracy_util__WEBPACK_IMPORTED_MODULE_5__["AccuracyUtil"].eventIsAMiss(accuracyEvent, this.config)) {
            return;
        }
        let track = this.noteManager.tracks[accuracyEvent.trackNumber];
        let missedNote = track[accuracyEvent.noteIndex];
        missedNote.state = _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].MISSED;
        if (missedNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].TAIL) {
            if (this.holdManager.isTrackHeld(accuracyEvent.trackNumber)) {
                // Force a hold release upon missing the tail
                this.holdManager.unholdTrack(accuracyEvent.trackNumber, accuracyEvent.timeInSeconds);
            }
        }
        else if (missedNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].HOLD_HEAD) {
            let nextNote = track[accuracyEvent.noteIndex + 1];
            if (nextNote !== undefined) {
                if (nextNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].TAIL) {
                    nextNote.state = _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].MISSED; // Miss the tail when you miss the head
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/scripts/accuracy_feedback_flash.ts":
/*!************************************************!*\
  !*** ./src/scripts/accuracy_feedback_flash.ts ***!
  \************************************************/
/*! exports provided: AccuracyFeedbackFlash */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyFeedbackFlash", function() { return AccuracyFeedbackFlash; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");


class AccuracyFeedbackFlash {
    constructor(config, displayManager, numTracks) {
        this.config = config;
        this.displayManager = displayManager;
        this.numTracks = numTracks;
        this.numColoredAccuracyRanks = _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].countDifferentHitAccuracies(this.config);
        this.accuracyColors = [
            [178, 94, 247, 180],
            [30, 217, 124, 160],
            [196, 199, 30, 140],
            [245, 213, 221, 120]
        ];
        while (this.numColoredAccuracyRanks > this.accuracyColors.length) {
            this.accuracyColors.push([this.getRandomInt(255), this.getRandomInt(255), this.getRandomInt(255), 100]);
        }
        this.lastEvents = [];
    }
    getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }
    update(accuracyEvent) {
        this.lastEvents[accuracyEvent.trackNumber] = accuracyEvent;
    }
    draw(currentTimeInSeconds) {
        for (let trackNumber = 0; trackNumber < this.numTracks; trackNumber++) {
            this.drawFlashForTrack(trackNumber, currentTimeInSeconds);
        }
    }
    drawFlashForTrack(trackNumber, currentTimeInSeconds) {
        let lastEvent = this.lastEvents[trackNumber];
        if (this.isFlashHappening(currentTimeInSeconds, lastEvent)) {
            let centerX = this.displayManager.getNoteCenterX(trackNumber, this.numTracks);
            let centerY = this.displayManager.getNoteCenterY(currentTimeInSeconds, currentTimeInSeconds);
            let flashColor = this.getFlashColor(lastEvent);
            let elapsedTimeInSeconds = this.getElapsedTimeInSeconds(currentTimeInSeconds, lastEvent);
            this.drawFlash(elapsedTimeInSeconds, centerX, centerY, flashColor);
        }
    }
    isFlashHappening(currentTimeInSeconds, accuracyEvent) {
        if (accuracyEvent === undefined) {
            return false;
        }
        if (!_accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].eventIsAHit(accuracyEvent, this.config)) {
            return false;
        }
        let elapsedTimeInSeconds = this.getElapsedTimeInSeconds(currentTimeInSeconds, accuracyEvent);
        return elapsedTimeInSeconds <= AccuracyFeedbackFlash.flashDurationInSeconds;
    }
    getElapsedTimeInSeconds(currentTimeInSeconds, accuracyEvent) {
        return currentTimeInSeconds - accuracyEvent.timeInSeconds;
    }
    // Assumes symmetrical accuracy settings
    getFlashColor(accuracyEvent) {
        let accuracyRank = _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyRank(accuracyEvent, this.config);
        let colorValues = this.accuracyColors[accuracyRank - 1];
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        return p.color(colorValues[0], colorValues[1], colorValues[2], colorValues[3]);
    }
    drawFlash(elapsedTimeInSeconds, centerX, centerY, color) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        let flashSize = this.getFlashSize(elapsedTimeInSeconds, AccuracyFeedbackFlash.flashDurationInSeconds);
        p.push();
        p.translate(centerX, centerY);
        p.fill(color);
        p.noStroke();
        this.drawStar(p, 0, 0, flashSize, flashSize * 0.4, 4);
        p.pop();
    }
    getFlashSize(elapsedTimeInSeconds, flashDurationInSeconds) {
        let flashCompletionRatio = elapsedTimeInSeconds / flashDurationInSeconds;
        let minSize = 0;
        let maxSize = this.config.noteSize;
        return this.interpolate(minSize, maxSize, flashCompletionRatio);
    }
    interpolate(minValue, maxValue, ratio) {
        if (ratio <= 0) {
            return minValue;
        }
        else if (ratio > 0 && ratio < 1) {
            return minValue + (maxValue - minValue) * ratio;
        }
        else {
            return maxValue;
        }
    }
    drawStar(p, centerX, centerY, radius1, radius2, npoints) {
        p.push();
        p.angleMode(p.RADIANS);
        let angle = p.TWO_PI / npoints;
        let halfAngle = angle / 2.0;
        p.beginShape();
        for (let a = 0; a < p.TWO_PI; a += angle) {
            let sx = centerX + p.cos(a) * radius2;
            let sy = centerY + p.sin(a) * radius2;
            p.vertex(sx, sy);
            sx = centerX + p.cos(a + halfAngle) * radius1;
            sy = centerY + p.sin(a + halfAngle) * radius1;
            p.vertex(sx, sy);
        }
        p.endShape(p.CLOSE);
        p.pop();
    }
}
AccuracyFeedbackFlash.flashDurationInSeconds = 0.1;


/***/ }),

/***/ "./src/scripts/accuracy_feedback_particles.ts":
/*!****************************************************!*\
  !*** ./src/scripts/accuracy_feedback_particles.ts ***!
  \****************************************************/
/*! exports provided: AccuracyFeedbackParticles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyFeedbackParticles", function() { return AccuracyFeedbackParticles; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");
/* harmony import */ var _particle_system__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./particle_system */ "./src/scripts/particle_system.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");




class AccuracyFeedbackParticles {
    constructor(config, displayManager, numTracks) {
        this.config = config;
        this.displayManager = displayManager;
        this.numTracks = numTracks;
        this.numColoredAccuracyRanks = _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].countDifferentHitAccuracies(this.config);
        this.particleSettings = [
            [178, 94, 247, 30],
            [30, 217, 124, 25],
            [196, 199, 30, 20],
            [245, 213, 221, 15]
        ];
        while (this.numColoredAccuracyRanks > this.particleSettings.length) {
            this.particleSettings.push([this.getRandomInt(255), this.getRandomInt(255), this.getRandomInt(255), 20]);
        }
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        this.gravityDirection = config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Down ? 1 : -1;
        let gravity = p.createVector(0, 2000 * this.gravityDirection);
        this.particleSystems = [];
        for (let i = 0; i < this.numTracks; i++) {
            this.particleSystems.push(new _particle_system__WEBPACK_IMPORTED_MODULE_2__["ParticleSystem"](AccuracyFeedbackParticles.particlesLifetimeInSeconds, gravity));
        }
    }
    getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }
    draw(currentTimeInSeconds) {
        for (let trackNumber = 0; trackNumber < this.numTracks; trackNumber++) {
            this.particleSystems[trackNumber].draw(currentTimeInSeconds);
        }
    }
    update(accuracyEvent) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        if (_accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].eventIsAHit(accuracyEvent, this.config)) {
            let receptorTimePosition = accuracyEvent.timeInSeconds - accuracyEvent.accuracyMillis / 1000;
            let initialPosition = this.getInitialPosition(p, accuracyEvent.trackNumber, this.numTracks, receptorTimePosition);
            let initialVelocity = p.createVector(0, -500 * this.gravityDirection);
            let particleSettings = this.getParticleSettings(accuracyEvent);
            this.particleSystems[accuracyEvent.trackNumber].addRandomizedParticles(initialPosition, initialVelocity, accuracyEvent.timeInSeconds, particleSettings.numParticles, particleSettings.color);
        }
    }
    getInitialPosition(p, trackNumber, numTracks, centerTimeInSeconds) {
        let centerX = this.displayManager.getNoteCenterX(trackNumber, numTracks);
        let centerY = this.displayManager.getNoteCenterY(centerTimeInSeconds, centerTimeInSeconds);
        return p.createVector(centerX, centerY);
    }
    // Assumes symmetrical accuracy settings
    getParticleSettings(accuracyEvent) {
        let accuracyRank = _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].getAccuracyRank(accuracyEvent, this.config);
        let particleSettings = this.particleSettings[accuracyRank - 1];
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        return {
            color: p.color(particleSettings[0], particleSettings[1], particleSettings[2]),
            numParticles: particleSettings[3]
        };
    }
}
AccuracyFeedbackParticles.particlesLifetimeInSeconds = 1.5;


/***/ }),

/***/ "./src/scripts/accuracy_feedback_text.ts":
/*!***********************************************!*\
  !*** ./src/scripts/accuracy_feedback_text.ts ***!
  \***********************************************/
/*! exports provided: AccuracyFeedbackText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyFeedbackText", function() { return AccuracyFeedbackText; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");



class AccuracyFeedbackText {
    constructor(center, config) {
        this.textSize = 30;
        this.defaultCenter = new _point_2d__WEBPACK_IMPORTED_MODULE_1__["Point2D"](center.x, center.y);
        this.center = new _point_2d__WEBPACK_IMPORTED_MODULE_1__["Point2D"](center.x, center.y);
        this.config = config;
    }
    update(accuracyEvent) {
        this.lastEvent = accuracyEvent;
    }
    draw(currentTimeInSeconds) {
        if (this.lastEvent === undefined) {
            return;
        }
        let timeSinceLastEvent = currentTimeInSeconds - this.lastEvent.timeInSeconds;
        this.alpha = this.getAlpha(timeSinceLastEvent);
        this.center.y = this.defaultCenter.y - this.getTextShift(timeSinceLastEvent);
        if (this.alpha <= 0) {
            return;
        }
        this.drawEventText(this.lastEvent.accuracyName);
    }
    getTextShift(time) {
        let maxShift = this.textSize * 0.2;
        if (time < 0.1) {
            return Object(_util__WEBPACK_IMPORTED_MODULE_2__["lerp"])(0, maxShift, time / 0.1);
        }
        return maxShift;
    }
    getAlpha(time) {
        if (time < 0.6) {
            return 1;
        }
        else if (time >= 0.6 && time < 0.7) {
            let ratio = (time - 0.6) / (0.7 - 0.6);
            return Object(_util__WEBPACK_IMPORTED_MODULE_2__["lerp"])(1, 0, ratio);
        }
        return 0;
    }
    drawEventText(text) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.push();
        p.textAlign(p.CENTER, p.CENTER);
        p.fill('rgba(255,255,255, ' + this.alpha + ')');
        p.textSize(this.textSize);
        p.text(text, this.center.x, this.center.y);
        p.pop();
    }
}


/***/ }),

/***/ "./src/scripts/accuracy_manager.ts":
/*!*****************************************!*\
  !*** ./src/scripts/accuracy_manager.ts ***!
  \*****************************************/
/*! exports provided: Accuracy, AccuracyManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accuracy", function() { return Accuracy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyManager", function() { return AccuracyManager; });
/* harmony import */ var _player_key_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player_key_action */ "./src/scripts/player_key_action.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");



class Accuracy {
    constructor(name, lowerBound, upperBound) {
        this.name = name;
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
    }
}
/* TODO: When the user releases a note too early it results in a BOO which typically isn't counted as a note on the
     results screen, even though it should be, because lifts ARE hittable
     */
class AccuracyManager {
    constructor(noteManager, config, holdManager, handleAccuracyEvent) {
        this.noteManager = noteManager;
        this.config = config;
        this.holdManager = holdManager;
        this.handleAccuracyEvent = handleAccuracyEvent;
    }
    handlePlayerKeyEvent(playerKeyEvent) {
        if (playerKeyEvent.keyState === _player_key_action__WEBPACK_IMPORTED_MODULE_0__["KeyState"].DOWN) {
            this.tryToHitNote(playerKeyEvent.gameTime, playerKeyEvent.track);
        }
        else if (playerKeyEvent.keyState === _player_key_action__WEBPACK_IMPORTED_MODULE_0__["KeyState"].UP) {
            if (this.holdManager.isTrackHeld(playerKeyEvent.track)) {
                this.holdManager.unholdTrack(playerKeyEvent.track, playerKeyEvent.gameTime);
                this.tryToReleaseNote(playerKeyEvent.gameTime, playerKeyEvent.track);
            }
        }
    }
    tryToHitNote(currentTimeInSeconds, trackNumber) {
        let noteIndex = this.getEarliestHittableUnhitNoteIndex(currentTimeInSeconds, trackNumber);
        if (noteIndex !== null) {
            let note = this.noteManager.tracks[trackNumber][noteIndex];
            if (note.type === _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].NORMAL) {
                note.state = _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].HIT;
                let accuracy = (note.timeInSeconds - currentTimeInSeconds) * 1000;
                this.handleAccuracyEvent({
                    accuracyName: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyEventName(accuracy, this.config),
                    trackNumber: trackNumber,
                    noteIndex: noteIndex,
                    accuracyMillis: accuracy,
                    timeInSeconds: currentTimeInSeconds,
                    noteType: note.type,
                });
            }
            else if (note.type === _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].HOLD_HEAD) {
                note.state = _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].HELD; // set the note to held so it won't count as a miss
                let accuracy = (note.timeInSeconds - currentTimeInSeconds) * 1000;
                this.handleAccuracyEvent({
                    accuracyName: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyEventName(accuracy, this.config),
                    trackNumber: trackNumber,
                    noteIndex: noteIndex,
                    accuracyMillis: accuracy,
                    timeInSeconds: currentTimeInSeconds,
                    noteType: note.type,
                });
                this.holdManager.holdTrack(trackNumber, currentTimeInSeconds);
            }
        }
        else if (_accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].isConfiguredForBoos(this.config)) {
            this.handleAccuracyEvent({
                accuracyName: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyEventName(_accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].BOO_ACCURACY_FLAG, this.config),
                trackNumber: trackNumber,
                noteIndex: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].BOO_NOTE_INDEX_FLAG,
                accuracyMillis: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].BOO_ACCURACY_FLAG,
                timeInSeconds: currentTimeInSeconds,
                noteType: _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].NONE,
            });
        }
    }
    getEarliestHittableUnhitNoteIndex(currentTimeInSeconds, trackNumber) {
        let accuracyRange = this.getAccuracyRangeInSeconds();
        let hittableTimeRange = AccuracyManager.getHittableRange(accuracyRange, currentTimeInSeconds);
        let hittableIndexRange = this.noteManager.getNotesByTimeRange(hittableTimeRange.leastTime, hittableTimeRange.greatestTime, trackNumber);
        return this.getEarliestUnhitNoteIndexInRange(trackNumber, hittableIndexRange);
    }
    getAccuracyRangeInSeconds() {
        let accuracySettings = this.config.accuracySettings;
        let numSettings = accuracySettings.length;
        let leastTime = accuracySettings[0].lowerBound === null ?
            accuracySettings[1].lowerBound : accuracySettings[0].lowerBound;
        let greatestTime;
        if (accuracySettings[numSettings - 1].upperBound === null) {
            greatestTime = accuracySettings[numSettings - 2].upperBound;
        }
        else {
            greatestTime = accuracySettings[numSettings - 1].upperBound;
        }
        return { leastTime: leastTime / 1000, greatestTime: greatestTime / 1000 };
    }
    static getHittableRange(accuracyRange, receptorTimePosition) {
        return {
            leastTime: receptorTimePosition + accuracyRange.leastTime,
            greatestTime: receptorTimePosition + accuracyRange.greatestTime
        };
    }
    getEarliestUnhitNoteIndexInRange(trackNumber, noteIndexRange) {
        for (let i = noteIndexRange.startIndex; i < noteIndexRange.endIndexNotInclusive; i++) {
            if (this.noteManager.tracks[trackNumber][i].state === _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].DEFAULT) {
                return i;
            }
        }
        return null;
    }
    tryToReleaseNote(currentTimeInSeconds, trackNumber) {
        let noteIndex = this.getEarliestHittableUnhitNoteIndex(currentTimeInSeconds, trackNumber);
        if (noteIndex !== null) {
            let note = this.noteManager.tracks[trackNumber][noteIndex];
            if (note.type === _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].TAIL) {
                let hold = this.noteManager.tracks[trackNumber][noteIndex - 1]; // get the hold belonging to this tail
                hold.state = _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].HIT; // change the hold state from HELD to HIT
                note.state = _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].HIT; // hit the tail of the hold
                let accuracy = (note.timeInSeconds - currentTimeInSeconds) * 1000;
                this.handleAccuracyEvent({
                    accuracyName: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyEventName(accuracy, this.config),
                    trackNumber: trackNumber,
                    noteIndex: noteIndex,
                    accuracyMillis: accuracy,
                    timeInSeconds: currentTimeInSeconds,
                    noteType: note.type,
                });
            }
        }
        else { // let go too early
            // Could this return -1?
            let holdStartIndex = this.noteManager.findIndexOfFirstNoteAfterTime(currentTimeInSeconds, this.noteManager.tracks[trackNumber]);
            let hold = this.noteManager.tracks[trackNumber][holdStartIndex - 1];
            let tail = this.noteManager.tracks[trackNumber][holdStartIndex];
            if (hold.type === _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].HOLD_HEAD && tail.type === _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].TAIL) {
                hold.state = _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].HIT;
                // this.noteManager.tracks[trackNumber][holdStartIndex - 1].state = NoteState.HIT; // hit the start of the hold
                tail.state = _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].HIT;
                // this.noteManager.tracks[trackNumber][holdStartIndex].state = NoteState.HIT; // hit the tail of the hold
                this.handleAccuracyEvent({
                    accuracyName: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyEventName(_accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].BOO_ACCURACY_FLAG, this.config),
                    trackNumber: trackNumber,
                    noteIndex: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].BOO_NOTE_INDEX_FLAG,
                    accuracyMillis: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].BOO_ACCURACY_FLAG,
                    timeInSeconds: currentTimeInSeconds,
                    noteType: _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].NONE,
                });
            }
            else {
                // TODO: It's possible that this is something like a race condition between the key event and the animation loop. Don't throw an error for now
                // throw "Error: Release miss failed to trigger on note index " + (holdStartIndex - 1) + ", track index " + trackNumber + " at time " + currentTimeInSeconds;
            }
        }
    }
}


/***/ }),

/***/ "./src/scripts/accuracy_recording.ts":
/*!*******************************************!*\
  !*** ./src/scripts/accuracy_recording.ts ***!
  \*******************************************/
/*! exports provided: AccuracyRecordingState, AccuracyRecording */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyRecordingState", function() { return AccuracyRecordingState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyRecording", function() { return AccuracyRecording; });
var AccuracyRecordingState;
(function (AccuracyRecordingState) {
    AccuracyRecordingState[AccuracyRecordingState["INCOMPLETE"] = 0] = "INCOMPLETE";
    AccuracyRecordingState[AccuracyRecordingState["READY"] = 1] = "READY";
})(AccuracyRecordingState || (AccuracyRecordingState = {}));
class AccuracyRecording {
    constructor(numTracks) {
        this.state = AccuracyRecordingState.INCOMPLETE;
        this.perTrackRecording = [];
        for (let i = 0; i < numTracks; i++) {
            this.perTrackRecording.push([]);
        }
        this.linearRecording = [];
    }
    update(accuracyEvent) {
        let entry = {
            trackNumber: accuracyEvent.trackNumber,
            noteIndex: accuracyEvent.noteIndex,
            timeInSeconds: accuracyEvent.timeInSeconds,
            accuracyMillis: accuracyEvent.accuracyMillis,
            noteType: accuracyEvent.noteType
        };
        this.perTrackRecording[accuracyEvent.trackNumber].push(entry);
        this.linearRecording.push(entry);
    }
    static ofReplay(replay) {
        let recording = new AccuracyRecording(replay.numNotes);
        let entries = replay.entries;
        for (let i = 0; i < entries.length; i++) {
            recording.update(entries[i]);
        }
        return recording;
    }
}


/***/ }),

/***/ "./src/scripts/accuracy_util.ts":
/*!**************************************!*\
  !*** ./src/scripts/accuracy_util.ts ***!
  \**************************************/
/*! exports provided: AccuracyUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyUtil", function() { return AccuracyUtil; });
class AccuracyUtil {
    static isConfiguredForBoos(config) {
        return config.accuracySettings[config.accuracySettings.length - 1].upperBound === null;
    }
    static getAccuracyEventName(timeDifferenceInMilliseconds, config) {
        if (config.accuracySettings[0].lowerBound === null &&
            timeDifferenceInMilliseconds < config.accuracySettings[0].upperBound) {
            return config.accuracySettings[0].name; // Handle miss if it exists
        }
        if (this.isConfiguredForBoos(config) &&
            timeDifferenceInMilliseconds >= config.accuracySettings[config.accuracySettings.length - 1].lowerBound) {
            return config.accuracySettings[config.accuracySettings.length - 1].name; // Handle boo if it exists
        }
        for (let i = 0; i < config.accuracySettings.length; i++) {
            let accuracy = config.accuracySettings[i];
            if (accuracy.lowerBound !== null && accuracy.upperBound !== null) {
                if (accuracy.lowerBound < timeDifferenceInMilliseconds && timeDifferenceInMilliseconds <= accuracy.upperBound) {
                    return accuracy.name;
                }
            }
        }
        return "ERROR: Unknown accuracy";
    }
    // Returns a rank where 1 is the best
    static getAccuracyRank(accuracyEvent, config) {
        let accuracies = config.accuracySettings;
        if (accuracyEvent.accuracyMillis < 0) {
            accuracies = this.getReversed(accuracies);
        }
        let bestAccuracyIndex = this.getBestAccuracyIndex(accuracies);
        let currentRank = 1;
        for (let i = bestAccuracyIndex; i < accuracies.length; i++) {
            let accuracy = accuracies[i];
            if (accuracy.lowerBound < accuracyEvent.accuracyMillis && accuracyEvent.accuracyMillis <= accuracy.upperBound) {
                return currentRank;
            }
            currentRank++;
        }
    }
    static getReversed(array) {
        let arrayCopy = [];
        for (let i = array.length - 1; i >= 0; i--) {
            arrayCopy.push(array[i]);
        }
        return arrayCopy;
    }
    static getBestAccuracyIndex(accuracies) {
        for (let i = 0; i < accuracies.length; i++) {
            let accuracy = accuracies[i];
            if (accuracy.lowerBound < 0 && 0 <= accuracy.upperBound) {
                return i;
            }
        }
        return null;
    }
    static eventIsAHit(accuracyEvent, config) {
        return !this.eventIsABoo(accuracyEvent, config) &&
            !this.eventIsAMiss(accuracyEvent, config);
    }
    static eventIsABoo(accuracyEvent, config) {
        let accuracies = config.accuracySettings;
        return accuracies[accuracies.length - 1].upperBound === null &&
            accuracyEvent.accuracyMillis >= accuracies[accuracies.length - 1].lowerBound;
    }
    static eventIsAMiss(accuracyEvent, config) {
        let accuracies = config.accuracySettings;
        return accuracies[0].lowerBound === null &&
            accuracyEvent.accuracyMillis < accuracies[0].upperBound;
    }
    // Assumes symmetrical accuracy settings
    static countDifferentHitAccuracies(config) {
        let accuracies = config.accuracySettings;
        let bestAccuracyIndex = AccuracyUtil.getBestAccuracyIndex(accuracies);
        let numRanks = 1; // start with 1 because we at least have the best rank
        for (let i = bestAccuracyIndex + 1; i < accuracies.length; i++) {
            let accuracy = accuracies[i];
            if (accuracy.lowerBound !== undefined && accuracy.upperBound !== undefined) {
                numRanks++;
            }
        }
        return numRanks;
    }
    static isBounded(accuracy) {
        return accuracy.lowerBound !== null && accuracy.upperBound !== null;
    }
    static getEarliestMillis(config) {
        if (this.isConfiguredForBoos(config)) {
            return config.accuracySettings[config.accuracySettings.length - 1].lowerBound;
        }
        else {
            return config.accuracySettings[config.accuracySettings.length - 1].upperBound;
        }
    }
    static getLatestMillis(config) {
        return config.accuracySettings[0].upperBound;
    }
}
AccuracyUtil.BOO_NOTE_INDEX_FLAG = -1;
AccuracyUtil.BOO_ACCURACY_FLAG = Infinity;
AccuracyUtil.MISS_ACCURACY_FLAG = -Infinity;


/***/ }),

/***/ "./src/scripts/audio/audio_file.ts":
/*!*****************************************!*\
  !*** ./src/scripts/audio/audio_file.ts ***!
  \*****************************************/
/*! exports provided: AudioFileState, AudioFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioFileState", function() { return AudioFileState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioFile", function() { return AudioFile; });
var AudioFileState;
(function (AudioFileState) {
    AudioFileState[AudioFileState["NO_AUDIO_FILE"] = 0] = "NO_AUDIO_FILE";
    AudioFileState[AudioFileState["DONE_READING"] = 1] = "DONE_READING";
    AudioFileState[AudioFileState["BUFFERED"] = 2] = "BUFFERED";
    AudioFileState[AudioFileState["ERROR"] = 3] = "ERROR";
})(AudioFileState || (AudioFileState = {}));
class AudioFile {
    constructor() {
        this.state = AudioFileState.NO_AUDIO_FILE;
    }
    getState() {
        return this.state;
    }
    getName() {
        if (this.source instanceof File) {
            return this.source.name;
        }
        throw new Error("called getName() but name does not exist on Blob");
    }
}


/***/ }),

/***/ "./src/scripts/audio/html_audio_element_helper.ts":
/*!********************************************************!*\
  !*** ./src/scripts/audio/html_audio_element_helper.ts ***!
  \********************************************************/
/*! exports provided: HtmlAudioElementHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlAudioElementHelper", function() { return HtmlAudioElementHelper; });
/* harmony import */ var _audio_file__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio_file */ "./src/scripts/audio/audio_file.ts");

class HtmlAudioElementHelper extends _audio_file__WEBPACK_IMPORTED_MODULE_0__["AudioFile"] {
    loadFile(file) {
        this.source = file;
        this.loadSource();
    }
    loadBlob(blob) {
        this.source = blob;
        this.loadSource();
    }
    loadSource() {
        this.sourceUrl = this.getSourceUrl();
        this.audioElement = new Audio(this.sourceUrl);
        this.state = _audio_file__WEBPACK_IMPORTED_MODULE_0__["AudioFileState"].DONE_READING;
        this.audioElement.addEventListener('canplaythrough', function () {
            this.state = _audio_file__WEBPACK_IMPORTED_MODULE_0__["AudioFileState"].BUFFERED;
        }.bind(this));
    }
    getSourceUrl() {
        return URL.createObjectURL(this.source);
    }
    releaseSourceUrl() {
        URL.revokeObjectURL(this.sourceUrl);
        this.sourceUrl = undefined;
    }
    getDuration() {
        if (this.audioElement !== undefined) {
            return this.audioElement.duration;
        }
        return undefined;
    }
    play(delayInSeconds = 0) {
        this.timeoutId = setTimeout(this.audioElement.play.bind(this.audioElement), delayInSeconds * 1000);
    }
    stop() {
        clearTimeout(this.timeoutId);
        this.audioElement.pause();
        this.state = _audio_file__WEBPACK_IMPORTED_MODULE_0__["AudioFileState"].BUFFERED;
        this.audioElement.load();
    }
    getCurrentTimeInSeconds() {
        return this.audioElement.currentTime;
    }
    playFromTimeInSeconds(startTimeInSeconds) {
        if (startTimeInSeconds < 0) {
            this.timeoutId = setTimeout(this.audioElement.play.bind(this.audioElement), -startTimeInSeconds * 1000);
        }
        else {
            this.audioElement.currentTime = startTimeInSeconds;
            this.audioElement.play();
        }
    }
    reset() {
        this.releaseSourceUrl();
        this.source = undefined;
    }
}


/***/ }),

/***/ "./src/scripts/combo_text.ts":
/*!***********************************!*\
  !*** ./src/scripts/combo_text.ts ***!
  \***********************************/
/*! exports provided: ComboText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComboText", function() { return ComboText; });
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");




class ComboText {
    constructor(center, config) {
        this.textSize = 20;
        this.defaultCenter = new _point_2d__WEBPACK_IMPORTED_MODULE_0__["Point2D"](center.x, center.y);
        this.center = new _point_2d__WEBPACK_IMPORTED_MODULE_0__["Point2D"](center.x, center.y);
        this.config = config;
        this.combo = 0;
    }
    update(accuracyEvent) {
        this.lastEvent = accuracyEvent;
        if (_accuracy_util__WEBPACK_IMPORTED_MODULE_2__["AccuracyUtil"].eventIsAHit(accuracyEvent, this.config)) {
            this.combo++;
        }
        else {
            this.combo = 0;
        }
    }
    draw(currentTimeInSeconds) {
        if (this.lastEvent === undefined || this.combo < 1) {
            return;
        }
        let timeSinceLastEvent = currentTimeInSeconds - this.lastEvent.timeInSeconds;
        this.alpha = this.getAlpha(timeSinceLastEvent);
        this.center.y = this.defaultCenter.y - this.getTextShift(timeSinceLastEvent);
        if (this.alpha <= 0) {
            return;
        }
        this.drawEventText(this.combo + " Combo");
    }
    getTextShift(time) {
        let maxShift = this.textSize * 0.2;
        if (time < 0.1) {
            return Object(_util__WEBPACK_IMPORTED_MODULE_3__["lerp"])(0, maxShift, time / 0.1);
        }
        return maxShift;
    }
    getAlpha(time) {
        if (time < 0.6) {
            return 1;
        }
        else if (time >= 0.6 && time < 0.7) {
            let ratio = (time - 0.6) / (0.7 - 0.6);
            return Object(_util__WEBPACK_IMPORTED_MODULE_3__["lerp"])(1, 0, ratio);
        }
        return 0;
    }
    drawEventText(text) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.push();
        p.textAlign(p.CENTER, p.CENTER);
        p.fill('rgba(255,255,255, ' + this.alpha + ')');
        p.textSize(this.textSize);
        p.text(text, this.center.x, this.center.y);
        p.pop();
    }
}


/***/ }),

/***/ "./src/scripts/config.ts":
/*!*******************************!*\
  !*** ./src/scripts/config.ts ***!
  \*******************************/
/*! exports provided: Config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Config", function() { return Config; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _default_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default_config */ "./src/scripts/default_config.ts");


/* Stores user settings. Expected not to change during play */
class Config {
    constructor(args) {
        this.gameAreaHeight = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.gameAreaHeight, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].gameAreaHeight);
        this.gameAreaWidth = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.gameAreaWidth, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].gameAreaWidth);
        this.pixelsPerSecond = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.pixelsPerSecond, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].pixelsPerSecond);
        this.scrollDirection = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.scrollDirection, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].scrollDirection);
        // NOTE: Scroll direction and gameAreaHeight must be set BEFORE setting receptorYPosition
        this.receptorYPercent = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.receptorYPercent, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].receptorYPercent);
        this.additionalOffsetInSeconds = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.additionalOffsetInSeconds, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].additionalOffsetInSeconds);
        this.accuracySettings = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.accuracySettings, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].accuracySettings);
        this.pauseAtStartInSeconds = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.pauseAtStartInSeconds, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].pauseAtStartInSeconds);
        this.noteSize = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.noteSize, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].noteSize);
        this.noteSpacing = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.noteSpacing, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].noteSpacing);
        this.keyBindings = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.keyBindings, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].keyBindings);
        this.quitKey = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.quitKey, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].quitKey);
        this.username = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.username, undefined);
        this.password = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.password, undefined);
        this.isAccuracyFlashEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isAccuracyFlashEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isAccuracyFlashEnabled);
        this.isAccuracyParticlesEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isAccuracyParticlesEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isAccuracyParticlesEnabled);
        this.isAccuracyTextEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isAccuracyTextEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isAccuracyTextEnabled);
        this.isHoldParticlesEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isHoldParticlesEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isHoldParticlesEnabled);
        this.isHoldGlowEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isHoldGlowEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isHoldGlowEnabled);
        this.isComboTextEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isComboTextEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isComboTextEnabled);
        this.isLiveComparisonEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isLiveComparisonEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isLiveComparisonEnabled);
        this.isErrorBarEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isErrorBarEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isErrorBarEnabled);
        this.isErrorBarBackgroundEnabled = Object(_util__WEBPACK_IMPORTED_MODULE_0__["defaultIfUndefined"])(args.isErrorBarBackgroundEnabled, _default_config__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_CONFIG"].isErrorBarBackgroundEnabled);
    }
}


/***/ }),

/***/ "./src/scripts/database_client/database_client.ts":
/*!********************************************************!*\
  !*** ./src/scripts/database_client/database_client.ts ***!
  \********************************************************/
/*! exports provided: DatabaseClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatabaseClient", function() { return DatabaseClient; });
/* harmony import */ var aws_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-sdk */ "aws-sdk");
/* harmony import */ var aws_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aws_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _password__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./password */ "./src/scripts/database_client/password.ts");
/* harmony import */ var _username__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./username */ "./src/scripts/database_client/username.ts");
/* harmony import */ var _put_response__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./put_response */ "./src/scripts/database_client/put_response.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./src/scripts/util.ts");





class DatabaseClient {
    constructor(u, p) {
        let username = _username__WEBPACK_IMPORTED_MODULE_2__["Username"].of(u);
        let password = _password__WEBPACK_IMPORTED_MODULE_1__["Password"].of(p);
        if (username === null || password === null) {
            throw new Error("Invalid username or password");
        }
        this.username = username;
        let credentials = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__["Credentials"](password.keys[0], password.keys[1]);
        this.documentClient = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__["DynamoDB"].DocumentClient({
            apiVersion: DatabaseClient.apiVersion,
            region: DatabaseClient.region,
            credentials: credentials
        });
    }
    async query(request) {
        let params = {
            TableName: "rhythm-scores",
            IndexName: "leaderboard",
            KeyConditionExpression: 'songhash = :hash',
            ExpressionAttributeValues: {
                ":hash": request.songhash
            },
            ScanIndexForward: false
        };
        return this.documentClient.query(params).promise()
            .then((result) => {
            let entries = [];
            let items = result.Items;
            for (let i = 0; i < items.length; i++) {
                let entry = this.getEntry(items[i]);
                entries.push(entry);
            }
            console.log("scores loaded");
            return { entries: entries };
        });
    }
    getEntry(item) {
        return {
            score: parseFloat(item.score),
            user: item.user,
            timestamp: this.timestampToDate(item.timestamp)
        };
    }
    timestampToDate(timestamp) {
        if (timestamp === undefined) {
            return null;
        }
        return new Date(timestamp);
    }
    async putIfBetterScore(request) {
        let key = this.username.value + "_" + request.songhash;
        let params = {
            TableName: 'rhythm-scores',
            Item: {
                "user_songhash": key,
                "user": this.username.value,
                "songhash": request.songhash,
                "songname": request.songname,
                "score": request.score,
                "timestamp": Object(_util__WEBPACK_IMPORTED_MODULE_4__["getNowTimestamp"])()
            },
            ConditionExpression: "attribute_not_exists(user_songhash) OR score < :newScore",
            ExpressionAttributeValues: {
                ":newScore": request.score
            }
        };
        return this.documentClient.put(params).promise()
            .then((result) => {
            console.log("score submitted");
            return { code: _put_response__WEBPACK_IMPORTED_MODULE_3__["PutResponseCode"].SUCCESS, message: "Score submitted" };
        })
            .catch(reason => {
            if (reason.code === "ConditionalCheckFailedException") {
                console.log("Score submission skipped: new score is lower than saved score");
                return { code: _put_response__WEBPACK_IMPORTED_MODULE_3__["PutResponseCode"].SCORE_TOO_LOW, message: "Old score was better" };
            }
            throw new Error(reason);
        });
    }
}
DatabaseClient.region = "us-east-1";
DatabaseClient.apiVersion = "2012-08-10";


/***/ }),

/***/ "./src/scripts/database_client/password.ts":
/*!*************************************************!*\
  !*** ./src/scripts/database_client/password.ts ***!
  \*************************************************/
/*! exports provided: Password */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Password", function() { return Password; });
class Password {
    constructor(password) {
        this.keys = Password.parse(password);
    }
    static of(password) {
        if (Password.isValid(password)) {
            return new Password(password);
        }
        return null;
    }
    static isValid(password) {
        if (password === undefined || password === null) {
            return false;
        }
        return Password.VALID_CHARACTERS.test(password) &&
            password.length === Password.LENGTH;
    }
    static parse(password) {
        let parsedString = Password.symmetricSwap(password);
        return [
            parsedString.substring(0, 20),
            parsedString.substring(20)
        ];
    }
    static unparse(keys) {
        let parsedString = keys[0] + keys[1];
        return Password.symmetricSwap(parsedString);
    }
    static symmetricSwap(string) {
        for (let i = 0; i < Math.floor(string.length / 2); i++) {
            if (i % 2 === 0) {
                string = Password.swapChars(string, i, string.length - i - 1);
            }
        }
        return string;
    }
    static swapChars(string, index1, index2) {
        let char1 = string.charAt(index1);
        string = Password.setChar(string, index1, string.charAt(index2));
        return Password.setChar(string, index2, char1);
    }
    static setChar(string, index, character) {
        return string.substring(0, index) + character + string.substring(index + 1);
    }
}
Password.LENGTH = 60;
Password.VALID_CHARACTERS = /^[\w+/]*$/;


/***/ }),

/***/ "./src/scripts/database_client/put_response.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/database_client/put_response.ts ***!
  \*****************************************************/
/*! exports provided: PutResponseCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PutResponseCode", function() { return PutResponseCode; });
var PutResponseCode;
(function (PutResponseCode) {
    PutResponseCode[PutResponseCode["SUCCESS"] = 0] = "SUCCESS";
    PutResponseCode[PutResponseCode["SCORE_TOO_LOW"] = 1] = "SCORE_TOO_LOW";
})(PutResponseCode || (PutResponseCode = {}));


/***/ }),

/***/ "./src/scripts/database_client/username.ts":
/*!*************************************************!*\
  !*** ./src/scripts/database_client/username.ts ***!
  \*************************************************/
/*! exports provided: Username */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Username", function() { return Username; });
class Username {
    constructor(username) {
        this.value = username;
    }
    static of(username) {
        if (Username.isValid(username)) {
            return new Username(username);
        }
        return null;
    }
    static isValid(username) {
        if (username === undefined || username === null) {
            return false;
        }
        return Username.VALID_CHARACTERS.test(username) &&
            Username.MIN_LENGTH <= username.length &&
            username.length <= Username.MAX_LENGTH;
    }
}
Username.MAX_LENGTH = 30;
Username.MIN_LENGTH = 3;
Username.VALID_CHARACTERS = /^\w*$/;


/***/ }),

/***/ "./src/scripts/default_config.ts":
/*!***************************************!*\
  !*** ./src/scripts/default_config.ts ***!
  \***************************************/
/*! exports provided: DEFAULT_CONFIG */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CONFIG", function() { return DEFAULT_CONFIG; });
/* harmony import */ var _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accuracy_manager */ "./src/scripts/accuracy_manager.ts");
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");


let DEFAULT_CONFIG = {
    pixelsPerSecond: 550,
    scrollDirection: _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Down,
    receptorYPercent: 15,
    additionalOffsetInSeconds: 0,
    // This is a symmetrical version of FFR's accuracy
    accuracySettings: [
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Miss", null, -117),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Average", -117, -83),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Good", -83, -50),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Perfect", -50, -17),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Amazing", -17, 17),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Perfect", 17, 50),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Good", 50, 83),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Average", 83, 117),
        new _accuracy_manager__WEBPACK_IMPORTED_MODULE_0__["Accuracy"]("Boo", 117, null)
    ],
    pauseAtStartInSeconds: 0,
    keyBindings: new Map(),
    gameAreaHeight: 600,
    gameAreaWidth: 400,
    noteSize: 30,
    noteSpacing: 15,
    quitKey: 27,
    isAccuracyFlashEnabled: true,
    isAccuracyParticlesEnabled: true,
    isAccuracyTextEnabled: true,
    isHoldParticlesEnabled: true,
    isHoldGlowEnabled: true,
    isComboTextEnabled: true,
    isLiveComparisonEnabled: true,
    isErrorBarEnabled: true,
    isErrorBarBackgroundEnabled: true,
};


/***/ }),

/***/ "./src/scripts/default_note_skin.ts":
/*!******************************************!*\
  !*** ./src/scripts/default_note_skin.ts ***!
  \******************************************/
/*! exports provided: DefaultNoteSkin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultNoteSkin", function() { return DefaultNoteSkin; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");


class DefaultNoteSkin {
    static drawNote(trackNumber, numTracks, centerX, centerY, noteType, noteSize) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        let width = noteSize;
        let height = noteSize;
        p.push();
        p.fill("black");
        switch (noteType) {
            case _note__WEBPACK_IMPORTED_MODULE_1__["NoteType"].NORMAL:
                p.rect(centerX - width / 2, centerY - height / 2, width, height);
                break;
            case _note__WEBPACK_IMPORTED_MODULE_1__["NoteType"].HOLD_HEAD:
                p.rect(centerX - width / 2, centerY - height / 2, width, height);
                p.textSize(20);
                p.textFont("Arial");
                p.textAlign(p.CENTER);
                p.fill("white");
                p.text("v", centerX, centerY + 6);
                break;
            case _note__WEBPACK_IMPORTED_MODULE_1__["NoteType"].TAIL:
                p.noFill();
                p.rect(centerX - width / 2, centerY - height / 2, width, height);
                break;
            case _note__WEBPACK_IMPORTED_MODULE_1__["NoteType"].ROLL_HEAD:
                p.rect(centerX - width / 2, centerY - height / 2, width, height);
                p.textSize(20);
                p.textFont("Arial");
                p.textAlign(p.CENTER);
                p.fill("white");
                p.text("x", centerX, centerY + 6);
                break;
            case _note__WEBPACK_IMPORTED_MODULE_1__["NoteType"].MINE:
                p.fill("white");
                p.circle(centerX, centerY, 24);
                p.textSize(20);
                p.textFont("Arial");
                p.textAlign(p.CENTER);
                p.fill("black");
                p.text("X", centerX, centerY + 8);
                break;
            default:
                p.noFill();
                p.rect(centerX - width / 2, centerY - height / 2, width, height);
                p.fill("white");
                p.textSize(20);
                p.textFont("Arial");
                p.textAlign(p.CENTER);
                p.text("?", centerX, centerY + 7);
                break;
        }
        p.pop();
    }
    static drawReceptor(trackNumber, numTracks, centerX, centerY, noteSize) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        let width = noteSize;
        let height = noteSize;
        p.push();
        p.noFill();
        p.rect(centerX - width / 2, centerY - height / 2, width, height);
        p.pop();
    }
    static drawHoldConnector(centerX, startY, endY, noteSize) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        let width = noteSize * 0.5;
        p.push();
        p.fill("black");
        p.rect(centerX - width / 2, startY, width, endY - startY);
        p.pop();
    }
}


/***/ }),

/***/ "./src/scripts/display_manager.ts":
/*!****************************************!*\
  !*** ./src/scripts/display_manager.ts ***!
  \****************************************/
/*! exports provided: DisplayManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayManager", function() { return DisplayManager; });
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _default_note_skin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./default_note_skin */ "./src/scripts/default_note_skin.ts");
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");






class NoteDisplay {
    constructor(centerX, centerY, noteType, noteSize, trackNumber, numTracks, beatFraction) {
        this.centerX = centerX;
        this.centerY = centerY;
        this.noteType = noteType;
        this.noteSize = noteSize;
        this.trackNumber = trackNumber;
        this.numTracks = numTracks;
        this.beatFraction = beatFraction;
    }
    draw() {
        let isNoteDrawSuccessful = _index__WEBPACK_IMPORTED_MODULE_1__["global"].noteSkin.drawNote({
            trackNumber: this.trackNumber,
            numTracks: this.numTracks,
            center: new _point_2d__WEBPACK_IMPORTED_MODULE_3__["Point2D"](this.centerX, this.centerY),
            noteType: this.noteType,
            noteSize: this.noteSize,
            beatFraction: this.beatFraction
        });
        if (!isNoteDrawSuccessful) {
            _default_note_skin__WEBPACK_IMPORTED_MODULE_2__["DefaultNoteSkin"].drawNote(this.trackNumber, this.numTracks, this.centerX, this.centerY, this.noteType, this.noteSize);
        }
    }
}
class HoldConnector {
    constructor(centerX, drawStartY, drawEndY, noteStartY, noteEndY, noteSize) {
        this.centerX = centerX;
        this.drawStartY = drawStartY;
        this.drawEndY = drawEndY;
        this.noteStartY = noteStartY;
        this.noteEndY = noteEndY;
        this.noteSize = noteSize;
    }
    draw() {
        let isConnectorDrawSuccessful = _index__WEBPACK_IMPORTED_MODULE_1__["global"].noteSkin.drawHoldConnector(this.centerX, this.drawStartY, this.drawEndY, this.noteStartY, this.noteEndY, this.noteSize);
        if (!isConnectorDrawSuccessful) {
            _default_note_skin__WEBPACK_IMPORTED_MODULE_2__["DefaultNoteSkin"].drawHoldConnector(this.centerX, this.drawStartY, this.drawEndY, this.noteSize);
        }
    }
}
class Receptor {
    constructor(centerX, centerY, noteSize, trackNumber, numTracks) {
        this.centerX = centerX;
        this.centerY = centerY;
        this.noteSize = noteSize;
        this.trackNumber = trackNumber;
        this.numTracks = numTracks;
    }
    draw() {
        let isReceptorDrawSuccessful = _index__WEBPACK_IMPORTED_MODULE_1__["global"].noteSkin.drawReceptor(this.trackNumber, this.numTracks, this.centerX, this.centerY, this.noteSize);
        if (!isReceptorDrawSuccessful) {
            _default_note_skin__WEBPACK_IMPORTED_MODULE_2__["DefaultNoteSkin"].drawReceptor(this.trackNumber, this.numTracks, this.centerX, this.centerY, this.noteSize);
        }
    }
}
class DisplayManager {
    constructor(noteManager, displayConfig, sketchInstance, bounds) {
        this.displayConfig = displayConfig;
        this.noteManager = noteManager;
        this.currentTimeInSeconds = 0;
        this.sketchInstance = sketchInstance;
        this.bounds = bounds;
    }
    draw(currentTimeInSeconds) {
        let p = this.sketchInstance;
        p.push();
        p.fill("black");
        this.currentTimeInSeconds = currentTimeInSeconds;
        p.rect(this.bounds.topLeftX, this.bounds.topLeftY, this.bounds.width, this.bounds.height);
        this.drawNotesAndConnectors();
        this.drawReceptors();
        p.pop();
    }
    drawNotesAndConnectors() {
        let leastTime = this.getLeastTime(this.currentTimeInSeconds);
        let greatestTime = this.getGreatestTime(this.currentTimeInSeconds);
        this.drawAllConnectors(leastTime, greatestTime);
        this.drawAllNotes(leastTime, greatestTime);
    }
    drawAllNotes(leastTime, greatestTime) {
        let numTracks = this.noteManager.tracks.length;
        for (let i = 0; i < numTracks; i++) {
            this.drawNotesInTrack(leastTime, greatestTime, i, numTracks, this.currentTimeInSeconds);
        }
    }
    drawNotesInTrack(leastTime, greatestTime, trackNumber, numTracks, currentTime) {
        let noteIndexRange = this.noteManager.getNotesByTimeRange(leastTime, greatestTime, trackNumber);
        let notes = this.noteManager.tracks[trackNumber].slice(noteIndexRange.startIndex, noteIndexRange.endIndexNotInclusive);
        for (let i = 0; i < notes.length; i++) {
            this.drawNote(notes[i], trackNumber, numTracks, currentTime);
        }
    }
    drawNote(note, trackNumber, numTracks, currentTime) {
        if (note.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].DEFAULT) {
            let x = this.getNoteCenterX(trackNumber, numTracks);
            let y = this.getNoteCenterY(note.timeInSeconds, currentTime);
            new NoteDisplay(x, y, note.type, this.displayConfig.getNoteSize(), trackNumber, numTracks, note.beatFraction).draw();
        }
    }
    getLeastTime(currentTime) {
        let totalDisplaySeconds = this.bounds.height / this.displayConfig.getPixelsPerSecond();
        return currentTime - this.displayConfig.getReceptorYPercent() / 100 * totalDisplaySeconds;
    }
    getGreatestTime(currentTime) {
        let totalDisplaySeconds = this.bounds.height / this.displayConfig.getPixelsPerSecond();
        return currentTime + (1 - this.displayConfig.getReceptorYPercent() / 100) * totalDisplaySeconds;
    }
    getNoteCenterX(trackNumber, numTracks) {
        let noteSpacing = this.displayConfig.getNoteSpacing();
        let noteSize = this.displayConfig.getNoteSize();
        let totalSize = numTracks * noteSize + (numTracks - 1) * noteSpacing;
        let width = this.bounds.width;
        let startX = this.bounds.topLeftX;
        return (trackNumber + 0.5) * noteSize + trackNumber * noteSpacing + (width - totalSize) / 2 + startX;
    }
    // This essentially defines a conversion from seconds to pixels
    getNoteCenterY(noteTimeInSeconds, currentTimeInSeconds) {
        let noteYOffset = this.displayConfig.getPixelsPerSecond() * (noteTimeInSeconds - currentTimeInSeconds);
        let receptorYOffset = this.displayConfig.getReceptorYPercent() / 100 * this.bounds.height;
        if (this.displayConfig.getScrollDirection() === _scroll_direction__WEBPACK_IMPORTED_MODULE_0__["ScrollDirection"].Up) {
            return receptorYOffset + noteYOffset + this.bounds.topLeftY;
        }
        else {
            return this.bounds.height - (receptorYOffset + noteYOffset) + this.bounds.topLeftY;
        }
    }
    drawAllConnectors(leastTime, greatestTime) {
        let tracks = this.noteManager.tracks;
        for (let i = 0; i < tracks.length; i++) {
            this.drawAllTrackConnectors(leastTime, greatestTime, tracks[i], i, tracks.length, this.currentTimeInSeconds);
        }
    }
    drawAllTrackConnectors(leastTime, greatestTime, track, trackNumber, numTracks, currentTime) {
        let noteStack = [];
        for (let i = 0; i < track.length; i++) {
            let currentNote = track[i];
            if (currentNote.timeInSeconds < leastTime) {
                if (currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].HOLD_HEAD || currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].ROLL_HEAD) {
                    noteStack.push(currentNote);
                }
                else if (currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].TAIL) {
                    noteStack.pop();
                }
            }
            else if (currentNote.timeInSeconds < greatestTime) {
                if (currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].HOLD_HEAD || currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].ROLL_HEAD) {
                    noteStack.push(currentNote);
                }
                else if (currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].TAIL) {
                    let startNote = noteStack.pop();
                    let endNote = currentNote;
                    if (startNote !== undefined && endNote !== undefined) {
                        if ((startNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].DEFAULT || startNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].HELD) &&
                            endNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].DEFAULT) {
                            this.drawConnector(startNote, endNote, trackNumber, numTracks, currentTime);
                        }
                    }
                }
            }
            else {
                if (noteStack.length === 0) {
                    break;
                }
                if (currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].HOLD_HEAD || currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].ROLL_HEAD) {
                    noteStack.push(currentNote);
                }
                else if (currentNote.type === _note__WEBPACK_IMPORTED_MODULE_4__["NoteType"].TAIL) {
                    let startNote = noteStack.pop();
                    let endNote = currentNote;
                    if (startNote !== undefined && endNote !== undefined) {
                        if ((startNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].DEFAULT || startNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].HELD) &&
                            endNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].DEFAULT) {
                            this.drawConnector(startNote, endNote, trackNumber, numTracks, currentTime);
                        }
                    }
                }
            }
        }
    }
    drawConnector(startNote, endNote, trackNumber, numTracks, currentTime) {
        let centerX = this.getNoteCenterX(trackNumber, numTracks);
        let noteStartY = this.getNoteCenterY(startNote.timeInSeconds, currentTime);
        let noteEndY = this.getNoteCenterY(endNote.timeInSeconds, currentTime);
        let drawStartY;
        if (startNote.state === _note__WEBPACK_IMPORTED_MODULE_4__["NoteState"].HELD) {
            drawStartY = this.getNoteCenterY(Math.min(currentTime, endNote.timeInSeconds), currentTime);
        }
        else {
            drawStartY = noteStartY;
        }
        drawStartY = Object(_util__WEBPACK_IMPORTED_MODULE_5__["clampValueToRange"])(drawStartY, this.bounds.topLeftY, this.bounds.topLeftY + this.bounds.height);
        let drawEndY = noteEndY;
        drawEndY = Object(_util__WEBPACK_IMPORTED_MODULE_5__["clampValueToRange"])(drawEndY, this.bounds.topLeftY, this.bounds.topLeftY + this.bounds.height);
        new HoldConnector(centerX, drawStartY, drawEndY, noteStartY, noteEndY, this.displayConfig.getNoteSize()).draw();
    }
    drawReceptors() {
        let numTracks = this.noteManager.tracks.length;
        for (let i = 0; i < numTracks; i++) {
            let noteCenterX = this.getNoteCenterX(i, numTracks);
            let noteCenterY = this.getNoteCenterY(this.currentTimeInSeconds, this.currentTimeInSeconds);
            let noteSize = this.displayConfig.getReceptorSizes()[i];
            new Receptor(noteCenterX, noteCenterY, noteSize, i, numTracks).draw();
        }
    }
}


/***/ }),

/***/ "./src/scripts/dom_wrapper.ts":
/*!************************************!*\
  !*** ./src/scripts/dom_wrapper.ts ***!
  \************************************/
/*! exports provided: DOMWrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMWrapper", function() { return DOMWrapper; });
// Lets us code the DOM UI elements as if it were "immediate", i.e. stateless.
class DOMWrapper {
    // uniqueID should be unique within a scene
    static create(createCall, uniqueId) {
        if (this.registry.has(uniqueId)) {
            return {
                element: this.registry.get(uniqueId),
                alreadyExists: true
            };
        }
        else {
            let element = createCall();
            this.registry.set(uniqueId, element);
            return {
                element: element,
                alreadyExists: false
            };
        }
    }
    static clearRegistry() {
        this.registry.forEach((value, key, map) => {
            value.remove();
        });
        this.registry.clear();
    }
    // Returns true if remove was successful, otherwise returns false;
    static removeElementById(id) {
        if (this.registry.has(id)) {
            this.registry.get(id).remove();
            this.registry.delete(id);
            return true;
        }
        else {
            return false;
        }
    }
    // Returns the element if found, otherwise returns undefined;
    static getElementById(id) {
        return this.registry.get(id);
    }
}
DOMWrapper.registry = new Map();


/***/ }),

/***/ "./src/scripts/error_bar.ts":
/*!**********************************!*\
  !*** ./src/scripts/error_bar.ts ***!
  \**********************************/
/*! exports provided: ErrorBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorBar", function() { return ErrorBar; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rectangle */ "./src/scripts/rectangle.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");





class ErrorBar {
    constructor(config) {
        this.lastDrawTimeInSeconds = 0;
        this.animationEasing = 0.2;
        this.maxEventHistory = 15;
        this.config = config;
        let y = this.config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_4__["ScrollDirection"].Down ? 440 : 40;
        this.bounds = _rectangle__WEBPACK_IMPORTED_MODULE_2__["Rectangle"].fromCenter(360, y, 260, 16);
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        this.spectrum = [
            p.color(80, 10, 145, 200),
            p.color(92, 11, 167, 200),
            p.color(106, 13, 192, 200),
            p.color(122, 15, 221, 200),
            p.color(140, 17, 254, 200)
        ];
        this.eventHistory = [];
        this.actualAverageError = 0;
        this.drawnAverageError = 0;
    }
    update(accuracyEvent) {
        this.addToHistory(accuracyEvent);
        this.updateActualAverageError();
    }
    addToHistory(accuracyEvent) {
        this.eventHistory.push(accuracyEvent);
        if (this.eventHistory.length > this.maxEventHistory) {
            this.eventHistory.shift();
        }
    }
    updateActualAverageError() {
        if (this.eventHistory.length === 0) {
            return;
        }
        let sum = 0;
        for (let i = 0; i < this.eventHistory.length; i++) {
            sum += this.getNormalizedMillis(this.eventHistory[i]);
        }
        this.actualAverageError = sum / this.eventHistory.length;
    }
    getNormalizedMillis(accuracyEvent) {
        let earliestMillis = _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].getEarliestMillis(this.config);
        if (accuracyEvent.accuracyMillis > earliestMillis) {
            return earliestMillis;
        }
        let latestMillis = _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].getLatestMillis(this.config);
        if (accuracyEvent.accuracyMillis < latestMillis) {
            return latestMillis;
        }
        return accuracyEvent.accuracyMillis;
    }
    draw(currentTimeInSeconds) {
        if (this.config.isErrorBarBackgroundEnabled) {
            this.drawBarBackground();
        }
        for (let i = 0; i < this.eventHistory.length; i++) {
            this.drawEventTick(i, this.eventHistory[i]);
        }
        this.updateDrawnAverageError(currentTimeInSeconds);
        this.drawAverageErrorTick();
        this.lastDrawTimeInSeconds = currentTimeInSeconds;
    }
    drawBarBackground() {
        let accuracySettings = this.config.accuracySettings;
        for (let i = 0; i < accuracySettings.length; i++) {
            let accuracy = accuracySettings[i];
            if (!_accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].isBounded(accuracy)) {
                continue;
            }
            let accuracyRank = this.accuracyToRank(accuracy);
            this.drawBarSegment(accuracyRank, accuracy.lowerBound, accuracy.upperBound);
        }
    }
    accuracyToRank(accuracy) {
        let averageMillis = (accuracy.upperBound + accuracy.lowerBound) / 2;
        return _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].getAccuracyRank({ accuracyMillis: averageMillis }, this.config);
    }
    drawBarSegment(accuracyRank, lowerAccuracyMillis, upperAccuracyMillis) {
        let color = this.getColorForAccuracyRank(accuracyRank);
        let leftX = this.getAccuracyX(upperAccuracyMillis);
        let rightX = this.getAccuracyX(lowerAccuracyMillis);
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.push();
        p.noStroke();
        p.fill(color);
        p.rect(leftX, this.bounds.topLeftY, rightX - leftX, this.bounds.height);
        p.pop();
    }
    getColorForAccuracyRank(accuracyRank) {
        return this.spectrum[(accuracyRank - 1) % 5];
    }
    updateDrawnAverageError(currentTimeInSeconds) {
        let timeDifferenceInSeconds = currentTimeInSeconds - this.lastDrawTimeInSeconds;
        let ratio = timeDifferenceInSeconds / this.animationEasing;
        this.drawnAverageError = Object(_util__WEBPACK_IMPORTED_MODULE_0__["lerp"])(this.drawnAverageError, this.actualAverageError, ratio);
    }
    drawEventTick(eventIndex, accuracyEvent) {
        let x = this.getAccuracyX(accuracyEvent.accuracyMillis);
        let width = this.getWidth(eventIndex);
        let opacity = this.getOpacity(eventIndex);
        this.drawTick(x, width, opacity);
    }
    getWidth(eventIndex) {
        if (eventIndex === this.eventHistory.length - 1) {
            return 3;
        }
        return 1;
    }
    getOpacity(eventIndex) {
        if (eventIndex === this.eventHistory.length - 1) {
            return 0.7;
        }
        let opacityRatio = (this.maxEventHistory - eventIndex - 1) / (this.maxEventHistory - 1);
        return Object(_util__WEBPACK_IMPORTED_MODULE_0__["lerp"])(0.2, 0.6, opacityRatio);
    }
    getAccuracyX(accuracyMillis) {
        let earliestMillis = _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].getEarliestMillis(this.config);
        let latestMillis = _accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].getLatestMillis(this.config);
        let accuracyRatio = (earliestMillis - accuracyMillis) / (earliestMillis - latestMillis);
        return Object(_util__WEBPACK_IMPORTED_MODULE_0__["lerp"])(this.bounds.topLeftX, this.bounds.topLeftX + this.bounds.width, accuracyRatio);
    }
    drawTick(centerX, width, opacity) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.push();
        p.fill(p.color(255, opacity * 255));
        p.noStroke();
        p.rect(centerX - width / 2, this.bounds.topLeftY, width, this.bounds.height);
        p.pop();
    }
    drawAverageErrorTick() {
        let tickWidth = 10;
        let tickHeight = 10;
        let tickDistance = 3;
        let centerX = this.getAccuracyX(this.drawnAverageError);
        let centerY = this.bounds.topLeftY - tickDistance;
        let leftX = centerX - tickWidth / 2;
        let leftY = centerY - tickHeight;
        let rightX = centerX + tickWidth / 2;
        let rightY = leftY;
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.push();
        p.noStroke();
        p.fill(p.color(255, 200));
        p.triangle(centerX, centerY, leftX, leftY, rightX, rightY);
        p.pop();
    }
}


/***/ }),

/***/ "./src/scripts/game_time_manager.ts":
/*!******************************************!*\
  !*** ./src/scripts/game_time_manager.ts ***!
  \******************************************/
/*! exports provided: GameTimeManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GameTimeManager", function() { return GameTimeManager; });
/* harmony import */ var _time_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time_manager */ "./src/scripts/time_manager.ts");

class GameTimeManager extends _time_manager__WEBPACK_IMPORTED_MODULE_0__["TimeManager"] {
    constructor(config, systemTimeWhenGameStarted) {
        super(systemTimeWhenGameStarted);
        this.config = config;
    }
    getGameTimeOffset() {
        return this.config.additionalOffsetInSeconds - this.config.pauseAtStartInSeconds;
    }
    getCurrentTimeInSeconds(systemTimeMillis) {
        let currentTime = this.getSystemTimeDifferenceInSeconds(systemTimeMillis) + this.getGameTimeOffset();
        return currentTime;
    }
}


/***/ }),

/***/ "./src/scripts/hold_glow.ts":
/*!**********************************!*\
  !*** ./src/scripts/hold_glow.ts ***!
  \**********************************/
/*! exports provided: HoldGlow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HoldGlow", function() { return HoldGlow; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");

class HoldGlow {
    constructor(config, numTracks, displayManager) {
        this.config = config;
        this.numTracks = numTracks;
        this.displayManager = displayManager;
        this.glowStartTimes = [];
        for (let i = 0; i < numTracks; i++) {
            this.glowStartTimes.push(HoldGlow.dontDrawFlag);
        }
    }
    draw(currentTimeInSeconds) {
        for (let trackNumber = 0; trackNumber < this.numTracks; trackNumber++) {
            if (this.glowStartTimes[trackNumber] !== HoldGlow.dontDrawFlag) {
                let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
                let elapsedTime = currentTimeInSeconds - this.glowStartTimes[trackNumber];
                let centerX = this.displayManager.getNoteCenterX(trackNumber, this.numTracks);
                let centerY = this.displayManager.getNoteCenterY(currentTimeInSeconds, currentTimeInSeconds);
                let glowAlpha = this.getGlowAlpha(elapsedTime);
                let glowColor = p.color(0, 255, 0, glowAlpha);
                let glowSize = this.getGlowSize(elapsedTime);
                this.drawGlow(p, centerX, centerY, glowSize, glowSize / 2, glowColor);
            }
        }
    }
    drawGlow(p, centerX, centerY, width, height, color) {
        p.push();
        p.noStroke();
        p.fill(color);
        p.ellipse(centerX, centerY, width, height);
        p.pop();
    }
    getGlowAlpha(elapsedTimeInSeconds) {
        let animationTime = elapsedTimeInSeconds % HoldGlow.glowPeriodInSeconds;
        let animationRatio = animationTime / HoldGlow.glowPeriodInSeconds;
        return this.biLerp(0, 50, animationRatio);
    }
    getGlowSize(elapsedTimeInSeconds) {
        let animationTime = elapsedTimeInSeconds % HoldGlow.glowPeriodInSeconds;
        let animationRatio = animationTime / HoldGlow.glowPeriodInSeconds;
        let maxSize = this.config.noteSize;
        return this.biLerp(0, maxSize, animationRatio);
    }
    biLerp(minValue, maxValue, ratio) {
        if (ratio < 0.5) {
            return this.lerp(minValue, maxValue, 1 - ratio / 0.5);
        }
        else {
            return this.lerp(minValue, maxValue, 2 * ratio - 1);
        }
    }
    lerp(minValue, maxValue, ratio) {
        if (ratio <= 0) {
            return minValue;
        }
        else if (ratio > 0 && ratio < 1) {
            return minValue + (maxValue - minValue) * ratio;
        }
        else {
            return maxValue;
        }
    }
    holdTrack(trackNumber, currentTimeInSeconds) {
        this.glowStartTimes[trackNumber] = currentTimeInSeconds;
    }
    unholdTrack(trackNumber) {
        this.glowStartTimes[trackNumber] = HoldGlow.dontDrawFlag;
    }
}
HoldGlow.dontDrawFlag = -1;
HoldGlow.glowPeriodInSeconds = 0.3;


/***/ }),

/***/ "./src/scripts/hold_manager.ts":
/*!*************************************!*\
  !*** ./src/scripts/hold_manager.ts ***!
  \*************************************/
/*! exports provided: HoldManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HoldManager", function() { return HoldManager; });
/* This class is intended only to be used to store the hold state for notes that can be held. This shouldn't be used
   for normal notes or general keyboard state */
class HoldManager {
    constructor(numTracks, onTrackHold, onTrackUnhold) {
        this.heldTracks = [];
        for (let i = 0; i < numTracks; i++) {
            this.heldTracks.push(false);
        }
        this.onTrackHold = onTrackHold;
        this.onTrackUnhold = onTrackUnhold;
    }
    isTrackHeld(trackNumber) {
        return this.heldTracks[trackNumber];
    }
    holdTrack(trackNumber, currentTimeInSeconds) {
        this.heldTracks[trackNumber] = true;
        this.onTrackHold(trackNumber, currentTimeInSeconds);
    }
    unholdTrack(trackNumber, currentTimeInSeconds) {
        this.heldTracks[trackNumber] = false;
        this.onTrackUnhold(trackNumber, currentTimeInSeconds);
    }
}


/***/ }),

/***/ "./src/scripts/hold_particles.ts":
/*!***************************************!*\
  !*** ./src/scripts/hold_particles.ts ***!
  \***************************************/
/*! exports provided: HoldParticles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HoldParticles", function() { return HoldParticles; });
/* harmony import */ var _particle_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./particle_system */ "./src/scripts/particle_system.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");



class HoldParticles {
    constructor(config, numTracks, displayManager) {
        this.numTracks = numTracks;
        this.displayManager = displayManager;
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        this.gravityDirection = config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_2__["ScrollDirection"].Down ? 1 : -1;
        let gravity = p.createVector(0, 2000 * this.gravityDirection);
        this.particleSystems = [];
        for (let i = 0; i < numTracks; i++) {
            this.particleSystems.push(new _particle_system__WEBPACK_IMPORTED_MODULE_0__["ParticleSystem"](HoldParticles.particlesLifetimeInSeconds, gravity));
        }
        this.previousParticleTimestamps = [];
        for (let i = 0; i < numTracks; i++) {
            this.previousParticleTimestamps.push(HoldParticles.dontDrawFlag);
        }
    }
    draw(currentTimeInSeconds) {
        for (let trackNumber = 0; trackNumber < this.numTracks; trackNumber++) {
            this.addParticlesToTrack(trackNumber, currentTimeInSeconds);
            this.particleSystems[trackNumber].draw(currentTimeInSeconds);
        }
    }
    addParticlesToTrack(trackNumber, currentTimeInSeconds) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        if (this.previousParticleTimestamps[trackNumber] !== HoldParticles.dontDrawFlag) {
            while (this.previousParticleTimestamps[trackNumber] + HoldParticles.particlePeriodInSeconds < currentTimeInSeconds) {
                let newTimestamp = this.previousParticleTimestamps[trackNumber] + HoldParticles.particlePeriodInSeconds;
                let receptorTimePosition = currentTimeInSeconds;
                let initialPosition = this.getInitialPosition(p, trackNumber, this.numTracks, receptorTimePosition);
                let initialVelocity = p.createVector(0, -500 * this.gravityDirection);
                this.particleSystems[trackNumber].addRandomizedParticles(initialPosition, initialVelocity, newTimestamp, 1, p.color(0, 255, 0, 150));
                this.previousParticleTimestamps[trackNumber] = newTimestamp;
            }
        }
    }
    getInitialPosition(p, trackNumber, numTracks, centerTimeInSeconds) {
        let centerX = this.displayManager.getNoteCenterX(trackNumber, numTracks);
        let centerY = this.displayManager.getNoteCenterY(centerTimeInSeconds, centerTimeInSeconds);
        return p.createVector(centerX, centerY);
    }
    holdTrack(trackNumber, currentTimeInSeconds) {
        this.previousParticleTimestamps[trackNumber] = currentTimeInSeconds;
    }
    unholdTrack(trackNumber) {
        this.previousParticleTimestamps[trackNumber] = HoldParticles.dontDrawFlag;
    }
}
HoldParticles.particlesLifetimeInSeconds = 1.5;
HoldParticles.dontDrawFlag = -1;
HoldParticles.particlePeriodInSeconds = 0.05;


/***/ }),

/***/ "./src/scripts/index.ts":
/*!******************************!*\
  !*** ./src/scripts/index.ts ***!
  \******************************/
/*! exports provided: global */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "global", function() { return global; });
/* harmony import */ var _p5_scene__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./p5_scene */ "./src/scripts/p5_scene.ts");
/* harmony import */ var _pages_play_from_online_online_playlist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/play_from_online/online_playlist */ "./src/scripts/pages/play_from_online/online_playlist.ts");
/* harmony import */ var _pages_storage_storage_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/storage/storage_list */ "./src/scripts/pages/storage/storage_list.ts");
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");




const global = {};
global.p5Scene = new _p5_scene__WEBPACK_IMPORTED_MODULE_0__["P5Scene"]();
global.globalClass = "game";
global.onlinePlaylist = new _pages_play_from_online_online_playlist__WEBPACK_IMPORTED_MODULE_1__["OnlinePlaylist"]();
_offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_3__["OfflineStorageClient"].loadConfig()
    .then((config) => global.config = config)
    .then(() => global.storageList = new _pages_storage_storage_list__WEBPACK_IMPORTED_MODULE_2__["StorageList"](global.config));


/***/ }),

/***/ "./src/scripts/key_binding_helper.ts":
/*!*******************************************!*\
  !*** ./src/scripts/key_binding_helper.ts ***!
  \*******************************************/
/*! exports provided: KeyBindingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBindingHelper", function() { return KeyBindingHelper; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _pages_options_key_bindings_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/options/key_bindings_ui */ "./src/scripts/pages/options/key_bindings_ui.ts");



class KeyBindingHelper {
    constructor(bindingsToAcquire) {
        this.bindingsToAcquire = bindingsToAcquire;
        this.currentBindingNumber = 0;
    }
    bindNext(p, keyBindingsQuickstartId) {
        let keybinding = {
            trackNumber: this.currentBindingNumber,
            keyCode: p.keyCode,
            string: Object(_util__WEBPACK_IMPORTED_MODULE_0__["getKeyString"])(p)
        };
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["setConfigKeyBinding"])(this.currentBindingNumber, this.bindingsToAcquire, keybinding);
        this.currentBindingNumber++;
        if (this.currentBindingNumber >= this.bindingsToAcquire) {
            _index__WEBPACK_IMPORTED_MODULE_1__["global"].keyboardEventManager.unbindKey(-1);
            document.getElementById(keyBindingsQuickstartId).scrollIntoView();
            _pages_options_key_bindings_ui__WEBPACK_IMPORTED_MODULE_2__["KeyBindingsUi"].noLongerWaitingForLastKey(p);
        }
        else {
            _pages_options_key_bindings_ui__WEBPACK_IMPORTED_MODULE_2__["KeyBindingsUi"].scrollKeyBindingIntoView(this.currentBindingNumber);
            _pages_options_key_bindings_ui__WEBPACK_IMPORTED_MODULE_2__["KeyBindingsUi"].indicateWaitingForKey(p, this.currentBindingNumber);
        }
    }
}


/***/ }),

/***/ "./src/scripts/keyboard_event_manager.ts":
/*!***********************************************!*\
  !*** ./src/scripts/keyboard_event_manager.ts ***!
  \***********************************************/
/*! exports provided: KeyboardEventManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyboardEventManager", function() { return KeyboardEventManager; });
class KeyboardEventManager {
    constructor(p) {
        this.actionBindings = new Map();
        p.keyPressed = function () {
            // -1 is a special keyCode flag that means "any". This is especially useful for setting up key bindings.
            let globalActions = this.actionBindings.get(-1);
            if (globalActions !== undefined) {
                if (globalActions.keyDownAction !== undefined) {
                    globalActions.keyDownAction();
                    // Equivalent to event.preventDefault
                    return false;
                }
            }
            else {
                let actions = this.actionBindings.get(p.keyCode);
                if (actions !== undefined) {
                    if (actions.keyDownAction !== undefined) {
                        actions.keyDownAction();
                        // Equivalent to event.preventDefault
                        return false;
                    }
                }
            }
        }.bind(this);
        p.keyReleased = function () {
            let actions = this.actionBindings.get(p.keyCode);
            if (actions !== undefined) {
                if (actions.keyUpAction !== undefined) {
                    actions.keyUpAction();
                    // Equivalent to event.preventDefault
                    return false;
                }
            }
        }.bind(this);
    }
    bindKeyToAction(keyCode, keyDownAction, keyUpAction = undefined) {
        this.actionBindings.set(keyCode, { keyDownAction: keyDownAction, keyUpAction: keyUpAction });
    }
    unbindKey(keyCode) {
        return this.actionBindings.delete(keyCode);
    }
}


/***/ }),

/***/ "./src/scripts/live_comparison.ts":
/*!****************************************!*\
  !*** ./src/scripts/live_comparison.ts ***!
  \****************************************/
/*! exports provided: LiveComparison */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiveComparison", function() { return LiveComparison; });
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _score_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score_provider */ "./src/scripts/score_provider.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rectangle */ "./src/scripts/rectangle.ts");





/* The live comparison waits for an accuracy event from the user before deciding whether they are behind or ahead of
 the compared score, with exception to boos */
class LiveComparison {
    constructor(pbReplay, scoreProvider) {
        this.lastDrawTimeInSeconds = 0;
        this.animationEasing = 0.2;
        this.personalBest = _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__["AccuracyRecording"].ofReplay(pbReplay);
        this.scoreProvider = scoreProvider;
        this.maxTotalScore = scoreProvider.getMaxScore();
        this.currentScore = new _score_provider__WEBPACK_IMPORTED_MODULE_1__["Score"](0, 0);
        this.currentPBScore = new _score_provider__WEBPACK_IMPORTED_MODULE_1__["Score"](0, 0);
        this.actualScoreDifference = new _score_provider__WEBPACK_IMPORTED_MODULE_1__["Score"](0, 0);
        this.drawnScoreDifference = new _score_provider__WEBPACK_IMPORTED_MODULE_1__["Score"](0, 0);
        this.bounds = _rectangle__WEBPACK_IMPORTED_MODULE_4__["Rectangle"].fromTopLeft(520, 110, 20, 240);
        let pbScore = scoreProvider.score(this.personalBest.linearRecording);
        let colorUnit = Math.min(2, (100 - pbScore.percentScore) / 2);
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        let gold = p.color(255, 215, 0);
        let green = p.color(0, 199, 43);
        let blue = p.color(66, 135, 245);
        let red = p.color(255, 0, 0);
        let black = p.color(100, 0, 0);
        let spectrum = [];
        let percent = 2 * colorUnit;
        spectrum.push({ percentScore: percent, color: gold });
        percent -= colorUnit;
        spectrum.push({ percentScore: percent, color: green });
        percent -= colorUnit;
        spectrum.push({ percentScore: percent, color: blue });
        percent -= 3;
        spectrum.push({ percentScore: percent, color: red });
        percent -= 3;
        spectrum.push({ percentScore: percent, color: black });
        this.spectrum = spectrum;
    }
    update(accuracyEvent) {
        if (!this.entryIsABoo(accuracyEvent)) {
            let matchingEntry = this.removeMatchingPBEntry(accuracyEvent);
            if (matchingEntry !== undefined) {
                this.updatePBScore(matchingEntry);
            }
            else {
                console.error("@" +
                    accuracyEvent.timeInSeconds.toFixed(3) +
                    "s No matching replay entry found: track " +
                    accuracyEvent.trackNumber);
            }
        }
        this.updateCurrentScore(accuracyEvent);
        this.updateActualScoreDifference();
    }
    removeMatchingPBEntry(accuracyEvent) {
        let trackNumber = accuracyEvent.trackNumber;
        let noteIndex = 0;
        while (true) {
            let trackRecording = this.personalBest.perTrackRecording[trackNumber];
            let mostRecentEntry = trackRecording[noteIndex];
            if (mostRecentEntry === undefined) {
                break;
            }
            if (!this.entryIsABoo(mostRecentEntry)) {
                trackRecording.splice(noteIndex, 1);
                return mostRecentEntry;
            }
            noteIndex++;
        }
        return undefined;
    }
    draw(currentTimeInSeconds) {
        this.handleBoos(currentTimeInSeconds);
        this.updateDrawnScoreDifference(currentTimeInSeconds);
        this.drawGradient();
        this.drawTickMarks();
        this.drawMeterNeedle();
        this.drawScoreDifference();
        this.lastDrawTimeInSeconds = currentTimeInSeconds;
    }
    drawMeterNeedle() {
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        let width = 120;
        let height = width / 430 * 120;
        let rect = _rectangle__WEBPACK_IMPORTED_MODULE_4__["Rectangle"].fromTopLeft(this.bounds.topLeftX + this.bounds.width / 2, this.bounds.centerY - height / 2, width, height);
        p.image(_index__WEBPACK_IMPORTED_MODULE_3__["global"].meterNeedle, rect.topLeftX, rect.topLeftY, rect.width, rect.height);
    }
    drawScoreDifference() {
        let scoreDifference = this.formatNumber(this.drawnScoreDifference.percentScore);
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        p.push();
        let fontSize = 20;
        p.textFont(_index__WEBPACK_IMPORTED_MODULE_3__["global"].meterFont, 20);
        p.fill(this.getColorForPercent(this.drawnScoreDifference.percentScore));
        p.textAlign(p.LEFT, p.CENTER);
        p.text(scoreDifference, this.bounds.topLeftX + this.bounds.width + 18, this.bounds.centerY - fontSize / 6);
        p.pop();
    }
    drawGradient() {
        let low = this.drawnScoreDifference.percentScore - 2;
        let high = this.drawnScoreDifference.percentScore + 2;
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        p.push();
        for (let y = this.bounds.topLeftY; y <= this.bounds.topLeftY + this.bounds.height; y++) {
            // bottom is 0%, top is 100%
            let rectPercent = 1 - (y - this.bounds.topLeftY) / this.bounds.height;
            let percentScore = Object(_util__WEBPACK_IMPORTED_MODULE_2__["lerp"])(low, high, rectPercent);
            let color = this.getColorForPercent(percentScore);
            p.stroke(color);
            p.line(this.bounds.topLeftX, y, this.bounds.topLeftX + this.bounds.width, y);
        }
        p.pop();
    }
    drawTickMarks() {
        let low = this.drawnScoreDifference.percentScore - 2;
        let high = this.drawnScoreDifference.percentScore + 2;
        let ticksToDraw = [];
        let x = Math.ceil(low);
        while (x < high) {
            ticksToDraw.push(x);
            x++;
        }
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        p.push();
        p.textSize(11);
        p.fill("white");
        p.textAlign(p.LEFT, p.CENTER);
        p.stroke("white");
        for (let i = 0; i < ticksToDraw.length; i++) {
            let percentScore = ticksToDraw[i];
            // bottom is 0%, top is 100%
            let ratio = (percentScore - low) / (high - low);
            let y = Object(_util__WEBPACK_IMPORTED_MODULE_2__["lerp"])(this.bounds.topLeftY + this.bounds.height, this.bounds.topLeftY, ratio);
            p.line(this.bounds.topLeftX, y, this.bounds.topLeftX + this.bounds.width, y);
            p.text(this.formatNumber(percentScore), this.bounds.topLeftX + this.bounds.width + 2, y);
        }
        p.pop();
    }
    formatNumber(x) {
        let s = x.toFixed(2) + "%";
        if (x > 0) {
            s = "+" + s;
        }
        return s;
    }
    getColorForPercent(percentScore) {
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        for (let i = 1; i < this.spectrum.length; i++) {
            let upper = this.spectrum[i - 1];
            let lower = this.spectrum[i];
            if (lower.percentScore <= percentScore && percentScore <= upper.percentScore) {
                let ratio = (percentScore - lower.percentScore) / (upper.percentScore - lower.percentScore);
                return p.lerpColor(lower.color, upper.color, ratio);
            }
        }
        if (percentScore > this.spectrum[0].percentScore) {
            return this.spectrum[0].color;
        }
        else {
            return this.spectrum[this.spectrum.length - 1].color;
        }
    }
    updateDrawnScoreDifference(currentTimeInSeconds) {
        let timeDifferenceInSeconds = currentTimeInSeconds - this.lastDrawTimeInSeconds;
        let ratio = timeDifferenceInSeconds / this.animationEasing;
        this.drawnScoreDifference.percentScore =
            Object(_util__WEBPACK_IMPORTED_MODULE_2__["lerp"])(this.drawnScoreDifference.percentScore, this.actualScoreDifference.percentScore, ratio);
        this.drawnScoreDifference.totalScore =
            Object(_util__WEBPACK_IMPORTED_MODULE_2__["lerp"])(this.drawnScoreDifference.totalScore, this.actualScoreDifference.totalScore, ratio);
    }
    handleBoos(currentTimeInSeconds) {
        for (let trackNumber = 0; trackNumber < this.personalBest.perTrackRecording.length; trackNumber++) {
            this.handleBoosForTrack(currentTimeInSeconds, trackNumber);
        }
    }
    handleBoosForTrack(currentTimeInSeconds, trackNumber) {
        let noteIndex = 0;
        while (true) {
            let trackRecording = this.personalBest.perTrackRecording[trackNumber];
            let mostRecentEntry = trackRecording[noteIndex];
            if (mostRecentEntry === undefined) {
                break;
            }
            if (mostRecentEntry.timeInSeconds < currentTimeInSeconds) {
                if (this.entryIsABoo(mostRecentEntry)) {
                    this.updatePBScore(mostRecentEntry);
                    this.updateActualScoreDifference();
                    trackRecording.splice(noteIndex, 1);
                    noteIndex--;
                }
            }
            else {
                break;
            }
            noteIndex++;
        }
    }
    entryIsABoo(mostRecentEntry) {
        return mostRecentEntry.accuracyMillis === Infinity;
    }
    updatePBScore(entry) {
        this.updateScore(this.currentPBScore, entry);
    }
    updateCurrentScore(entry) {
        this.updateScore(this.currentScore, entry);
    }
    updateScore(score, entry) {
        let totalScoreChange = this.scoreProvider.scoreEntry(entry);
        let percentScoreChange = 100 * totalScoreChange / this.maxTotalScore;
        score.totalScore -= totalScoreChange;
        score.percentScore -= percentScoreChange;
    }
    updateActualScoreDifference() {
        this.actualScoreDifference.totalScore = this.currentPBScore.totalScore - this.currentScore.totalScore;
        this.actualScoreDifference.percentScore = this.currentPBScore.percentScore - this.currentScore.percentScore;
    }
}


/***/ }),

/***/ "./src/scripts/miss_manager.ts":
/*!*************************************!*\
  !*** ./src/scripts/miss_manager.ts ***!
  \*************************************/
/*! exports provided: MissManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissManager", function() { return MissManager; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");



class MissManager {
    constructor(config, noteManager, accuracyRecording, holdManager, handleAccuracyEvent) {
        this.config = config;
        this.noteManager = noteManager;
        this.lastCheckedNoteIndices = [];
        for (let i = 0; i < this.noteManager.tracks.length; i++) {
            this.lastCheckedNoteIndices.push(0);
        }
        this.accuracyRecording = accuracyRecording;
        this.holdManager = holdManager;
        this.handleAccuracyEvent = handleAccuracyEvent;
    }
    update(currentTimeInSeconds) {
        if (this.config.accuracySettings[0].lowerBound !== null) {
            return; // A lowerBound for misses is incompatible with this way of doing misses
        }
        let numTracks = this.noteManager.tracks.length;
        for (let trackNumber = 0; trackNumber < numTracks; trackNumber++) {
            this.handleAllMissedNotesForTrack(trackNumber, currentTimeInSeconds);
        }
    }
    handleAllMissedNotesForTrack(trackNumber, currentTimeInSeconds) {
        let indexOfLastCheckedNote = this.lastCheckedNoteIndices[trackNumber];
        let track = this.noteManager.tracks[trackNumber];
        while (true) {
            if (indexOfLastCheckedNote >= track.length) {
                break;
            }
            let currentNote = track[indexOfLastCheckedNote];
            if (!this.isMissable(currentNote)) {
                indexOfLastCheckedNote++;
                continue;
            }
            if (this.isNoteMissedAndNotHandled(currentNote, currentTimeInSeconds)) {
                // TODO: current time should be the earliest possible miss time, not just when the miss was detected
                this.handleMissedNote(trackNumber, indexOfLastCheckedNote, currentTimeInSeconds);
                indexOfLastCheckedNote++;
            }
            else {
                break;
            }
        }
        this.lastCheckedNoteIndices[trackNumber] = indexOfLastCheckedNote;
    }
    // For example: notes that have already been hit are not missable
    isMissable(note) {
        return note.state === _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].DEFAULT;
    }
    isNoteMissedAndNotHandled(note, currentTimeInSeconds) {
        let missBoundary = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getMissBoundaryInSeconds"])(currentTimeInSeconds, this.config);
        return note.timeInSeconds < missBoundary && note.state === _note__WEBPACK_IMPORTED_MODULE_2__["NoteState"].DEFAULT;
    }
    handleMissedNote(trackNumber, indexOfMissedNote, currentTimeInSeconds) {
        let track = this.noteManager.tracks[trackNumber];
        let missedNote = track[indexOfMissedNote];
        this.handleAccuracyEvent({
            accuracyName: this.config.accuracySettings[0].name,
            trackNumber: trackNumber,
            noteIndex: indexOfMissedNote,
            accuracyMillis: _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].MISS_ACCURACY_FLAG,
            timeInSeconds: currentTimeInSeconds,
            noteType: missedNote.type
        });
    }
}


/***/ }),

/***/ "./src/scripts/note.ts":
/*!*****************************!*\
  !*** ./src/scripts/note.ts ***!
  \*****************************/
/*! exports provided: NoteType, NoteState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoteType", function() { return NoteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoteState", function() { return NoteState; });
var NoteType;
(function (NoteType) {
    NoteType[NoteType["NONE"] = 0] = "NONE";
    NoteType[NoteType["NORMAL"] = 1] = "NORMAL";
    NoteType[NoteType["HOLD_HEAD"] = 2] = "HOLD_HEAD";
    NoteType[NoteType["TAIL"] = 3] = "TAIL";
    NoteType[NoteType["ROLL_HEAD"] = 4] = "ROLL_HEAD";
    NoteType[NoteType["MINE"] = 5] = "MINE";
    NoteType[NoteType["UNKNOWN"] = 6] = "UNKNOWN";
})(NoteType || (NoteType = {}));
var NoteState;
(function (NoteState) {
    NoteState[NoteState["DEFAULT"] = 0] = "DEFAULT";
    NoteState[NoteState["HIT"] = 1] = "HIT";
    NoteState[NoteState["MISSED"] = 2] = "MISSED";
    NoteState[NoteState["HELD"] = 3] = "HELD";
})(NoteState || (NoteState = {}));


/***/ }),

/***/ "./src/scripts/note_manager.ts":
/*!*************************************!*\
  !*** ./src/scripts/note_manager.ts ***!
  \*************************************/
/*! exports provided: NoteManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoteManager", function() { return NoteManager; });
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");

class NoteManager {
    constructor(tracks) {
        this.tracks = tracks;
        this.removeUnsupportedNoteTypes();
        this.setAllNotesToDefaultState();
    }
    removeUnsupportedNoteTypes() {
        let supportedNoteTypes = [_note__WEBPACK_IMPORTED_MODULE_0__["NoteType"].TAIL, _note__WEBPACK_IMPORTED_MODULE_0__["NoteType"].HOLD_HEAD, _note__WEBPACK_IMPORTED_MODULE_0__["NoteType"].NORMAL];
        for (let trackNumber = 0; trackNumber < this.tracks.length; trackNumber++) {
            let track = this.tracks[trackNumber];
            for (let noteNumber = 0; noteNumber < track.length; noteNumber++) {
                let note = track[noteNumber];
                if (!supportedNoteTypes.includes(note.type)) {
                    track.splice(noteNumber, 1);
                    noteNumber--;
                }
            }
        }
    }
    setAllNotesToDefaultState() {
        for (let i = 0; i < this.tracks.length; i++) {
            for (let j = 0; j < this.tracks[i].length; j++) {
                this.tracks[i][j].state = _note__WEBPACK_IMPORTED_MODULE_0__["NoteState"].DEFAULT;
            }
        }
    }
    getNotesByTimeRange(leastTime, greatestTime, trackNumber) {
        let track = this.tracks[trackNumber];
        let firstFindResult = this.findIndexOfFirstNoteAfterTime(leastTime, track);
        if (firstFindResult < 0) {
            return { startIndex: -1, endIndexNotInclusive: -1 }; // no notes left after least time
        }
        let lastFindResult = this.findIndexOfFirstNoteAfterTime(greatestTime, track, firstFindResult);
        if (lastFindResult < 0) {
            lastFindResult = track.length; // greatestTime exceeds the end of the notes
        }
        if (firstFindResult === 0) {
            if (lastFindResult === 0) {
                return { startIndex: -1, endIndexNotInclusive: -1 }; // haven't seen first note
            }
            else {
                return { startIndex: 0, endIndexNotInclusive: lastFindResult }; // notes are just starting
            }
        }
        return { startIndex: firstFindResult, endIndexNotInclusive: lastFindResult };
    }
    // This function assumes that no two notes will have the same time in the same track
    findIndexOfFirstNoteAfterTime(keyTime, track, searchStart = 0) {
        for (let i = searchStart; i < track.length; i++) {
            if (track[i].timeInSeconds > keyTime) {
                return i;
            }
        }
        return -1;
    }
    getEarliestNote() {
        let earliestNote;
        for (let i = 0; i < this.tracks.length; i++) {
            if (this.tracks[i].length > 0) {
                let trackEarliestNote = this.tracks[i][0];
                if (earliestNote === undefined) {
                    earliestNote = trackEarliestNote;
                }
                else if (earliestNote.timeInSeconds > trackEarliestNote.timeInSeconds) {
                    earliestNote = trackEarliestNote;
                }
            }
        }
        return earliestNote;
    }
    getLatestNote() {
        let latestNote;
        for (let i = 0; i < this.tracks.length; i++) {
            if (this.tracks[i].length > 0) {
                let trackLatestNote = this.tracks[i][this.tracks[i].length - 1];
                if (latestNote === undefined) {
                    latestNote = trackLatestNote;
                }
                else if (latestNote.timeInSeconds < trackLatestNote.timeInSeconds) {
                    latestNote = trackLatestNote;
                }
            }
        }
        return latestNote;
    }
    getTotalNotes() {
        return this.tracks.reduce((sum, track) => sum + track.length, 0);
    }
    getNoteByIndex(noteIndex) {
        let currentNoteIndices = [];
        for (let i = 0; i < this.tracks.length; i++) {
            currentNoteIndices.push(0);
        }
        let currentNote;
        for (let i = 0; i <= noteIndex; i++) {
            let nextNotes = this.getNextNoteFromEachTrack(currentNoteIndices);
            let earliestNote = NoteManager.getEarliestNoteInArray(nextNotes);
            currentNoteIndices[earliestNote.trackNumber]++;
            currentNote = earliestNote;
        }
        return currentNote;
    }
    getNextNoteFromEachTrack(currentNoteIndices) {
        let nextNotes = [];
        for (let trackNumber = 0; trackNumber < this.tracks.length; trackNumber++) {
            let track = this.tracks[trackNumber];
            if (currentNoteIndices[trackNumber] < track.length) {
                nextNotes.push(track[currentNoteIndices[trackNumber]]);
            }
        }
        return nextNotes;
    }
    static getEarliestNoteInArray(notes) {
        let earliestNote = notes[0];
        for (let i = 1; i < notes.length; i++) {
            if (notes[i].timeInSeconds < earliestNote.timeInSeconds) {
                earliestNote = notes[i];
            }
        }
        return earliestNote;
    }
    hideAllNotesAfterIndex(noteIndex) {
        let currentNoteIndices = [];
        for (let i = 0; i < this.tracks.length; i++) {
            currentNoteIndices.push(0);
        }
        for (let i = 0; i <= noteIndex; i++) {
            let nextNotes = this.getNextNoteFromEachTrack(currentNoteIndices);
            let earliestNote = NoteManager.getEarliestNoteInArray(nextNotes);
            currentNoteIndices[earliestNote.trackNumber]++;
        }
        this.allowHoldTails(currentNoteIndices);
        for (let trackNumber = 0; trackNumber < currentNoteIndices.length; trackNumber++) {
            let track = this.tracks[trackNumber];
            for (let i = currentNoteIndices[trackNumber]; i < track.length; i++) {
                track[i].state = _note__WEBPACK_IMPORTED_MODULE_0__["NoteState"].HIT;
            }
        }
    }
    allowHoldTails(currentNoteIndices) {
        for (let trackNumber = 0; trackNumber < currentNoteIndices.length; trackNumber++) {
            let track = this.tracks[trackNumber];
            if (currentNoteIndices[trackNumber] < track.length) {
                let note = track[currentNoteIndices[trackNumber]];
                if (note.type === _note__WEBPACK_IMPORTED_MODULE_0__["NoteType"].TAIL) {
                    currentNoteIndices[trackNumber]++;
                }
            }
        }
    }
    getLatestUnhitNote() {
        let latestNotes = [];
        for (let trackNumber = 0; trackNumber < this.tracks.length; trackNumber++) {
            let latestUnhitNote = this.getLatestUnhitNoteInTrack(trackNumber);
            latestNotes.push(latestUnhitNote);
        }
        return NoteManager.getLatestNoteInArray(latestNotes);
    }
    getLatestUnhitNoteInTrack(trackNumber) {
        let track = this.tracks[trackNumber];
        let latestUnhitNote;
        for (let i = 0; i < track.length; i++) {
            if (track[i].state === _note__WEBPACK_IMPORTED_MODULE_0__["NoteState"].DEFAULT) {
                latestUnhitNote = track[i];
            }
            else {
                return latestUnhitNote;
            }
        }
        return latestUnhitNote;
    }
    static getLatestNoteInArray(notes) {
        let latestNote = notes[0];
        for (let i = 1; i < notes.length; i++) {
            if (notes[i].timeInSeconds > latestNote.timeInSeconds) {
                latestNote = notes[i];
            }
        }
        return latestNote;
    }
}


/***/ }),

/***/ "./src/scripts/note_skin.ts":
/*!**********************************!*\
  !*** ./src/scripts/note_skin.ts ***!
  \**********************************/
/*! exports provided: NoteColors, NoteSkin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoteColors", function() { return NoteColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoteSkin", function() { return NoteSkin; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");



class NoteColors {
    constructor(noteColors) {
        this.BLUE = noteColors.BLUE;
        this.CYAN = noteColors.CYAN;
        this.GREEN = noteColors.GREEN;
        this.GREY = noteColors.GREY;
        this.MAROON = noteColors.MAROON;
        this.OLIVE = noteColors.OLIVE;
        this.ORANGE = noteColors.ORANGE;
        this.PINK = noteColors.PINK;
        this.PURPLE = noteColors.PURPLE;
        this.RED = noteColors.RED;
        this.WHITE = noteColors.WHITE;
        this.YELLOW = noteColors.YELLOW;
    }
}
class NoteSkin {
    constructor(noteColors, connector, tail, receptor) {
        this.rotationAngles = new Map([
            [4, [270, 180, 0, 90]],
            [6, [270, 315, 180, 0, 45, 90]]
        ]);
        this.noteColors = noteColors;
        this.connectorTile = connector;
        this.tail = tail;
        this.receptor = receptor;
    }
    getNoteImage(beatFraction) {
        if (beatFraction < 4) {
            beatFraction = 4;
        }
        else if (beatFraction > 192) {
            beatFraction = 192;
        }
        switch (beatFraction) {
            case 4:
                return this.noteColors.RED;
            case 8:
                return this.noteColors.BLUE;
            case 12:
                return this.noteColors.MAROON;
            case 16:
                return this.noteColors.YELLOW;
            case 20:
                return this.noteColors.GREY;
            case 24:
                return this.noteColors.PINK;
            case 32:
                return this.noteColors.ORANGE;
            case 48:
                return this.noteColors.PURPLE;
            case 64:
                return this.noteColors.GREEN;
            case 96:
                return this.noteColors.WHITE;
            case 128:
                return this.noteColors.CYAN;
            case 192:
                return this.noteColors.OLIVE;
            default:
                return this.noteColors.OLIVE;
        }
    }
    // Returns true if able to draw note type, otherwise returns false
    drawNote(noteDraw) {
        switch (noteDraw.noteType) {
            case _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].NORMAL:
            case _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].HOLD_HEAD:
                let noteImage = this.getNoteImage(noteDraw.beatFraction);
                this.drawImageRotated(noteImage, noteDraw.trackNumber, noteDraw.numTracks, noteDraw.center.x, noteDraw.center.y, noteDraw.noteSize);
                break;
            case _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].TAIL:
                this.drawTail(this.tail, noteDraw.trackNumber, noteDraw.numTracks, noteDraw.center.x, noteDraw.center.y, noteDraw.noteSize);
                break;
            default:
                return false;
        }
        return true;
    }
    // Returns true if able to draw note type, otherwise returns false
    drawReceptor(trackNumber, numTracks, centerX, centerY, noteSize) {
        this.drawImageRotated(this.receptor, trackNumber, numTracks, centerX, centerY, noteSize);
        return true;
    }
    // Returns true if able to draw note type, otherwise returns false
    drawHoldConnector(centerX, drawStartY, drawEndY, noteStartY, noteEndY, noteSize) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        let sourceWidth = this.connectorTile.width;
        let sourceHeight = this.connectorTile.height;
        let scaledWidth = noteSize;
        let scaledHeight = scaledWidth / sourceWidth * sourceHeight;
        let connectorHeight = Math.abs(drawEndY - drawStartY);
        let endYOffset = this.getNoteEndOffset(noteEndY, drawEndY);
        let endPartialTileHeight = scaledHeight - (endYOffset % scaledHeight);
        endPartialTileHeight = Math.min(endPartialTileHeight, connectorHeight);
        let startPartialTileHeight = (connectorHeight - endPartialTileHeight) % scaledHeight;
        let numCompleteTiles = Math.round((connectorHeight - startPartialTileHeight - endPartialTileHeight) / scaledHeight);
        // The following block allows us to use the same drawing method for both upscroll and downscroll
        let bottomPartialTileHeight;
        let topPartialTileHeight;
        if (_index__WEBPACK_IMPORTED_MODULE_0__["global"].config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Up) {
            bottomPartialTileHeight = endPartialTileHeight;
            topPartialTileHeight = startPartialTileHeight;
        }
        else {
            bottomPartialTileHeight = startPartialTileHeight;
            topPartialTileHeight = endPartialTileHeight;
        }
        let drawMinY = Math.min(drawStartY, drawEndY);
        let drawMaxY = Math.max(drawStartY, drawEndY);
        let isReversed = _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Up;
        let isDrawnFromBottom = _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Up;
        if (endPartialTileHeight === connectorHeight) {
            isDrawnFromBottom = !isDrawnFromBottom;
        }
        this.drawPartialTile(centerX, drawMinY, scaledWidth, scaledHeight, sourceWidth, sourceHeight, topPartialTileHeight / scaledHeight, !isDrawnFromBottom, isReversed, p);
        this.drawCompleteTiles(centerX, drawMinY + topPartialTileHeight, scaledWidth, scaledHeight, numCompleteTiles, isReversed, p);
        this.drawPartialTile(centerX, drawMaxY - bottomPartialTileHeight, scaledWidth, scaledHeight, sourceWidth, sourceHeight, bottomPartialTileHeight / scaledHeight, isDrawnFromBottom, isReversed, p);
        return true;
    }
    drawTail(image, trackNumber, numTracks, centerX, centerY, noteSize) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        if (_index__WEBPACK_IMPORTED_MODULE_0__["global"].config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Up) {
            p.push();
            p.angleMode(p.DEGREES);
            p.translate(centerX, centerY);
            p.rotate(180);
            p.image(image, -noteSize / 2, -noteSize / 2, noteSize, noteSize);
            p.pop();
        }
        else {
            p.image(image, centerX - noteSize / 2, centerY - noteSize / 2, noteSize, noteSize);
        }
    }
    getNoteEndOffset(noteEndY, drawEndY) {
        let offset;
        if (_index__WEBPACK_IMPORTED_MODULE_0__["global"].config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_1__["ScrollDirection"].Up) {
            offset = noteEndY - drawEndY;
        }
        else {
            offset = drawEndY - noteEndY;
        }
        // This prevents the partial tile texture from stretching when the player hits a hold early
        offset = Math.max(0, offset);
        return offset;
    }
    drawCompleteTiles(centerX, leastY, scaledWidth, scaledHeight, numTiles, isReversed, p) {
        for (let i = 0; i < numTiles; i++) {
            p.push();
            p.angleMode(p.DEGREES);
            let centerY = leastY + i * scaledHeight + scaledHeight / 2;
            p.translate(centerX, centerY);
            if (isReversed) {
                p.rotate(180);
            }
            p.image(this.connectorTile, -scaledWidth / 2, -scaledHeight / 2, scaledWidth, scaledHeight);
            p.pop();
        }
    }
    drawPartialTile(centerX, topLeftY, scaledWidth, scaledHeight, sourceWidth, sourceHeight, heightPercent, isDrawnFromBottom, isReversed, p) {
        if (heightPercent <= 0) {
            return;
        }
        p.push();
        let destinationHeight = heightPercent * scaledHeight;
        let centerY = topLeftY + destinationHeight / 2;
        p.translate(centerX, centerY);
        if (isReversed) {
            p.angleMode(p.DEGREES);
            p.rotate(180);
        }
        if (isDrawnFromBottom) { // Draw from the bottom of the image
            p.image(this.connectorTile, -scaledWidth / 2, -destinationHeight / 2, scaledWidth, destinationHeight, 0, sourceHeight - heightPercent * sourceHeight, sourceWidth, heightPercent * sourceHeight);
        }
        else { // Draw from the top of the image
            p.image(this.connectorTile, -scaledWidth / 2, -destinationHeight / 2, scaledWidth, destinationHeight, 0, 0, sourceWidth, heightPercent * sourceHeight);
        }
        p.pop();
    }
    drawImageRotated(image, trackNumber, numTracks, centerX, centerY, noteSize) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.push();
        p.angleMode(p.DEGREES);
        p.translate(centerX, centerY);
        this.rotate(p, trackNumber, numTracks);
        p.image(image, -noteSize / 2, -noteSize / 2, noteSize, noteSize);
        p.pop();
    }
    rotate(p, trackNumber, numTracks) {
        if (this.rotationAngles.has(numTracks)) {
            p.rotate(this.rotationAngles.get(numTracks)[trackNumber]);
        }
        else {
            p.rotate(this.getDefaultRotationAngleInDegrees(trackNumber, numTracks));
        }
    }
    getDefaultRotationAngleInDegrees(trackNumber, numTracks) {
        let rotation = -90;
        let rotationPerTrack = 360 / numTracks;
        if (trackNumber < numTracks / 2) {
            rotation -= trackNumber * rotationPerTrack;
        }
        else {
            rotation += (trackNumber - numTracks / 2 + 1) * rotationPerTrack;
        }
        return rotation;
    }
}


/***/ }),

/***/ "./src/scripts/offline_storage_client/offline_storage.ts":
/*!***************************************************************!*\
  !*** ./src/scripts/offline_storage_client/offline_storage.ts ***!
  \***************************************************************/
/*! exports provided: OfflineStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OfflineStorage", function() { return OfflineStorage; });
/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! localforage */ "./node_modules/localforage/dist/localforage.js");
/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(localforage__WEBPACK_IMPORTED_MODULE_0__);

localforage__WEBPACK_IMPORTED_MODULE_0__["config"]({ name: "rhythm_game" });
// What if the user is in incognito mode?
class OfflineStorage {
    static getItem(key) {
        return localforage__WEBPACK_IMPORTED_MODULE_0__["getItem"](key);
    }
    static setItem(key, value) {
        // Return a Promise of type void even though the API returns a Promise of type string
        return localforage__WEBPACK_IMPORTED_MODULE_0__["setItem"](key, value).then(() => {
        });
    }
    static key(index) {
        return localforage__WEBPACK_IMPORTED_MODULE_0__["key"](index);
    }
    static iterate(iteratee) {
        return localforage__WEBPACK_IMPORTED_MODULE_0__["iterate"](iteratee);
    }
}


/***/ }),

/***/ "./src/scripts/offline_storage_client/offline_storage_client.ts":
/*!**********************************************************************!*\
  !*** ./src/scripts/offline_storage_client/offline_storage_client.ts ***!
  \**********************************************************************/
/*! exports provided: OfflineStorageClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OfflineStorageClient", function() { return OfflineStorageClient; });
/* harmony import */ var _storage_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../storage_util */ "./src/scripts/storage_util.ts");
/* harmony import */ var _offline_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./offline_storage */ "./src/scripts/offline_storage_client/offline_storage.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/scripts/config.ts");
/* harmony import */ var _replay_compressor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../replay_compressor */ "./src/scripts/replay_compressor.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./src/scripts/util.ts");





class OfflineStorageClient {
    static saveReplay(recording, noteManager, songTitle) {
        let newReplay = {
            songTitle: songTitle,
            numTracks: noteManager.tracks.length,
            numNotes: noteManager.getTotalNotes(),
            timestamp: Object(_util__WEBPACK_IMPORTED_MODULE_4__["getNowTimestamp"])(),
            compressedEntries: _replay_compressor__WEBPACK_IMPORTED_MODULE_3__["ReplayCompressor"].compress(recording.linearRecording)
        };
        let key = _storage_util__WEBPACK_IMPORTED_MODULE_0__["StorageUtil"].getKeyFromTracks(noteManager.tracks);
        return this.loadReplaysCompressed(key)
            .then((replays) => {
            replays.push(newReplay);
            let value = this.compressedReplaysToString(replays);
            console.log("saving replay to offline storage with key: \n" + key);
            return _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].setItem(key, value);
        })
            .catch((reason) => console.error(reason));
    }
    static compressedReplaysToString(compressedReplays) {
        return JSON.stringify(compressedReplays);
    }
    static getUncompressedReplay(compressedReplay) {
        return {
            songTitle: compressedReplay.songTitle,
            numTracks: compressedReplay.numTracks,
            numNotes: compressedReplay.numNotes,
            timestamp: compressedReplay.timestamp,
            entries: _replay_compressor__WEBPACK_IMPORTED_MODULE_3__["ReplayCompressor"].uncompress(compressedReplay.compressedEntries)
        };
    }
    static loadPBReplay(identifier, scoreProvider) {
        return this.loadReplays(identifier)
            .then((replays) => {
            if (replays.length === 0) {
                return null;
            }
            else {
                return this.getBestReplay(replays, scoreProvider);
            }
        });
    }
    static getBestReplay(replays, scoreProvider) {
        let bestScore = Number.NEGATIVE_INFINITY;
        let pbIndex = -1;
        for (let i = 0; i < replays.length; i++) {
            let score = scoreProvider.score(replays[i].entries).totalScore;
            if (score > bestScore) {
                bestScore = score;
                pbIndex = i;
            }
        }
        return replays[pbIndex];
    }
    static loadReplays(identifier) {
        return this.getKeyFromIdentifier(identifier)
            .then((key) => _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].getItem(key))
            .then((replayString) => {
            if (replayString !== null) {
                console.log("loaded replays");
                return this.stringToReplays(replayString);
            }
            else {
                console.log("no replays to load");
                return [];
            }
        });
    }
    static loadReplaysCompressed(key) {
        return _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].getItem(key)
            .then((replayString) => {
            if (replayString !== null) {
                console.log("loaded replays");
                return this.stringToCompressedReplays(replayString);
            }
            else {
                console.log("no replays to load");
                return [];
            }
        });
    }
    static getKeyFromIdentifier(identifier) {
        if (this.isTracks(identifier)) {
            return Promise.resolve(_storage_util__WEBPACK_IMPORTED_MODULE_0__["StorageUtil"].getKeyFromTracks(identifier));
        }
        else if (typeof identifier === "number") {
            return _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].key(identifier);
        }
        else {
            return Promise.resolve(identifier);
        }
    }
    static isTracks(object) {
        try {
            let firstNote = object[0][0];
            return firstNote.trackNumber !== undefined;
        }
        catch (e) {
            return false;
        }
    }
    static iterate(iteratee) {
        return _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].iterate(iteratee);
    }
    static stringToReplays(s) {
        let compressedReplays = JSON.parse(s);
        let replays = [];
        for (let i = 0; i < compressedReplays.length; i++) {
            replays.push(this.getUncompressedReplay(compressedReplays[i]));
        }
        return replays;
    }
    static stringToCompressedReplays(s) {
        return JSON.parse(s);
    }
    static saveConfig(config) {
        let configString = this.getConfigAsString(config);
        console.log("saving config to offline storage");
        return _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].setItem(OfflineStorageClient.CONFIG_STORAGE_KEY, configString);
    }
    static getConfigAsString(config) {
        let string = JSON.stringify(config);
        string = string.replace(',"keyBindings":{},', ',"keyBindings":' + this.stringifyKeyBindings(config) + ',');
        return string;
    }
    static stringifyKeyBindings(config) {
        let string = "[";
        config.keyBindings.forEach((value, key) => {
            string += "[" + key + "," + JSON.stringify(value) + "]";
        });
        string += "]";
        return string;
    }
    static loadConfig() {
        return _offline_storage__WEBPACK_IMPORTED_MODULE_1__["OfflineStorage"].getItem(OfflineStorageClient.CONFIG_STORAGE_KEY)
            .then((configString) => {
            let configJSON = JSON.parse(configString);
            configJSON.keyBindings = new Map(configJSON.keyBindings);
            let config = new _config__WEBPACK_IMPORTED_MODULE_2__["Config"](configJSON);
            console.log("Config loaded from offline storage");
            console.log(config);
            return config;
        }).catch(() => {
            console.log("No valid offline storage config found, returning default config");
            return new _config__WEBPACK_IMPORTED_MODULE_2__["Config"]({});
        });
    }
}
OfflineStorageClient.CONFIG_STORAGE_KEY = "config";


/***/ }),

/***/ "./src/scripts/p5_scene.ts":
/*!*********************************!*\
  !*** ./src/scripts/p5_scene.ts ***!
  \*********************************/
/*! exports provided: P5Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P5Scene", function() { return P5Scene; });
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p5 */ "p5");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _keyboard_event_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard_event_manager */ "./src/scripts/keyboard_event_manager.ts");
/* harmony import */ var _pages_options_preview_display__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/options/preview_display */ "./src/scripts/pages/options/preview_display.ts");
/* harmony import */ var _pages_page_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _note_skin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./note_skin */ "./src/scripts/note_skin.ts");







let width = 720;
let height = 480;
class P5Scene {
    constructor() {
        this.sketchInstance = new p5__WEBPACK_IMPORTED_MODULE_0__((p) => {
            let renderer;
            function centerCanvas() {
                // renderer.center(); // Disable this for now to make embedding work
            }
            p.preload = function () {
                let noteColors = new _note_skin__WEBPACK_IMPORTED_MODULE_6__["NoteColors"]({
                    BLUE: p.loadImage("../assets/arrow_blue.png"),
                    CYAN: p.loadImage("../assets/arrow_cyan.png"),
                    GREEN: p.loadImage("../assets/arrow_green.png"),
                    GREY: p.loadImage("../assets/arrow_grey.png"),
                    MAROON: p.loadImage("../assets/arrow_maroon.png"),
                    OLIVE: p.loadImage("../assets/arrow_olive.png"),
                    ORANGE: p.loadImage("../assets/arrow_orange.png"),
                    PINK: p.loadImage("../assets/arrow_pink.png"),
                    PURPLE: p.loadImage("../assets/arrow_purple.png"),
                    RED: p.loadImage("../assets/arrow_red.png"),
                    WHITE: p.loadImage("../assets/arrow_white.png"),
                    YELLOW: p.loadImage("../assets/arrow_yellow.png")
                });
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].noteSkin = new _note_skin__WEBPACK_IMPORTED_MODULE_6__["NoteSkin"](noteColors, p.loadImage("../assets/connector_tile_resize.png"), p.loadImage("../assets/tail_square.png"), p.loadImage("../assets/arrow_receptor.png"));
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].playFromFileBackground = p.loadImage("../assets/play_from_file_background.jpg");
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].optionsBackground = _index__WEBPACK_IMPORTED_MODULE_4__["global"].playFromFileBackground;
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].meterNeedle = p.loadImage("../assets/meter_needle.png");
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].meterFont = p.loadFont("../assets/RobotoMono-Bold.ttf");
            };
            p.setup = function () {
                renderer = p.createCanvas(width, height);
                renderer.addClass(_index__WEBPACK_IMPORTED_MODULE_4__["global"].globalClass);
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].keyboardEventManager = new _keyboard_event_manager__WEBPACK_IMPORTED_MODULE_1__["KeyboardEventManager"](p);
                _index__WEBPACK_IMPORTED_MODULE_4__["global"].previewDisplay = new _pages_options_preview_display__WEBPACK_IMPORTED_MODULE_2__["PreviewDisplay"](Object(_util__WEBPACK_IMPORTED_MODULE_5__["generatePreviewNotes"])(4), _index__WEBPACK_IMPORTED_MODULE_4__["global"].config, _index__WEBPACK_IMPORTED_MODULE_4__["global"].p5Scene);
                renderer.style('display', 'block'); // Makes the canvas be able to fill the whole browser window
                centerCanvas();
            };
            p.draw = function () {
                p.clear();
                _pages_page_manager__WEBPACK_IMPORTED_MODULE_3__["PageManager"].draw();
            };
            p.windowResized = function () {
                centerCanvas();
            };
        });
    }
}


/***/ }),

/***/ "./src/scripts/page_controls.ts":
/*!**************************************!*\
  !*** ./src/scripts/page_controls.ts ***!
  \**************************************/
/*! exports provided: PageControls */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageControls", function() { return PageControls; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui_util */ "./src/scripts/ui_util.ts");



class PageControls {
    static create(associatedMenuId, paginatedList) {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        let pageControlsDiv = _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].create(() => {
            return p.createDiv();
        }, "pageControlsDiv");
        if (!pageControlsDiv.alreadyExists) {
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementClasses"])(pageControlsDiv.element, _index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass, "page-controls");
        }
        let previousPageButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].create(() => {
            return p.createButton("&#8249;");
        }, "previousPageButton");
        if (!previousPageButton.alreadyExists) {
            previousPageButton.element.mouseClicked(() => {
                paginatedList.previousPage();
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].removeElementById(associatedMenuId);
                pageNumberText.element.html("Page " + (paginatedList.getCurrentPage() + 1));
            });
            previousPageButton.element.addClass("page-control-button");
            pageControlsDiv.element.child(previousPageButton.element);
        }
        let pageNumberText = _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].create(() => {
            let textContainer = p.createElement("span");
            textContainer.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
            return textContainer;
        }, "pageNumberText");
        if (!pageNumberText.alreadyExists) {
            pageControlsDiv.element.child(pageNumberText.element);
            pageNumberText.element.html("Page " + (paginatedList.getCurrentPage() + 1));
        }
        let nextPageButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].create(() => {
            return p.createButton("&#8250;");
        }, "nextPageButton");
        if (!nextPageButton.alreadyExists) {
            nextPageButton.element.mouseClicked(() => {
                paginatedList.nextPage();
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].removeElementById(associatedMenuId);
                pageNumberText.element.html("Page " + (paginatedList.getCurrentPage() + 1));
            });
            nextPageButton.element.addClass("page-control-button");
            pageControlsDiv.element.child(nextPageButton.element);
        }
        return pageControlsDiv;
    }
}


/***/ }),

/***/ "./src/scripts/pages/experiment/experiment.ts":
/*!****************************************************!*\
  !*** ./src/scripts/pages/experiment/experiment.ts ***!
  \****************************************************/
/*! exports provided: Experiment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Experiment", function() { return Experiment; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");

class Experiment {
    static draw() {
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance.background("black");
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].experimentDisplay.draw();
    }
}


/***/ }),

/***/ "./src/scripts/pages/experiment/experiment_display.ts":
/*!************************************************************!*\
  !*** ./src/scripts/pages/experiment/experiment_display.ts ***!
  \************************************************************/
/*! exports provided: ExperimentDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExperimentDisplay", function() { return ExperimentDisplay; });
/* harmony import */ var _display_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../display_manager */ "./src/scripts/display_manager.ts");
/* harmony import */ var _note_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../note_manager */ "./src/scripts/note_manager.ts");
/* harmony import */ var _miss_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../miss_manager */ "./src/scripts/miss_manager.ts");
/* harmony import */ var _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../accuracy_manager */ "./src/scripts/accuracy_manager.ts");
/* harmony import */ var _scroll_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../scroll_manager */ "./src/scripts/scroll_manager.ts");
/* harmony import */ var _play_results_results_display__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../play_results/results_display */ "./src/scripts/pages/play_results/results_display.ts");
/* harmony import */ var _hold_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hold_manager */ "./src/scripts/hold_manager.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../accuracy_feedback_text */ "./src/scripts/accuracy_feedback_text.ts");
/* harmony import */ var _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../receptor_shrink_reaction */ "./src/scripts/receptor_shrink_reaction.ts");
/* harmony import */ var _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../accuracy_feedback_flash */ "./src/scripts/accuracy_feedback_flash.ts");
/* harmony import */ var _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../accuracy_feedback_particles */ "./src/scripts/accuracy_feedback_particles.ts");
/* harmony import */ var _hold_particles__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hold_particles */ "./src/scripts/hold_particles.ts");
/* harmony import */ var _hold_glow__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hold_glow */ "./src/scripts/hold_glow.ts");
/* harmony import */ var _playing_config__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../playing_config */ "./src/scripts/playing_config.ts");
/* harmony import */ var _game_time_manager__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../game_time_manager */ "./src/scripts/game_time_manager.ts");
/* harmony import */ var _combo_text__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../combo_text */ "./src/scripts/combo_text.ts");
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _error_bar__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../error_bar */ "./src/scripts/error_bar.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../note */ "./src/scripts/note.ts");
/* harmony import */ var _play_results_play_results__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../play_results/play_results */ "./src/scripts/pages/play_results/play_results.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../rectangle */ "./src/scripts/rectangle.ts");
/* harmony import */ var _player_key_action__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../player_key_action */ "./src/scripts/player_key_action.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _note_generator__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./note_generator */ "./src/scripts/pages/experiment/note_generator.ts");




























class ExperimentDisplay {
    constructor(tracks, config, scene, returnPage, songTitle) {
        this.isDebugMode = false;
        this.bounds = _rectangle__WEBPACK_IMPORTED_MODULE_24__["Rectangle"].fromTopLeft((scene.sketchInstance.width - 240) / 2, (scene.sketchInstance.height - 480) / 2, 240, 480);
        this.songTitle = songTitle;
        this.showResultsScreen = false;
        this.config = config;
        this.scene = scene;
        this.returnPage = returnPage;
        this.noteManager = new _note_manager__WEBPACK_IMPORTED_MODULE_1__["NoteManager"](tracks);
        let numTracks = this.noteManager.tracks.length;
        this.accuracyRecording = new _accuracy_recording__WEBPACK_IMPORTED_MODULE_10__["AccuracyRecording"](numTracks);
        this.noteGenerator = new _note_generator__WEBPACK_IMPORTED_MODULE_27__["NoteGenerator"](this.noteManager);
        this.displayConfig = new _playing_config__WEBPACK_IMPORTED_MODULE_17__["PlayingConfig"](this.config, numTracks);
        this.displayManager = new _display_manager__WEBPACK_IMPORTED_MODULE_0__["DisplayManager"](this.noteManager, this.displayConfig, this.scene.sketchInstance, this.bounds);
        this.holdParticles = new _hold_particles__WEBPACK_IMPORTED_MODULE_15__["HoldParticles"](this.config, numTracks, this.displayManager);
        this.holdGlow = new _hold_glow__WEBPACK_IMPORTED_MODULE_16__["HoldGlow"](this.config, numTracks, this.displayManager);
        this.holdManager = new _hold_manager__WEBPACK_IMPORTED_MODULE_6__["HoldManager"](numTracks, this.onTrackHold.bind(this), this.onTrackUnhold.bind(this));
        this.gameEndTime = Infinity;
        this.accuracyManager = new _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__["AccuracyManager"](this.noteManager, this.config, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.missManager = new _miss_manager__WEBPACK_IMPORTED_MODULE_2__["MissManager"](this.config, this.noteManager, this.accuracyRecording, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.accuracyFeedbackText = new _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_11__["AccuracyFeedbackText"](this.bounds.center, this.config);
        this.comboText = new _combo_text__WEBPACK_IMPORTED_MODULE_19__["ComboText"](new _point_2d__WEBPACK_IMPORTED_MODULE_20__["Point2D"](this.bounds.center.x, this.bounds.center.y + 18), this.config);
        this.accuracyFeedbackFlash = new _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_13__["AccuracyFeedbackFlash"](this.config, this.displayManager, numTracks);
        this.receptorShrinkReaction = new _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_12__["ReceptorShrinkReaction"](this.config, this.displayConfig, numTracks);
        this.accuracyFeedbackParticles = new _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_14__["AccuracyFeedbackParticles"](this.config, this.displayManager, numTracks);
        this.errorBar = new _error_bar__WEBPACK_IMPORTED_MODULE_21__["ErrorBar"](this.config);
        if (!Object(_util__WEBPACK_IMPORTED_MODULE_7__["isKeyBindingsDefined"])(numTracks)) {
            Object(_util__WEBPACK_IMPORTED_MODULE_7__["initializeKeyBindings"])(numTracks);
        }
        this.bindKeyBindingsToActions();
        if (!this.isDebugMode) {
            this.timeManager = new _game_time_manager__WEBPACK_IMPORTED_MODULE_18__["GameTimeManager"](this.config);
        }
        else {
            this.timeManager = new _scroll_manager__WEBPACK_IMPORTED_MODULE_4__["ScrollManager"](this.config, this.scene.sketchInstance);
        }
    }
    endSong() {
        _index__WEBPACK_IMPORTED_MODULE_8__["global"].resultsDisplay = new _play_results_results_display__WEBPACK_IMPORTED_MODULE_5__["ResultsDisplay"](this.config, this.noteManager, this.scene.sketchInstance, this.accuracyRecording, undefined, this.songTitle, this.returnPage);
        this.unbindKeys();
        clearInterval(this.timeDiffInterval);
        _play_results_play_results__WEBPACK_IMPORTED_MODULE_23__["PlayResults"].messageFromLastPlay = {
            accuracyRecording: this.accuracyRecording,
            noteManager: this.noteManager,
            returnPage: this.returnPage,
            songTitle: this.songTitle,
            saveEnabled: false
        };
        _page_manager__WEBPACK_IMPORTED_MODULE_9__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_9__["Pages"].PLAY_RESULTS);
    }
    handleAccuracyEvent(accuracyEvent) {
        this.accuracyRecording.update(accuracyEvent);
        this.accuracyFeedbackParticles.update(accuracyEvent);
        this.accuracyFeedbackText.update(accuracyEvent);
        this.accuracyFeedbackFlash.update(accuracyEvent);
        this.comboText.update(accuracyEvent);
        this.errorBar.update(accuracyEvent);
        this.noteGenerator.update(accuracyEvent);
        this.handleMiss(accuracyEvent);
    }
    draw() {
        let currentTimeInSeconds = this.timeManager.getCurrentTimeInSeconds(performance.now());
        if (currentTimeInSeconds >= this.gameEndTime && !this.showResultsScreen) {
            this.accuracyRecording.state = _accuracy_recording__WEBPACK_IMPORTED_MODULE_10__["AccuracyRecordingState"].READY;
            this.endSong();
        }
        this.missManager.update(currentTimeInSeconds);
        this.displayManager.draw(currentTimeInSeconds);
        this.receptorShrinkReaction.draw();
        if (this.config.isAccuracyTextEnabled) {
            this.accuracyFeedbackText.draw(currentTimeInSeconds);
        }
        if (this.config.isComboTextEnabled) {
            this.comboText.draw(currentTimeInSeconds);
        }
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.draw(currentTimeInSeconds);
        }
        if (this.config.isAccuracyFlashEnabled) {
            this.accuracyFeedbackFlash.draw(currentTimeInSeconds);
        }
        if (this.config.isAccuracyParticlesEnabled) {
            this.accuracyFeedbackParticles.draw(currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.draw(currentTimeInSeconds);
        }
        if (this.config.isErrorBarEnabled) {
            this.errorBar.draw(currentTimeInSeconds);
        }
        this.noteGenerator.draw(currentTimeInSeconds);
    }
    bindKeyBindingsToActions() {
        let keyBindings = _index__WEBPACK_IMPORTED_MODULE_8__["global"].config.keyBindings.get(this.noteManager.tracks.length);
        let isSpacebarBound = false;
        let spacebarKeyCode = 32;
        for (let i = 0; i < keyBindings.length; i++) {
            let keyBinding = keyBindings[i];
            if (keyBinding.keyCode === spacebarKeyCode) {
                isSpacebarBound = true;
            }
            _index__WEBPACK_IMPORTED_MODULE_8__["global"].keyboardEventManager.bindKeyToAction(keyBinding.keyCode, () => this.handlePlayerKeyEvent(new _player_key_action__WEBPACK_IMPORTED_MODULE_25__["PlayerKeyEvent"](this.timeManager.getCurrentTimeInSeconds(performance.now()), keyBinding.trackNumber, _player_key_action__WEBPACK_IMPORTED_MODULE_25__["KeyState"].DOWN)), () => this.handlePlayerKeyEvent(new _player_key_action__WEBPACK_IMPORTED_MODULE_25__["PlayerKeyEvent"](this.timeManager.getCurrentTimeInSeconds(performance.now()), keyBinding.trackNumber, _player_key_action__WEBPACK_IMPORTED_MODULE_25__["KeyState"].UP)));
        }
        _index__WEBPACK_IMPORTED_MODULE_8__["global"].keyboardEventManager.bindKeyToAction(_index__WEBPACK_IMPORTED_MODULE_8__["global"].config.quitKey, () => {
            this.endSong();
        });
        if (!isSpacebarBound) {
            // bind key to nothing to make sure the default behavior is prevented
            _index__WEBPACK_IMPORTED_MODULE_8__["global"].keyboardEventManager.bindKeyToAction(spacebarKeyCode, () => {
            });
        }
    }
    handlePlayerKeyEvent(playerKeyEvent) {
        this.receptorShrinkReaction.update(playerKeyEvent);
        this.accuracyManager.handlePlayerKeyEvent(playerKeyEvent);
    }
    onTrackHold(trackNumber, currentTimeInSeconds) {
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.holdTrack.call(this.holdGlow, trackNumber, currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.holdTrack.call(this.holdParticles, trackNumber, currentTimeInSeconds);
        }
    }
    onTrackUnhold(trackNumber, currentTimeInSeconds) {
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.unholdTrack.call(this.holdGlow, trackNumber, currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.unholdTrack.call(this.holdParticles, trackNumber, currentTimeInSeconds);
        }
    }
    unbindKeys() {
        _index__WEBPACK_IMPORTED_MODULE_8__["global"].keyboardEventManager.unbindKey(_index__WEBPACK_IMPORTED_MODULE_8__["global"].config.quitKey);
        let keyBindings = _index__WEBPACK_IMPORTED_MODULE_8__["global"].config.keyBindings.get(this.noteManager.tracks.length);
        for (let i = 0; i < keyBindings.length; i++) {
            let keyBinding = keyBindings[i];
            _index__WEBPACK_IMPORTED_MODULE_8__["global"].keyboardEventManager.unbindKey(keyBinding.keyCode);
        }
    }
    handleMiss(accuracyEvent) {
        if (!_accuracy_util__WEBPACK_IMPORTED_MODULE_26__["AccuracyUtil"].eventIsAMiss(accuracyEvent, this.config)) {
            return;
        }
        let track = this.noteManager.tracks[accuracyEvent.trackNumber];
        let missedNote = track[accuracyEvent.noteIndex];
        missedNote.state = _note__WEBPACK_IMPORTED_MODULE_22__["NoteState"].MISSED;
        if (missedNote.type === _note__WEBPACK_IMPORTED_MODULE_22__["NoteType"].TAIL) {
            if (this.holdManager.isTrackHeld(accuracyEvent.trackNumber)) {
                // Force a hold release upon missing the tail
                this.holdManager.unholdTrack(accuracyEvent.trackNumber, accuracyEvent.timeInSeconds);
            }
        }
        else if (missedNote.type === _note__WEBPACK_IMPORTED_MODULE_22__["NoteType"].HOLD_HEAD) {
            let nextNote = track[accuracyEvent.noteIndex + 1];
            if (nextNote !== undefined) {
                if (nextNote.type === _note__WEBPACK_IMPORTED_MODULE_22__["NoteType"].TAIL) {
                    nextNote.state = _note__WEBPACK_IMPORTED_MODULE_22__["NoteState"].MISSED; // Miss the tail when you miss the head
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/scripts/pages/experiment/note_generator.ts":
/*!********************************************************!*\
  !*** ./src/scripts/pages/experiment/note_generator.ts ***!
  \********************************************************/
/*! exports provided: NoteGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoteGenerator", function() { return NoteGenerator; });
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../note */ "./src/scripts/note.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _score_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../score_provider */ "./src/scripts/score_provider.ts");




class NoteGenerator {
    constructor(noteManager) {
        this.numTracks = 4;
        this.lastNoteTimeInSeconds = 1.0;
        this.maxNoteSpacingInSeconds = 2;
        this.lastDrawTimeInSeconds = 0;
        this.spacingEasing = 0.85;
        this.lastNoteTrack = -1;
        this.noteManager = noteManager;
        this.targetNoteSpacingInSeconds = this.maxNoteSpacingInSeconds;
        this.currentNoteSpacingInSeconds = this.maxNoteSpacingInSeconds;
        this.scoreProvider = new _score_provider__WEBPACK_IMPORTED_MODULE_3__["ScoreProvider"](_index__WEBPACK_IMPORTED_MODULE_2__["global"].config, undefined);
        this.scoreMemory = [];
    }
    update(accuracyEvent) {
        let eventScore = this.scoreProvider.scoreEntry(accuracyEvent);
        this.scoreMemory.push(eventScore);
        let maxLength = 5;
        if (this.scoreMemory.length > maxLength) {
            this.scoreMemory.shift();
        }
        let currentAverageScore = Object(_util__WEBPACK_IMPORTED_MODULE_1__["mean"])(this.scoreMemory);
        let targetAverageScore = 48;
        let maxPositive = this.scoreProvider.scoreEntry({ accuracyMillis: 0 }) - targetAverageScore;
        let maxNegative = -10;
        let averageScoreDifference = currentAverageScore - targetAverageScore;
        averageScoreDifference = Object(_util__WEBPACK_IMPORTED_MODULE_1__["clampValueToRange"])(averageScoreDifference, maxNegative, maxPositive);
        console.log(averageScoreDifference);
        let updateIncrement = this.targetNoteSpacingInSeconds * 0.2 * this.targetNoteSpacingInSeconds;
        let incrementRatio = Object(_util__WEBPACK_IMPORTED_MODULE_1__["mapLinear"])(maxPositive, maxNegative, -1, 1, averageScoreDifference);
        console.log(incrementRatio);
        // let extraReward = 1;
        // let extraPenalty = 2.2;
        // if (incrementRatio > 0) {
        //     incrementRatio *= extraPenalty;
        // } else if (incrementRatio < 0) {
        //     incrementRatio *= extraReward;
        // }
        this.targetNoteSpacingInSeconds += updateIncrement * incrementRatio;
        if (this.targetNoteSpacingInSeconds > this.maxNoteSpacingInSeconds) {
            this.targetNoteSpacingInSeconds = this.maxNoteSpacingInSeconds;
        }
    }
    draw(currentTimeInSeconds) {
        this.moveTowardsTargetNoteSpacing(currentTimeInSeconds);
        this.drawText();
        if (this.lastNoteTimeInSeconds - currentTimeInSeconds < 2) {
            let nextNoteTrack;
            do {
                nextNoteTrack = Object(_util__WEBPACK_IMPORTED_MODULE_1__["getRandomIntInclusive"])(0, this.numTracks - 1);
            } while (nextNoteTrack == this.lastNoteTrack);
            this.addNote(nextNoteTrack, this.lastNoteTimeInSeconds + this.currentNoteSpacingInSeconds);
            this.lastNoteTrack = nextNoteTrack;
            this.lastNoteTimeInSeconds += this.currentNoteSpacingInSeconds;
        }
        this.lastDrawTimeInSeconds = currentTimeInSeconds;
    }
    moveTowardsTargetNoteSpacing(currentTimeInSeconds) {
        let timeDifferenceInSeconds = currentTimeInSeconds - this.lastDrawTimeInSeconds;
        let ratio = timeDifferenceInSeconds / this.spacingEasing;
        this.currentNoteSpacingInSeconds =
            Object(_util__WEBPACK_IMPORTED_MODULE_1__["lerp"])(this.currentNoteSpacingInSeconds, this.targetNoteSpacingInSeconds, ratio);
    }
    drawText() {
        let p = _index__WEBPACK_IMPORTED_MODULE_2__["global"].p5Scene.sketchInstance;
        p.push();
        p.fill("white");
        p.text((1 / this.currentNoteSpacingInSeconds).toFixed(2), 200, 10);
        p.text((1 / this.targetNoteSpacingInSeconds).toFixed(2), 200, 30);
        p.pop();
    }
    addNote(trackNumber, noteTime) {
        let note = {
            type: _note__WEBPACK_IMPORTED_MODULE_0__["NoteType"].NORMAL,
            state: _note__WEBPACK_IMPORTED_MODULE_0__["NoteState"].DEFAULT,
            timeInSeconds: noteTime,
            trackNumber: trackNumber,
            beatFraction: 4
        };
        this.noteManager.tracks[trackNumber].push(note);
    }
}


/***/ }),

/***/ "./src/scripts/pages/experiment_start/experiment_config.ts":
/*!*****************************************************************!*\
  !*** ./src/scripts/pages/experiment_start/experiment_config.ts ***!
  \*****************************************************************/
/*! exports provided: ExperimentConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExperimentConfig", function() { return ExperimentConfig; });
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");





class ExperimentConfig {
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["drawHeading"])();
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_1__["global"].playFromFileBackground);
        let playButtonId = "playButton";
        let playButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_2__["DOMWrapper"].create(() => {
            return p.createButton("Play");
        }, playButtonId);
        if (!playButton.alreadyExists) {
            playButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            ExperimentConfig.setPlayButtonBehavior(playButton.element);
        }
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["setElementCenterPositionRelative"])(playButton.element, 0.5, 0.5, 79, 30);
    }
    static setPlayButtonBehavior(playButton) {
        playButton.mouseClicked(() => {
            Object(_util__WEBPACK_IMPORTED_MODULE_3__["initExperimentDisplay"])(4, _page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].EXPERIMENT_CONFIG, "Experiment");
            _page_manager__WEBPACK_IMPORTED_MODULE_4__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].EXPERIMENT);
        });
    }
}


/***/ }),

/***/ "./src/scripts/pages/leaderboard/leaderboard.ts":
/*!******************************************************!*\
  !*** ./src/scripts/pages/leaderboard/leaderboard.ts ***!
  \******************************************************/
/*! exports provided: Leaderboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Leaderboard", function() { return Leaderboard; });
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _radio_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../radio_table */ "./src/scripts/radio_table.ts");
/* harmony import */ var _page_controls__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../page_controls */ "./src/scripts/page_controls.ts");
/* harmony import */ var _leaderboard_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./leaderboard_list */ "./src/scripts/pages/leaderboard/leaderboard_list.ts");






let leaderboardList = new _leaderboard_list__WEBPACK_IMPORTED_MODULE_5__["LeaderboardList"]();
class Leaderboard {
    static initialize(songhash) {
        leaderboardList.kickOffLoadLeaderboard(_index__WEBPACK_IMPORTED_MODULE_1__["global"].config, songhash);
    }
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["drawHeading"])();
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_1__["global"].playFromFileBackground);
        let leaderboardId = "leaderboard";
        let statusTextId = "statusText";
        if (leaderboardList.state !== _leaderboard_list__WEBPACK_IMPORTED_MODULE_5__["LeaderboardListState"].READY) {
            let statusText = this.createStatusText(statusTextId);
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(statusText.element, 0.50, 0.21, 600, 38);
        }
        else {
            _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].removeElementById(statusTextId);
            let pageControls = _page_controls__WEBPACK_IMPORTED_MODULE_4__["PageControls"].create(leaderboardId, leaderboardList).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(pageControls, 0.5, 0.3, 140, 30);
            let storageMenu = _radio_table__WEBPACK_IMPORTED_MODULE_3__["RadioTable"].create(leaderboardId, 630, 300, [15, 60, 25], ["Rank", "User", "Score"], leaderboardList.currentContents).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(storageMenu, 0.5, 0.60, 630, 260);
        }
    }
    static createStatusText(uniqueId) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let div = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            let container = p.createDiv();
            container.addClass(Leaderboard.LEADERBOARD_CLASS);
            container.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            return container;
        }, uniqueId);
        div.element.html(this.getStatus());
        return div;
    }
    static getStatus() {
        switch (leaderboardList.state) {
            case _leaderboard_list__WEBPACK_IMPORTED_MODULE_5__["LeaderboardListState"].NO_SCORES:
            case _leaderboard_list__WEBPACK_IMPORTED_MODULE_5__["LeaderboardListState"].LOADING:
                return "Loading...";
            case _leaderboard_list__WEBPACK_IMPORTED_MODULE_5__["LeaderboardListState"].ERROR:
            default:
                return "Failed to load leaderboard";
        }
    }
}
Leaderboard.LEADERBOARD_CLASS = "play-from-online";


/***/ }),

/***/ "./src/scripts/pages/leaderboard/leaderboard_list.ts":
/*!***********************************************************!*\
  !*** ./src/scripts/pages/leaderboard/leaderboard_list.ts ***!
  \***********************************************************/
/*! exports provided: LeaderboardListState, LeaderboardList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeaderboardListState", function() { return LeaderboardListState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeaderboardList", function() { return LeaderboardList; });
/* harmony import */ var _paginated_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../paginated_list */ "./src/scripts/paginated_list.ts");
/* harmony import */ var _database_client_database_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../database_client/database_client */ "./src/scripts/database_client/database_client.ts");


var LeaderboardListState;
(function (LeaderboardListState) {
    LeaderboardListState[LeaderboardListState["NO_SCORES"] = 0] = "NO_SCORES";
    LeaderboardListState[LeaderboardListState["LOADING"] = 1] = "LOADING";
    LeaderboardListState[LeaderboardListState["READY"] = 2] = "READY";
    LeaderboardListState[LeaderboardListState["ERROR"] = 3] = "ERROR";
})(LeaderboardListState || (LeaderboardListState = {}));
class LeaderboardList extends _paginated_list__WEBPACK_IMPORTED_MODULE_0__["PaginatedList"] {
    constructor() {
        super();
        this.songhash = "";
        this.state = LeaderboardListState.NO_SCORES;
    }
    initializeClient(config) {
        try {
            this.databaseClient = new _database_client_database_client__WEBPACK_IMPORTED_MODULE_1__["DatabaseClient"](config.username, config.password);
        }
        catch (error) {
            this.databaseClientError();
        }
    }
    databaseClientError() {
        this.state = LeaderboardListState.ERROR;
        console.error("Failed to initialize database client.");
    }
    clientInitialized() {
        return this.databaseClient !== undefined;
    }
    kickOffLoadLeaderboard(config, songhash) {
        if (!this.clientInitialized()) {
            this.initializeClient(config);
        }
        if (this.clientInitialized()) {
            this.songhash = songhash;
            this.state = LeaderboardListState.LOADING;
            this.databaseClient.query({ songhash: songhash })
                .then((response) => this.initializeDisplayedList(response))
                .catch((err) => this.displayedListError(err));
        }
    }
    displayedListError(err) {
        this.state = LeaderboardListState.ERROR;
        console.log("Encountered an error while preparing leaderboard.");
        console.log(err);
    }
    initializeDisplayedList(response) {
        this.allContents = [];
        let entries = response.entries;
        for (let i = 0; i < entries.length; i++) {
            let entry = entries[i];
            let entryColumns = this.entryToColumns(entry, i);
            this.allContents.push(entryColumns);
        }
        this.setPage(0);
        this.state = LeaderboardListState.READY;
    }
    entryToColumns(entry, index) {
        let score = entry.score.toFixed(2) + "%";
        let rank = (index + 1).toString();
        return [rank, entry.user, score];
    }
}


/***/ }),

/***/ "./src/scripts/pages/login/login.ts":
/*!******************************************!*\
  !*** ./src/scripts/pages/login/login.ts ***!
  \******************************************/
/*! exports provided: Login */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Login", function() { return Login; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p5 */ "p5");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");






class Login {
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["drawHeading"])();
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_0__["global"].playFromFileBackground);
        let config = _index__WEBPACK_IMPORTED_MODULE_0__["global"].config;
        let usernameInput = Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["createLabeledInput"])("Username", "usernameInput", this.blankIfUndefined(config.username), Login.LOGIN_CLASS);
        // @ts-ignore
        let usernameInputDiv = new p5__WEBPACK_IMPORTED_MODULE_1__["Element"](usernameInput.element.parent());
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(usernameInputDiv, 0.50, 0.35, 500, 38);
        let passwordInput = Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["createLabeledInput"])("Password", "passwordInput", this.obfuscate(config.password), Login.LOGIN_CLASS);
        // @ts-ignore
        let passwordInputDiv = new p5__WEBPACK_IMPORTED_MODULE_1__["Element"](passwordInput.element.parent());
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(passwordInputDiv, 0.50, 0.50, 500, 38);
        let submitButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
            return p.createButton("Submit");
        }, "submitButton");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(submitButton.element, 0.50, 0.65, 62, 33);
        if (!submitButton.alreadyExists) {
            submitButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
            submitButton.element.addClass(Login.LOGIN_CLASS);
            submitButton.element.mouseClicked(() => {
                let username = usernameInput.element.value();
                let password = passwordInput.element.value();
                if (this.isString(username) && this.isString(password)) {
                    config.username = username;
                    if (!this.isObfuscated(password)) {
                        config.password = password;
                    }
                    _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_5__["OfflineStorageClient"].saveConfig(config)
                        .then(() => _page_manager__WEBPACK_IMPORTED_MODULE_4__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].OPTIONS));
                }
            });
        }
    }
    static obfuscate(s) {
        if (s === undefined) {
            return "";
        }
        let obfuscated = "";
        for (let i = 0; i < s.length; i++) {
            obfuscated += "•";
        }
        return obfuscated;
    }
    static blankIfUndefined(s) {
        if (s === undefined) {
            return "";
        }
        return s;
    }
    static isString(value) {
        return typeof value === "string";
    }
    static isObfuscated(s) {
        return s.includes("•");
    }
}
Login.LOGIN_CLASS = "login";


/***/ }),

/***/ "./src/scripts/pages/options/key_bindings_ui.ts":
/*!******************************************************!*\
  !*** ./src/scripts/pages/options/key_bindings_ui.ts ***!
  \******************************************************/
/*! exports provided: KeyBindingsUi */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBindingsUi", function() { return KeyBindingsUi; });
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _key_binding_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../key_binding_helper */ "./src/scripts/key_binding_helper.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _preview_display__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./preview_display */ "./src/scripts/pages/options/preview_display.ts");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./options */ "./src/scripts/pages/options/options.ts");
/* harmony import */ var _ticker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ticker */ "./src/scripts/pages/options/ticker.ts");








class KeyBindingsUi {
    static resetNumTracks() {
        this.numTracks = KeyBindingsUi.DEFAULT_NUM_TRACKS;
    }
    static create(parentElement, pageStyleClass) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let keyBindingsSectionHeader = this.createKeyBindingsSectionHeader();
        if (!keyBindingsSectionHeader.alreadyExists) {
            parentElement.child(keyBindingsSectionHeader.element);
        }
        if (this.numTracks === undefined) {
            this.numTracks = this.DEFAULT_NUM_TRACKS;
        }
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_4__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_4__["createLabeledInput"])("Number of Tracks", "previewNumTracksInput", this.numTracks.toString(), _options__WEBPACK_IMPORTED_MODULE_6__["Options"].OPTIONS_CLASS), this.isValidNumberOfTracks.bind(this), this.showNumberOfTracksInfo.bind(this), this.showNumberOfTracksError.bind(this), (input) => {
            KeyBindingsUi.removeOldBindingButtons(this.numTracks);
            this.numTracks = Object(_util__WEBPACK_IMPORTED_MODULE_3__["getInt"])(input);
            this.regeneratePreview();
        }, parentElement);
        let keyBindingsQuickstartButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            return p.createButton("Key-Bindings Quickstart");
        }, "keyBindingsQuickstartButton");
        if (!keyBindingsQuickstartButton.alreadyExists) {
            let keyBindingsQuickstartId = "keybindings-quickstart";
            keyBindingsQuickstartButton.element.addClass(pageStyleClass);
            keyBindingsQuickstartButton.element.addClass("full-width-button");
            keyBindingsQuickstartButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            keyBindingsQuickstartButton.element.id(keyBindingsQuickstartId);
            keyBindingsQuickstartButton.element.mousePressed(() => {
                let keybindingHelper = new _key_binding_helper__WEBPACK_IMPORTED_MODULE_2__["KeyBindingHelper"](this.numTracks);
                this.scrollKeyBindingIntoView(0);
                this.indicateWaitingForKey(p, 0);
                // Bind this action to the "-1" key so that it happens on any key press
                _index__WEBPACK_IMPORTED_MODULE_1__["global"].keyboardEventManager.bindKeyToAction(-1, () => {
                    // Ignore this code because it's used to indicate input that's not yet finished processing
                    if (p.keyCode !== 229) {
                        keybindingHelper.bindNext(p, keyBindingsQuickstartId);
                    }
                });
            });
            parentElement.child(keyBindingsQuickstartButton.element);
        }
        if (!Object(_util__WEBPACK_IMPORTED_MODULE_3__["isKeyBindingsDefined"])(this.numTracks)) {
            Object(_util__WEBPACK_IMPORTED_MODULE_3__["initializeKeyBindings"])(this.numTracks);
        }
        for (let trackNumber = 0; trackNumber < this.numTracks; trackNumber++) {
            let keyBindingInput = this.createKeyBindingInput(trackNumber, this.numTracks, pageStyleClass);
            if (!keyBindingInput.alreadyExists) {
                parentElement.child(keyBindingInput.element);
            }
        }
    }
    static createKeyBindingsSectionHeader() {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            let container = p.createDiv();
            container.html('Key Bindings <span style="font-size:12px">(track 1 is the leftmost track)</span>');
            container.addClass("options-free-text");
            container.addClass(_options__WEBPACK_IMPORTED_MODULE_6__["Options"].OPTIONS_CLASS);
            container.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            return container;
        }, "keyBindingsSectionHeader");
        return container;
    }
    static isValidNumberOfTracks(value) {
        let numberValue = Object(_util__WEBPACK_IMPORTED_MODULE_3__["getInt"])(value);
        return Number.isInteger(numberValue) && numberValue > 0 && numberValue <= 26;
    }
    static showNumberOfTracksInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Show options for the number of note tracks you'll be playing with.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showNumberOfTracksError() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Error: must be an integer number between 1 and 26.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].ERROR);
    }
    static createKeyBindingInput(trackNumber, numTracks, customClass) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let setButtonId = this.getKeyBindingButtonId(trackNumber, numTracks);
        let keybindingInputClass = "keybinding-input";
        let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            let container = p.createDiv();
            container.addClass(customClass);
            container.addClass(keybindingInputClass);
            container.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            let label = Object(_ui_util__WEBPACK_IMPORTED_MODULE_4__["createLabel"])(p, "");
            label.addClass(customClass);
            label.addClass(keybindingInputClass);
            label.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            label.parent(container);
            let setButton = p.createButton("Set");
            setButton.parent(container);
            setButton.id(setButtonId);
            setButton.mousePressed(() => {
                this.indicateWaitingForKey(p, trackNumber);
                _index__WEBPACK_IMPORTED_MODULE_1__["global"].keyboardEventManager.bindKeyToAction(-1, () => {
                    // Ignore this code because it's used to indicate input that's not yet finished processing
                    if (p.keyCode !== 229) {
                        Object(_util__WEBPACK_IMPORTED_MODULE_3__["setConfigKeyBinding"])(trackNumber, numTracks, { trackNumber: trackNumber, keyCode: p.keyCode, string: Object(_util__WEBPACK_IMPORTED_MODULE_3__["getKeyString"])(p) });
                        this.noLongerWaitingForKey(setButton);
                        _index__WEBPACK_IMPORTED_MODULE_1__["global"].keyboardEventManager.unbindKey(-1);
                    }
                });
            });
            setButton.addClass(customClass);
            setButton.addClass(keybindingInputClass);
            setButton.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            return container;
        }, this.getKeyBindingButtonId(trackNumber, numTracks));
        let trackBindingInfo = Object(_util__WEBPACK_IMPORTED_MODULE_3__["findBindingInfoForTrack"])(trackNumber, _index__WEBPACK_IMPORTED_MODULE_1__["global"].config.keyBindings.get(numTracks));
        let keyString = trackBindingInfo.string;
        let labelString = 'Track ' + (trackNumber + 1) + ': <span class="' +
            keybindingInputClass + " " + customClass + " " + _index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass +
            '">' + keyString + '</span>';
        let labelElement = Object(_util__WEBPACK_IMPORTED_MODULE_3__["getFirstElementByTagName"])(container.element, "LABEL");
        labelElement.html(labelString);
        return container;
    }
    static indicateWaitingForKey(p, trackNumber) {
        let setButtons = [];
        for (let i = 0; i < this.numTracks; i++) {
            setButtons.push(this.getSetButton(p, i, this.numTracks));
        }
        for (let i = 0; i < this.numTracks; i++) {
            let setButton = setButtons[i];
            if (i === trackNumber) {
                setButton.html(this.SET_BUTTON_ACTIVE_TEXT);
            }
            else {
                setButton.html(this.SET_BUTTON_INACTIVE_TEXT);
            }
        }
    }
    static getSetButton(p, trackNumber, numTracks) {
        let setButtonId = this.getKeyBindingButtonId(trackNumber, numTracks);
        return p.select("#" + setButtonId);
    }
    static noLongerWaitingForKey(setButton) {
        setButton.html(this.SET_BUTTON_INACTIVE_TEXT);
    }
    static noLongerWaitingForLastKey(p) {
        let setButton = this.getSetButton(p, this.numTracks - 1, this.numTracks);
        setButton.html(this.SET_BUTTON_INACTIVE_TEXT);
    }
    static getKeyBindingButtonId(trackNumber, numTracks) {
        return this.getKeyBindingUniqueId(trackNumber, numTracks) + "Button";
    }
    static getKeyBindingUniqueId(trackNumber, numTracks) {
        return "track" + trackNumber + "Of" + numTracks + "Binding";
    }
    static scrollKeyBindingIntoView(trackNumber) {
        let keyBindingButtonId = this.getKeyBindingButtonId(trackNumber, this.numTracks);
        document.getElementById(keyBindingButtonId).parentElement.scrollIntoView();
    }
    static removeOldBindingButtons(numTracks) {
        for (let trackNumber = 0; trackNumber < numTracks; trackNumber++) {
            _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].removeElementById(this.getKeyBindingButtonId(trackNumber, numTracks));
        }
    }
    static regeneratePreview() {
        _index__WEBPACK_IMPORTED_MODULE_1__["global"].previewDisplay = new _preview_display__WEBPACK_IMPORTED_MODULE_5__["PreviewDisplay"](Object(_util__WEBPACK_IMPORTED_MODULE_3__["generatePreviewNotes"])(this.numTracks), _index__WEBPACK_IMPORTED_MODULE_1__["global"].config, _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene);
    }
}
KeyBindingsUi.SET_BUTTON_INACTIVE_TEXT = "Set";
KeyBindingsUi.SET_BUTTON_ACTIVE_TEXT = "Press Any Key";
KeyBindingsUi.DEFAULT_NUM_TRACKS = 4;


/***/ }),

/***/ "./src/scripts/pages/options/options.ts":
/*!**********************************************!*\
  !*** ./src/scripts/pages/options/options.ts ***!
  \**********************************************/
/*! exports provided: Options */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../scroll_direction */ "./src/scripts/scroll_direction.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../accuracy_manager */ "./src/scripts/accuracy_manager.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./src/scripts/config.ts");
/* harmony import */ var _key_bindings_ui__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./key_bindings_ui */ "./src/scripts/pages/options/key_bindings_ui.ts");
/* harmony import */ var _ticker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ticker */ "./src/scripts/pages/options/ticker.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");











class Options {
    static draw() {
        let p = _index__WEBPACK_IMPORTED_MODULE_2__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_2__["global"].optionsBackground);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["drawHeading"])();
        let scrollDiv = _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__["DOMWrapper"].create(() => {
            return p.createDiv();
        }, "scrollDiv");
        if (!scrollDiv.alreadyExists) {
            scrollDiv.element.addClass("options-scroll-div");
            scrollDiv.element.addClass(Options.OPTIONS_CLASS);
            scrollDiv.element.addClass(_index__WEBPACK_IMPORTED_MODULE_2__["global"].globalClass);
        }
        // @ts-ignore
        let canvasPosition = p._renderer.position();
        scrollDiv.element.position(canvasPosition.x + 335, canvasPosition.y + 45);
        let resetConfigButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__["DOMWrapper"].create(() => {
            return p.createButton("Reset To Default");
        }, "resetConfigButton");
        if (!resetConfigButton.alreadyExists) {
            resetConfigButton.element.addClass(Options.OPTIONS_CLASS);
            resetConfigButton.element.addClass("full-width-button");
            resetConfigButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_2__["global"].globalClass);
            resetConfigButton.element.mousePressed(() => {
                _index__WEBPACK_IMPORTED_MODULE_2__["global"].config = new _config__WEBPACK_IMPORTED_MODULE_5__["Config"]({});
                _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
                _key_bindings_ui__WEBPACK_IMPORTED_MODULE_6__["KeyBindingsUi"].resetNumTracks();
                _key_bindings_ui__WEBPACK_IMPORTED_MODULE_6__["KeyBindingsUi"].regeneratePreview();
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__["DOMWrapper"].clearRegistry();
            });
            scrollDiv.element.child(resetConfigButton.element);
        }
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledInput"])("Pause at Start (sec)", "pauseAtStartInSecondsInput", _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.pauseAtStartInSeconds.toString(), Options.OPTIONS_CLASS), this.isValidPauseAtStart.bind(this), this.showPauseAtStartInfo.bind(this), this.showPauseAtStartError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.pauseAtStartInSeconds = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(input);
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledInput"])("Scroll Speed (px/sec)", "scrollSpeedInput", _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.pixelsPerSecond.toString(), Options.OPTIONS_CLASS), this.isValidScrollSpeed.bind(this), this.showScrollSpeedInfo.bind(this), this.showScrollSpeedError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.pixelsPerSecond = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(input);
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Scroll Direction", "scrollDirectionSelect", _scroll_direction__WEBPACK_IMPORTED_MODULE_0__["ScrollDirection"], _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.scrollDirection, Options.OPTIONS_CLASS), this.isValidScrollDirection.bind(this), this.showScrollDirectionInfo.bind(this), this.showScrollDirectionError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.scrollDirection = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _scroll_direction__WEBPACK_IMPORTED_MODULE_0__["ScrollDirection"]);
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledInput"])("Receptor Position (%)", "receptorPositionInput", _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.receptorYPercent.toString(), Options.OPTIONS_CLASS), this.isValidReceptorPosition.bind(this), this.showReceptorPositionInfo.bind(this), this.showReceptorPositionError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.receptorYPercent = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(input);
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledInput"])("Note Size (px)", "noteSizeInput", _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.noteSize.toString(), Options.OPTIONS_CLASS), this.isValidNoteSize.bind(this), this.showNoteSizeInfo.bind(this), this.showNoteSizeError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.noteSize = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(input);
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledInput"])("Note Spacing (px)", "noteSpacingInput", _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.noteSpacing.toString(), Options.OPTIONS_CLASS), this.isValidNoteSpacing.bind(this), this.showNoteSpacingInfo.bind(this), this.showNoteSpacingError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.noteSpacing = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(input);
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledInput"])("Accuracy Offset (ms)", "additionalOffsetInput", (_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.additionalOffsetInSeconds * 1000).toString(), Options.OPTIONS_CLASS), this.isValidAdditionalOffset.bind(this), this.showAdditionalOffsetInfo.bind(this), this.showAdditionalOffsetError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.additionalOffsetInSeconds = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(input) / 1000;
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledTextArea"])("Accuracy Settings", "accuracySettingsInput", JSON.stringify(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.accuracySettings, null, 3), Options.OPTIONS_CLASS), this.isValidAccuracySettings.bind(this), this.showAccuracySettingsInfo.bind(this), this.showAccuracySettingsError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.accuracySettings = parseAccuracySettingsJson(String(input));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Accuracy Flash", "accuracyFlashEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isAccuracyFlashEnabled), Options.OPTIONS_CLASS), this.isValidAccuracyFlash.bind(this), this.showAccuracyFlashInfo.bind(this), this.showAccuracyFlashError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isAccuracyFlashEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Accuracy Particles", "accuracyParticlesEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isAccuracyParticlesEnabled), Options.OPTIONS_CLASS), this.isValidAccuracyParticles.bind(this), this.showAccuracyParticlesInfo.bind(this), this.showAccuracyParticlesError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isAccuracyParticlesEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Accuracy Text", "accuracyTextEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isAccuracyTextEnabled), Options.OPTIONS_CLASS), this.isValidAccuracyText.bind(this), this.showAccuracyTextInfo.bind(this), this.showAccuracyTextError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isAccuracyTextEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Hold Particles", "holdParticlesEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isHoldParticlesEnabled), Options.OPTIONS_CLASS), this.isValidHoldParticles.bind(this), this.showHoldParticlesInfo.bind(this), this.showHoldParticlesError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isHoldParticlesEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Hold Glow", "holdGlowEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isHoldGlowEnabled), Options.OPTIONS_CLASS), this.isValidHoldGlow.bind(this), this.showHoldGlowInfo.bind(this), this.showHoldGlowError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isHoldGlowEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Combo Text", "comboTextEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isComboTextEnabled), Options.OPTIONS_CLASS), this.isValidComboText.bind(this), this.showComboTextInfo.bind(this), this.showComboTextError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isComboTextEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Live Comparison", "liveComparisonEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isLiveComparisonEnabled), Options.OPTIONS_CLASS), this.isValidLiveComparison.bind(this), this.showLiveComparisonInfo.bind(this), this.showLiveComparisonError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isLiveComparisonEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Error Bar", "errorBarEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isErrorBarEnabled), Options.OPTIONS_CLASS), this.isValidErrorBar.bind(this), this.showErrorBarInfo.bind(this), this.showErrorBarError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isErrorBarEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createUserInput"])(() => Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["createLabeledSelect"])("Error Bar Background", "errorBarBackgroundEnabledSelect", _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"], Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["booleanToYesNo"])(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isErrorBarBackgroundEnabled), Options.OPTIONS_CLASS), this.isValidErrorBarBackground.bind(this), this.showErrorBarBackgroundInfo.bind(this), this.showErrorBarBackgroundError.bind(this), (input) => {
            _index__WEBPACK_IMPORTED_MODULE_2__["global"].config.isErrorBarBackgroundEnabled = Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["yesNoToBoolean"])(Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(input, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]));
            _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_10__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_2__["global"].config);
        }, scrollDiv.element);
        let loginButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__["DOMWrapper"].create(() => {
            return p.createButton("Set Username/Password");
        }, "loginButton");
        if (!loginButton.alreadyExists) {
            loginButton.element.addClass(Options.OPTIONS_CLASS);
            loginButton.element.addClass("full-width-button");
            loginButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_2__["global"].globalClass);
            loginButton.element.mousePressed(() => {
                _page_manager__WEBPACK_IMPORTED_MODULE_9__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_9__["Pages"].LOGIN);
            });
            scrollDiv.element.child(loginButton.element);
        }
        _key_bindings_ui__WEBPACK_IMPORTED_MODULE_6__["KeyBindingsUi"].create(scrollDiv.element, Options.OPTIONS_CLASS);
        _index__WEBPACK_IMPORTED_MODULE_2__["global"].previewDisplay.draw();
        let ticker = _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].create(this.DEFAULT_TICKER_MESSAGE, Options.OPTIONS_CLASS);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementToBottom"])(ticker.element, 4.2, 12, 8);
    }
    static isValidPauseAtStart(value) {
        return this.isFloatGreaterThanOrEqualZero(value);
    }
    static showPauseAtStartInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Delay the start of the song to give yourself more time to get ready.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showPauseAtStartError() {
        this.showNumberNotGreaterThanOrEqualZeroError();
    }
    static isValidScrollSpeed(value) {
        return this.isFloatGreaterThanZero(value);
    }
    static showScrollSpeedInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("The movement speed of the notes. Higher values will make the notes look farther apart.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showScrollSpeedError() {
        this.showNumberNotGreaterThanZeroError();
    }
    static isValidScrollDirection(value) {
        let enumValue = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(value, _scroll_direction__WEBPACK_IMPORTED_MODULE_0__["ScrollDirection"]);
        return enumValue !== undefined;
    }
    static showScrollDirectionInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Controls which way the arrows go.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showScrollDirectionError() {
        this.showSelectError();
    }
    static isValidReceptorPosition(value) {
        return this.isFloat(value);
    }
    static showReceptorPositionInfo() {
        let oppositeDirection;
        if (_index__WEBPACK_IMPORTED_MODULE_2__["global"].config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_0__["ScrollDirection"].Down) {
            oppositeDirection = "up";
        }
        else {
            oppositeDirection = "down";
        }
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Increase this value to move the receptors " + oppositeDirection + ".", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showReceptorPositionError() {
        this.showValueNotNumberError();
    }
    static isValidNoteSize(value) {
        return this.isFloatGreaterThanZero(value);
    }
    static showNoteSizeInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Increase this number to make the notes and receptors bigger.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showNoteSizeError() {
        this.showNumberNotGreaterThanZeroError();
    }
    static isValidNoteSpacing(value) {
        return this.isFloat(value);
    }
    static showNoteSpacingInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Increase this separate the notes farther apart horizontally.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showNoteSpacingError() {
        this.showValueNotNumberError();
    }
    static isValidAdditionalOffset(value) {
        return this.isFloat(value);
    }
    static showAdditionalOffsetInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Shifts the time position of all the notes. Use this to help synchronize the music.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showAdditionalOffsetError() {
        this.showValueNotNumberError();
    }
    static isValidAccuracySettings(value) {
        let stringValue = String(value);
        return parseAccuracySettingsJson(stringValue) !== null;
    }
    static showAccuracySettingsInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Controls what happens when you hit a note too early, too late, or exactly right.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showAccuracySettingsError() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Error: unable to parse the JSON text.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].ERROR);
    }
    static isValidAccuracyFlash(value) {
        return this.isValidYesNo(value);
    }
    static showAccuracyFlashInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("A flash effect that shows on the receptors when you hit a note.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showAccuracyFlashError() {
        this.showSelectError();
    }
    static isValidAccuracyParticles(value) {
        return this.isValidYesNo(value);
    }
    static showAccuracyParticlesInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Particles that shoot out of the receptors when you hit a note.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showAccuracyParticlesError() {
        this.showSelectError();
    }
    static isValidAccuracyText(value) {
        return this.isValidYesNo(value);
    }
    static showAccuracyTextInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Text that pops up telling you what accuracy you hit a note with.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showAccuracyTextError() {
        this.showSelectError();
    }
    static isValidHoldParticles(value) {
        return this.isValidYesNo(value);
    }
    static showHoldParticlesInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Particles that shoot out while you're holding a note.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showHoldParticlesError() {
        this.showSelectError();
    }
    static isValidHoldGlow(value) {
        return this.isValidYesNo(value);
    }
    static showHoldGlowInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("A glow effect on the receptors that shows when you're holding a note.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showHoldGlowError() {
        this.showSelectError();
    }
    static isValidComboText(value) {
        return this.isValidYesNo(value);
    }
    static showComboTextInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Text that pops up telling you how many notes you have hit in a row.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showComboTextError() {
        this.showSelectError();
    }
    static isValidLiveComparison(value) {
        return this.isValidYesNo(value);
    }
    static showLiveComparisonInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("A colored vertical gauge that indicates how well you're doing compared to your personal best.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showLiveComparisonError() {
        this.showSelectError();
    }
    static isValidErrorBar(value) {
        return this.isValidYesNo(value);
    }
    static showErrorBarInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("A colored horizontal bar that displays the accuracy of your recent hits.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showErrorBarError() {
        this.showSelectError();
    }
    static isValidErrorBarBackground(value) {
        return this.isValidYesNo(value);
    }
    static showErrorBarBackgroundInfo() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Displays a colored bar in the background of the accuracy tick marks on the error bar.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].INFORMATION);
    }
    static showErrorBarBackgroundError() {
        this.showSelectError();
    }
    static isFloatGreaterThanOrEqualZero(value) {
        let numberValue = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(value);
        return !isNaN(numberValue) && numberValue >= 0;
    }
    static showNumberNotGreaterThanOrEqualZeroError() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Error: must be a number greater than or equal to zero.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].ERROR);
    }
    static isFloatGreaterThanZero(value) {
        let numberValue = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(value);
        return !isNaN(numberValue) && numberValue > 0;
    }
    static showNumberNotGreaterThanZeroError() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Error: must be a number greater than zero.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].ERROR);
    }
    static isValidYesNo(value) {
        let enumValue = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getEnum"])(value, _ui_util__WEBPACK_IMPORTED_MODULE_1__["YesNo"]);
        return enumValue !== undefined;
    }
    static showSelectError() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Error: huh... not sure how you did that.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].ERROR);
    }
    static showValueNotNumberError() {
        _ticker__WEBPACK_IMPORTED_MODULE_7__["Ticker"].setMessage("Error: must be a number.", _ticker__WEBPACK_IMPORTED_MODULE_7__["TickerState"].ERROR);
    }
    static isFloat(value) {
        let numberValue = Object(_util__WEBPACK_IMPORTED_MODULE_8__["getFloat"])(value);
        return !isNaN(numberValue);
    }
}
Options.OPTIONS_CLASS = "options";
Options.DEFAULT_TICKER_MESSAGE = "All the options! Click an option to show more information about it.";
function parseAccuracySettingsJson(accuracySettingsJson) {
    try {
        let accuracySettings = [];
        let jsonArray = JSON.parse(accuracySettingsJson);
        for (let i = 0; i < jsonArray.length; i++) {
            let accuracy = jsonArray[i];
            // this fails if the user gave the wrong input
            accuracySettings.push(new _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__["Accuracy"](accuracy.name, accuracy.lowerBound, accuracy.upperBound));
        }
        return accuracySettings;
    }
    catch (e) {
    }
    return null;
}


/***/ }),

/***/ "./src/scripts/pages/options/preview_display.ts":
/*!******************************************************!*\
  !*** ./src/scripts/pages/options/preview_display.ts ***!
  \******************************************************/
/*! exports provided: PreviewDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreviewDisplay", function() { return PreviewDisplay; });
/* harmony import */ var _display_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../display_manager */ "./src/scripts/display_manager.ts");
/* harmony import */ var _note_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../note_manager */ "./src/scripts/note_manager.ts");
/* harmony import */ var _scroll_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../scroll_manager */ "./src/scripts/scroll_manager.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../rectangle */ "./src/scripts/rectangle.ts");




class PreviewDisplay {
    constructor(tracks, config, scene) {
        this.bounds = _rectangle__WEBPACK_IMPORTED_MODULE_3__["Rectangle"].fromTopLeft(45, 46, 240, 400);
        this.config = config;
        this.scene = scene;
        this.noteManager = new _note_manager__WEBPACK_IMPORTED_MODULE_1__["NoteManager"](tracks);
        this.scrollManager = new _scroll_manager__WEBPACK_IMPORTED_MODULE_2__["ScrollManager"](this.config, this.scene.sketchInstance, this.bounds);
        this.displayConfig = this.getDisplayConfig(this.config, this.noteManager.tracks.length);
        this.displayManager = new _display_manager__WEBPACK_IMPORTED_MODULE_0__["DisplayManager"](this.noteManager, this.displayConfig, this.scene.sketchInstance, this.bounds);
    }
    draw() {
        let currentTimeInSeconds = this.scrollManager.getCurrentTimeInSeconds();
        this.displayManager.draw(currentTimeInSeconds);
    }
    // We need the display config to update when any changes are made to the Config
    getDisplayConfig(config, numTracks) {
        return {
            getNoteSize: () => {
                return config.noteSize;
            },
            getNoteSpacing: () => {
                return config.noteSpacing;
            },
            getPixelsPerSecond: () => {
                return config.pixelsPerSecond;
            },
            getReceptorYPercent: () => {
                return config.receptorYPercent;
            },
            getScrollDirection: () => {
                return config.scrollDirection;
            },
            getReceptorSizes: () => {
                let receptorSizes = [];
                for (let i = 0; i < numTracks; i++) {
                    receptorSizes.push(config.noteSize);
                }
                return receptorSizes;
            },
            setReceptorSize: (trackNumber, receptorSize) => {
            }
        };
    }
}


/***/ }),

/***/ "./src/scripts/pages/options/ticker.ts":
/*!*********************************************!*\
  !*** ./src/scripts/pages/options/ticker.ts ***!
  \*********************************************/
/*! exports provided: TickerState, Ticker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TickerState", function() { return TickerState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ticker", function() { return Ticker; });
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");



var TickerState;
(function (TickerState) {
    TickerState[TickerState["INFORMATION"] = 0] = "INFORMATION";
    TickerState[TickerState["ERROR"] = 1] = "ERROR";
})(TickerState || (TickerState = {}));
class Ticker {
    static create(defaultMessage, customClass) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let tickerSpan = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            return p.createElement("span", defaultMessage);
        }, "tickerSpan");
        let tickerDiv = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            return p.createDiv();
        }, "tickerDiv");
        if (this.isInitializing(tickerDiv, tickerSpan)) {
            this.initialize(tickerDiv.element, tickerSpan.element);
        }
        this.setStyle(customClass);
        return tickerDiv;
    }
    static isInitializing(element1, element2) {
        return !element1.alreadyExists || !element2.alreadyExists;
    }
    static initialize(div, span) {
        this.state = TickerState.INFORMATION;
        div.child(span);
        this.div = div;
        this.span = span;
    }
    static setMessage(message, tickerState) {
        this.span.html(message);
        this.state = tickerState;
    }
    static setStyle(customClass) {
        if (this.state === TickerState.INFORMATION) {
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementClasses"])(this.div, _index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass, customClass, this.informationClass);
        }
        else if (this.state === TickerState.ERROR) {
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementClasses"])(this.div, _index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass, customClass, this.errorClass);
        }
    }
}
Ticker.informationClass = "ticker-info";
Ticker.errorClass = "ticker-error";


/***/ }),

/***/ "./src/scripts/pages/page_manager.ts":
/*!*******************************************!*\
  !*** ./src/scripts/pages/page_manager.ts ***!
  \*******************************************/
/*! exports provided: PageDescription, Pages, PageManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageDescription", function() { return PageDescription; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pages", function() { return Pages; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageManager", function() { return PageManager; });
/* harmony import */ var _play_from_file_play_from_file__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./play_from_file/play_from_file */ "./src/scripts/pages/play_from_file/play_from_file.ts");
/* harmony import */ var _options_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./options/options */ "./src/scripts/pages/options/options.ts");
/* harmony import */ var _play_play__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./play/play */ "./src/scripts/pages/play/play.ts");
/* harmony import */ var _play_results_play_results__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./play_results/play_results */ "./src/scripts/pages/play_results/play_results.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _play_from_online_play_from_online__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./play_from_online/play_from_online */ "./src/scripts/pages/play_from_online/play_from_online.ts");
/* harmony import */ var _sync_sync__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sync/sync */ "./src/scripts/pages/sync/sync.ts");
/* harmony import */ var _sync_results_sync_results__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sync_results/sync_results */ "./src/scripts/pages/sync_results/sync_results.ts");
/* harmony import */ var _storage_storage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./storage/storage */ "./src/scripts/pages/storage/storage.ts");
/* harmony import */ var _leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./leaderboard/leaderboard */ "./src/scripts/pages/leaderboard/leaderboard.ts");
/* harmony import */ var _login_login__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./login/login */ "./src/scripts/pages/login/login.ts");
/* harmony import */ var _storage_replays__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./storage/replays */ "./src/scripts/pages/storage/replays.ts");
/* harmony import */ var _replay_replay__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./replay/replay */ "./src/scripts/pages/replay/replay.ts");
/* harmony import */ var _experiment_experiment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./experiment/experiment */ "./src/scripts/pages/experiment/experiment.ts");
/* harmony import */ var _experiment_start_experiment_config__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./experiment_start/experiment_config */ "./src/scripts/pages/experiment_start/experiment_config.ts");















class PageDescription {
    constructor(name, draw) {
        this.name = name;
        this.draw = draw;
    }
}
class Pages {
}
Pages.PLAY_FROM_FILE = new PageDescription("Play From File", _play_from_file_play_from_file__WEBPACK_IMPORTED_MODULE_0__["PlayFromFile"].draw.bind(_play_from_file_play_from_file__WEBPACK_IMPORTED_MODULE_0__["PlayFromFile"]));
Pages.OPTIONS = new PageDescription("Options", _options_options__WEBPACK_IMPORTED_MODULE_1__["Options"].draw.bind(_options_options__WEBPACK_IMPORTED_MODULE_1__["Options"]));
Pages.PLAY = new PageDescription("Play", _play_play__WEBPACK_IMPORTED_MODULE_2__["Play"].draw.bind(_play_play__WEBPACK_IMPORTED_MODULE_2__["Play"]));
Pages.PLAY_RESULTS = new PageDescription("Play Results", _play_results_play_results__WEBPACK_IMPORTED_MODULE_3__["PlayResults"].draw.bind(_play_results_play_results__WEBPACK_IMPORTED_MODULE_3__["PlayResults"]));
Pages.PLAY_FROM_ONLINE = new PageDescription("Play From Online", _play_from_online_play_from_online__WEBPACK_IMPORTED_MODULE_5__["PlayFromOnline"].draw.bind(_play_from_online_play_from_online__WEBPACK_IMPORTED_MODULE_5__["PlayFromOnline"]));
Pages.SYNC = new PageDescription("Sync", _sync_sync__WEBPACK_IMPORTED_MODULE_6__["Sync"].draw.bind(_sync_sync__WEBPACK_IMPORTED_MODULE_6__["Sync"]));
Pages.SYNC_RESULTS = new PageDescription("Sync Results", _sync_results_sync_results__WEBPACK_IMPORTED_MODULE_7__["SyncResults"].draw.bind(_sync_results_sync_results__WEBPACK_IMPORTED_MODULE_7__["SyncResults"]));
Pages.STORAGE = new PageDescription("Storage", _storage_storage__WEBPACK_IMPORTED_MODULE_8__["Storage"].draw.bind(_storage_storage__WEBPACK_IMPORTED_MODULE_8__["Storage"]));
Pages.REPLAYS = new PageDescription("Replays", _storage_replays__WEBPACK_IMPORTED_MODULE_11__["Replays"].draw.bind(_storage_replays__WEBPACK_IMPORTED_MODULE_11__["Replays"]));
Pages.LEADERBOARD = new PageDescription("Leaderboard", _leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_9__["Leaderboard"].draw.bind(_leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_9__["Leaderboard"]));
Pages.LOGIN = new PageDescription("Login", _login_login__WEBPACK_IMPORTED_MODULE_10__["Login"].draw.bind(_login_login__WEBPACK_IMPORTED_MODULE_10__["Login"]));
Pages.REPLAY = new PageDescription("Replay", _replay_replay__WEBPACK_IMPORTED_MODULE_12__["Replay"].draw.bind(_replay_replay__WEBPACK_IMPORTED_MODULE_12__["Replay"]));
Pages.EXPERIMENT = new PageDescription("Experiment", _experiment_experiment__WEBPACK_IMPORTED_MODULE_13__["Experiment"].draw.bind(_experiment_experiment__WEBPACK_IMPORTED_MODULE_13__["Experiment"]));
Pages.EXPERIMENT_CONFIG = new PageDescription("Experiment Config", _experiment_start_experiment_config__WEBPACK_IMPORTED_MODULE_14__["ExperimentConfig"].draw.bind(_experiment_start_experiment_config__WEBPACK_IMPORTED_MODULE_14__["ExperimentConfig"]));
class PageManager {
    static setCurrentPage(page) {
        if (this.currentPage !== Pages.PLAY && this.currentPage !== Pages.SYNC) {
            this.returnPage = this.currentPage;
        }
        this.currentPage = page;
        _dom_wrapper__WEBPACK_IMPORTED_MODULE_4__["DOMWrapper"].clearRegistry();
    }
    static return() {
        this.setCurrentPage(this.returnPage);
    }
    static draw() {
        this.currentPage.draw();
    }
}
PageManager.currentPage = Pages.PLAY_FROM_FILE;


/***/ }),

/***/ "./src/scripts/pages/play/play.ts":
/*!****************************************!*\
  !*** ./src/scripts/pages/play/play.ts ***!
  \****************************************/
/*! exports provided: Play */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Play", function() { return Play; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");

class Play {
    static draw() {
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance.background("black");
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].playingDisplay.draw();
    }
}


/***/ }),

/***/ "./src/scripts/pages/play/playing_display.ts":
/*!***************************************************!*\
  !*** ./src/scripts/pages/play/playing_display.ts ***!
  \***************************************************/
/*! exports provided: PlayingDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayingDisplay", function() { return PlayingDisplay; });
/* harmony import */ var _display_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../display_manager */ "./src/scripts/display_manager.ts");
/* harmony import */ var _note_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../note_manager */ "./src/scripts/note_manager.ts");
/* harmony import */ var _miss_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../miss_manager */ "./src/scripts/miss_manager.ts");
/* harmony import */ var _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../accuracy_manager */ "./src/scripts/accuracy_manager.ts");
/* harmony import */ var _scroll_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../scroll_manager */ "./src/scripts/scroll_manager.ts");
/* harmony import */ var _play_results_results_display__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../play_results/results_display */ "./src/scripts/pages/play_results/results_display.ts");
/* harmony import */ var _hold_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hold_manager */ "./src/scripts/hold_manager.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../accuracy_feedback_text */ "./src/scripts/accuracy_feedback_text.ts");
/* harmony import */ var _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../receptor_shrink_reaction */ "./src/scripts/receptor_shrink_reaction.ts");
/* harmony import */ var _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../accuracy_feedback_flash */ "./src/scripts/accuracy_feedback_flash.ts");
/* harmony import */ var _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../accuracy_feedback_particles */ "./src/scripts/accuracy_feedback_particles.ts");
/* harmony import */ var _hold_particles__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hold_particles */ "./src/scripts/hold_particles.ts");
/* harmony import */ var _hold_glow__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hold_glow */ "./src/scripts/hold_glow.ts");
/* harmony import */ var _playing_config__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../playing_config */ "./src/scripts/playing_config.ts");
/* harmony import */ var _game_time_manager__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../game_time_manager */ "./src/scripts/game_time_manager.ts");
/* harmony import */ var _abstract_playing_display__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../abstract_playing_display */ "./src/scripts/abstract_playing_display.ts");
/* harmony import */ var _combo_text__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../combo_text */ "./src/scripts/combo_text.ts");
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _live_comparison__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../live_comparison */ "./src/scripts/live_comparison.ts");
/* harmony import */ var _error_bar__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../error_bar */ "./src/scripts/error_bar.ts");
/* harmony import */ var _play_results_play_results__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../play_results/play_results */ "./src/scripts/pages/play_results/play_results.ts");

























class PlayingDisplay extends _abstract_playing_display__WEBPACK_IMPORTED_MODULE_19__["AbstractPlayingDisplay"] {
    constructor(tracks, audioFile, config, scene, returnPage, songTitle, replay, scoreProvider) {
        super(tracks, audioFile, config, scene, returnPage, songTitle);
        this.showResultsScreen = false;
        this.audioFile = audioFile;
        this.config = config;
        this.scene = scene;
        this.returnPage = returnPage;
        this.noteManager = new _note_manager__WEBPACK_IMPORTED_MODULE_1__["NoteManager"](tracks);
        let numTracks = this.noteManager.tracks.length;
        this.accuracyRecording = new _accuracy_recording__WEBPACK_IMPORTED_MODULE_10__["AccuracyRecording"](numTracks);
        this.displayConfig = new _playing_config__WEBPACK_IMPORTED_MODULE_17__["PlayingConfig"](this.config, numTracks);
        this.displayManager = new _display_manager__WEBPACK_IMPORTED_MODULE_0__["DisplayManager"](this.noteManager, this.displayConfig, this.scene.sketchInstance, this.bounds);
        this.holdParticles = new _hold_particles__WEBPACK_IMPORTED_MODULE_15__["HoldParticles"](this.config, numTracks, this.displayManager);
        this.holdGlow = new _hold_glow__WEBPACK_IMPORTED_MODULE_16__["HoldGlow"](this.config, numTracks, this.displayManager);
        this.holdManager = new _hold_manager__WEBPACK_IMPORTED_MODULE_6__["HoldManager"](numTracks, this.onTrackHold.bind(this), this.onTrackUnhold.bind(this));
        this.gameEndTime = this.calculateGameEnd();
        this.accuracyManager = new _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__["AccuracyManager"](this.noteManager, this.config, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.missManager = new _miss_manager__WEBPACK_IMPORTED_MODULE_2__["MissManager"](this.config, this.noteManager, this.accuracyRecording, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.accuracyFeedbackText = new _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_11__["AccuracyFeedbackText"](this.bounds.center, this.config);
        this.comboText = new _combo_text__WEBPACK_IMPORTED_MODULE_20__["ComboText"](new _point_2d__WEBPACK_IMPORTED_MODULE_21__["Point2D"](this.bounds.center.x, this.bounds.center.y + 18), this.config);
        this.accuracyFeedbackFlash = new _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_13__["AccuracyFeedbackFlash"](this.config, this.displayManager, numTracks);
        this.receptorShrinkReaction = new _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_12__["ReceptorShrinkReaction"](this.config, this.displayConfig, numTracks);
        this.accuracyFeedbackParticles = new _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_14__["AccuracyFeedbackParticles"](this.config, this.displayManager, numTracks);
        this.errorBar = new _error_bar__WEBPACK_IMPORTED_MODULE_23__["ErrorBar"](this.config);
        if (replay !== undefined) {
            this.comparisonReplay = replay;
        }
        if (this.config.isLiveComparisonEnabled && replay !== undefined && scoreProvider !== undefined) {
            this.liveComparison = new _live_comparison__WEBPACK_IMPORTED_MODULE_22__["LiveComparison"](replay, scoreProvider);
        }
        if (!Object(_util__WEBPACK_IMPORTED_MODULE_7__["isKeyBindingsDefined"])(numTracks)) {
            Object(_util__WEBPACK_IMPORTED_MODULE_7__["initializeKeyBindings"])(numTracks);
        }
        this.bindKeyBindingsToActions();
        // initialize the time manager and play the audio as close together as possible to synchronize the audio with the game
        if (!this.isDebugMode) {
            this.timeManager = new _game_time_manager__WEBPACK_IMPORTED_MODULE_18__["GameTimeManager"](this.config);
            this.audioFile.play(config.pauseAtStartInSeconds);
        }
        if (this.isDebugMode) {
            this.timeManager = new _scroll_manager__WEBPACK_IMPORTED_MODULE_4__["ScrollManager"](this.config, this.scene.sketchInstance);
        }
    }
    getNotesEndTime() {
        let earliestAccuracy;
        if (this.config.accuracySettings[this.config.accuracySettings.length - 1].upperBound !== null) {
            earliestAccuracy = this.config.accuracySettings[this.config.accuracySettings.length - 1].upperBound;
        }
        else {
            earliestAccuracy = this.config.accuracySettings[this.config.accuracySettings.length - 2].upperBound;
        }
        return this.noteManager.getLatestNote().timeInSeconds + earliestAccuracy / 1000;
    }
    calculateGameEnd() {
        let audioDuration = this.audioFile.getDuration();
        let notesEndTime = this.getNotesEndTime();
        if (audioDuration < notesEndTime) {
            return notesEndTime + 1;
        }
        return Math.min(notesEndTime + 5, audioDuration);
    }
    endSong() {
        this.audioFile.stop();
        _index__WEBPACK_IMPORTED_MODULE_8__["global"].resultsDisplay = new _play_results_results_display__WEBPACK_IMPORTED_MODULE_5__["ResultsDisplay"](this.config, this.noteManager, this.scene.sketchInstance, this.accuracyRecording, this.comparisonReplay, this.songTitle, this.returnPage);
        this.unbindKeys();
        clearInterval(this.timeDiffInterval);
        _play_results_play_results__WEBPACK_IMPORTED_MODULE_24__["PlayResults"].messageFromLastPlay = {
            accuracyRecording: this.accuracyRecording,
            noteManager: this.noteManager,
            returnPage: this.returnPage,
            songTitle: this.songTitle,
            saveEnabled: true
        };
        _page_manager__WEBPACK_IMPORTED_MODULE_9__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_9__["Pages"].PLAY_RESULTS);
    }
}


/***/ }),

/***/ "./src/scripts/pages/play_from_file/file_drop_zone.ts":
/*!************************************************************!*\
  !*** ./src/scripts/pages/play_from_file/file_drop_zone.ts ***!
  \************************************************************/
/*! exports provided: FileDropZone */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileDropZone", function() { return FileDropZone; });
/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dropzone */ "./node_modules/dropzone/dist/dropzone.js");
/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dropzone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _play_from_file__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./play_from_file */ "./src/scripts/pages/play_from_file/play_from_file.ts");





class FileDropZone {
    static create(stepfile, audioFile) {
        let p = _index__WEBPACK_IMPORTED_MODULE_3__["global"].p5Scene.sketchInstance;
        let div = _dom_wrapper__WEBPACK_IMPORTED_MODULE_1__["DOMWrapper"].create(() => {
            return p.createDiv();
        }, "div");
        if (!div.alreadyExists) {
            this.stepfile = stepfile;
            this.audioFile = audioFile;
            this.styleDropzone(div.element);
            div.element.id("my-div");
            let divSelector = "#" + div.element.id();
            this.configureDropzone(divSelector);
        }
    }
    static styleDropzone(element) {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(element, 0.5, 0.2, this.width, this.height);
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementClasses"])(element, _index__WEBPACK_IMPORTED_MODULE_3__["global"].globalClass, "dropzone");
        element.style("width: " + this.width + "px; height: " + this.height + "px;");
    }
    static configureDropzone(dropzoneSelector) {
        // @ts-ignore
        dropzone__WEBPACK_IMPORTED_MODULE_0__["autoDiscover"] = false;
        this.DROPZONE_CONFIG.hiddenInputContainer = dropzoneSelector;
        this.dropzone = new dropzone__WEBPACK_IMPORTED_MODULE_0__(dropzoneSelector, this.DROPZONE_CONFIG);
        this.dropzone.on("drop", this.resetAcceptedFilesCounters.bind(this));
    }
    static getUrl(files) {
        return "#";
    }
    static onFileAccept(file, done) {
        if (this.isStepfile(file) && !this.acceptedStepfile) {
            this.handleAddStepfile(file);
        }
        else if (!this.acceptedAudioFile) {
            this.handleAddAudioFile(file);
        }
        this.dropzone.removeFile(file);
        done();
    }
    static isStepfile(file) {
        let fileExtension = this.getFileExtension(file.name);
        return fileExtension.toLowerCase() === "sm";
    }
    static getFileExtension(fileName) {
        return fileName.split(".").pop();
    }
    static handleAddStepfile(file) {
        this.acceptedStepfile = true;
        this.stepfile.loadFile(file);
        _play_from_file__WEBPACK_IMPORTED_MODULE_4__["PlayFromFile"].resetModeOptions();
    }
    static handleAddAudioFile(file) {
        this.acceptedAudioFile = true;
        this.audioFile.loadFile(file);
    }
    static onError(file, message, xhr) {
        // @ts-ignore
        this.removeFile(file);
    }
    static resetAcceptedFilesCounters() {
        this.acceptedAudioFile = false;
        this.acceptedStepfile = false;
    }
}
FileDropZone.PREVIEW_TEMPLATE = '<div></div>';
FileDropZone.MESSAGE = "Drop files here or use the buttons below";
FileDropZone.DROPZONE_CONFIG = {
    url: FileDropZone.getUrl,
    acceptedFiles: ".sm,.mp3,.ogg",
    uploadMultiple: true,
    maxFilesize: null,
    previewTemplate: FileDropZone.PREVIEW_TEMPLATE,
    createImageThumbnails: false,
    clickable: false,
    accept: FileDropZone.onFileAccept.bind(FileDropZone),
    error: FileDropZone.onError,
    dictDefaultMessage: FileDropZone.MESSAGE
};
FileDropZone.width = 650;
FileDropZone.height = 60;
FileDropZone.acceptedAudioFile = false;
FileDropZone.acceptedStepfile = false;


/***/ }),

/***/ "./src/scripts/pages/play_from_file/play_from_file.ts":
/*!************************************************************!*\
  !*** ./src/scripts/pages/play_from_file/play_from_file.ts ***!
  \************************************************************/
/*! exports provided: PlayFromFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayFromFile", function() { return PlayFromFile; });
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _stepfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stepfile */ "./src/scripts/stepfile.ts");
/* harmony import */ var _audio_audio_file__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../audio/audio_file */ "./src/scripts/audio/audio_file.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _file_drop_zone__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./file_drop_zone */ "./src/scripts/pages/play_from_file/file_drop_zone.ts");
/* harmony import */ var _audio_html_audio_element_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../audio/html_audio_element_helper */ "./src/scripts/audio/html_audio_element_helper.ts");
/* harmony import */ var _radio_table__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../radio_table */ "./src/scripts/radio_table.ts");
/* harmony import */ var _storage_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../storage_util */ "./src/scripts/storage_util.ts");
/* harmony import */ var _leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../leaderboard/leaderboard */ "./src/scripts/pages/leaderboard/leaderboard.ts");
/* harmony import */ var _storage_replays__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../storage/replays */ "./src/scripts/pages/storage/replays.ts");













class PlayFromFile {
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["drawHeading"])();
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_1__["global"].playFromFileBackground);
        _file_drop_zone__WEBPACK_IMPORTED_MODULE_7__["FileDropZone"].create(PlayFromFile.stepfile, PlayFromFile.audioFile);
        let stepfileInput = Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["createFileInput"])(PlayFromFile.getStepfileInputLabel(), "Choose Stepfile (.sm)", "stepfileInput", PlayFromFile.loadStepfileAndUpdateModeOptions, PlayFromFile.PLAY_FROM_FILE_CLASS).element;
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["setElementCenterPositionRelative"])(stepfileInput, 0.43, 0.35, 268, 34);
        let audioFileInput = Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["createFileInput"])(PlayFromFile.getAudioFileInputLabel(), "Choose Audio File (.mp3, .ogg)", "audioFileInput", PlayFromFile.loadAudioFile, PlayFromFile.PLAY_FROM_FILE_CLASS).element;
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["setElementCenterPositionRelative"])(audioFileInput, 0.43, 0.5, 325, 34);
        let playButtonId = "playButton";
        let syncButtonId = "syncButton";
        let leaderboardButtonId = "leaderboardButton";
        let replaysButtonId = "replaysButton";
        if (Object(_util__WEBPACK_IMPORTED_MODULE_4__["isFilesReady"])(PlayFromFile.stepfile, PlayFromFile.audioFile)) {
            if (PlayFromFile.modesAsStrings === undefined) {
                PlayFromFile.modesAsStrings = PlayFromFile.getModesAsStrings(PlayFromFile.stepfile.modes);
            }
            let modeRadio = _radio_table__WEBPACK_IMPORTED_MODULE_9__["RadioTable"].create(PlayFromFile.MODE_RADIO_ID, 500, 120, [54, 30, 16], ["Type", "Difficulty", "Meter"], PlayFromFile.modesAsStrings).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["setElementCenterPositionRelative"])(modeRadio, 0.5, 0.7, 500, 120);
            if (this.modeIsSelected(modeRadio)) {
                let leaderboardButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].create(() => {
                    return p.createButton("Leaderboard");
                }, leaderboardButtonId);
                if (!leaderboardButton.alreadyExists) {
                    leaderboardButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
                    this.setLeaderboardButtonBehavior(leaderboardButton.element, modeRadio);
                }
                let replaysButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].create(() => {
                    return p.createButton("Replays");
                }, replaysButtonId);
                if (!replaysButton.alreadyExists) {
                    replaysButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
                    this.setReplaysButtonBehavior(replaysButton.element, modeRadio);
                }
                let playButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].create(() => {
                    return p.createButton("Play");
                }, playButtonId);
                if (!playButton.alreadyExists) {
                    playButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
                    this.setPlayButtonBehavior(playButton.element, modeRadio);
                }
                let syncButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].create(() => {
                    return p.createButton("Start Audio Sync Wizard");
                }, syncButtonId);
                if (!syncButton.alreadyExists) {
                    syncButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
                    this.setSyncButtonBehavior(syncButton.element, modeRadio);
                }
                Object(_ui_util__WEBPACK_IMPORTED_MODULE_0__["spaceElementsHorizontally"])([leaderboardButton.element, replaysButton.element, playButton.element, syncButton.element], [109, 79, 59, 176], 70, 410, 50);
            }
            else {
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].removeElementById(playButtonId);
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].removeElementById(syncButtonId);
            }
        }
        else {
            _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].removeElementById(PlayFromFile.MODE_RADIO_ID);
            _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].removeElementById(playButtonId);
            _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].removeElementById(syncButtonId);
        }
    }
    static setLeaderboardButtonBehavior(leaderboardButton, modeRadio) {
        leaderboardButton.mouseClicked(() => {
            let selectedMode = PlayFromFile.getSelectedMode(modeRadio);
            PlayFromFile.stepfile.finishParsing(selectedMode.id);
            let songhash = _storage_util__WEBPACK_IMPORTED_MODULE_10__["StorageUtil"].getKeyFromTracks(PlayFromFile.stepfile.tracks);
            _leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_11__["Leaderboard"].initialize(songhash);
            _page_manager__WEBPACK_IMPORTED_MODULE_5__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].LEADERBOARD);
        });
    }
    static setReplaysButtonBehavior(replayButton, modeRadio) {
        replayButton.mouseClicked(() => {
            let selectedMode = PlayFromFile.getSelectedMode(modeRadio);
            PlayFromFile.stepfile.finishParsing(selectedMode.id);
            _storage_replays__WEBPACK_IMPORTED_MODULE_12__["Replays"].initialize(PlayFromFile.stepfile, PlayFromFile.audioFile, _page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].PLAY_FROM_FILE);
            _page_manager__WEBPACK_IMPORTED_MODULE_5__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].REPLAYS);
        });
    }
    static modeIsSelected(modeRadio) {
        return modeRadio.value() !== "";
    }
    static setSyncButtonBehavior(syncButton, modeRadio) {
        syncButton.mouseClicked(() => {
            let selectedMode = PlayFromFile.getSelectedMode(modeRadio);
            PlayFromFile.stepfile.finishParsing(selectedMode.id);
            Object(_util__WEBPACK_IMPORTED_MODULE_4__["initSyncGameDisplay"])(PlayFromFile.stepfile.tracks, PlayFromFile.audioFile, _page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].PLAY_FROM_FILE, PlayFromFile.stepfile.songTitle);
            _page_manager__WEBPACK_IMPORTED_MODULE_5__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].SYNC);
        });
    }
    static setPlayButtonBehavior(playButton, modeRadio) {
        playButton.mouseClicked(() => {
            let selectedMode = PlayFromFile.getSelectedMode(modeRadio);
            PlayFromFile.stepfile.finishParsing(selectedMode.id);
            Object(_util__WEBPACK_IMPORTED_MODULE_4__["initPlayingDisplay"])(PlayFromFile.stepfile.tracks, PlayFromFile.audioFile, _page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].PLAY_FROM_FILE, PlayFromFile.stepfile.songTitle)
                .then(() => _page_manager__WEBPACK_IMPORTED_MODULE_5__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_5__["Pages"].PLAY));
        });
    }
    static resetModeOptions() {
        PlayFromFile.modesAsStrings = undefined;
        _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].removeElementById(PlayFromFile.MODE_RADIO_ID);
    }
    static getModesAsStrings(modes) {
        let modeStrings = [];
        for (let i = 0; i < modes.length; i++) {
            let mode = modes[i];
            modeStrings.push([mode.type, mode.difficulty, mode.meter]);
        }
        return modeStrings;
    }
    static loadStepfileAndUpdateModeOptions(file) {
        PlayFromFile.stepfile.loadFile.call(PlayFromFile.stepfile, file.file);
        PlayFromFile.resetModeOptions();
    }
    static loadAudioFile(file) {
        PlayFromFile.audioFile.loadFile.call(PlayFromFile.audioFile, file.file);
    }
    static getSelectedMode(modeRadio) {
        return PlayFromFile.stepfile.modes[Number(modeRadio.value())];
    }
    static getStepfileInputLabel() {
        switch (PlayFromFile.stepfile.state) {
            case _stepfile__WEBPACK_IMPORTED_MODULE_2__["StepfileState"].NO_STEPFILE:
                return "No file chosen";
            case _stepfile__WEBPACK_IMPORTED_MODULE_2__["StepfileState"].DONE_READING:
            case _stepfile__WEBPACK_IMPORTED_MODULE_2__["StepfileState"].PARTIALLY_PARSED:
            case _stepfile__WEBPACK_IMPORTED_MODULE_2__["StepfileState"].FULLY_PARSED:
                return PlayFromFile.truncateFileNameIfTooLong(PlayFromFile.stepfile.file.name, 30);
            default:
                return "Error";
        }
    }
    static getAudioFileInputLabel() {
        switch (PlayFromFile.audioFile.getState()) {
            case _audio_audio_file__WEBPACK_IMPORTED_MODULE_3__["AudioFileState"].NO_AUDIO_FILE:
                return "No file chosen";
            case _audio_audio_file__WEBPACK_IMPORTED_MODULE_3__["AudioFileState"].DONE_READING:
            case _audio_audio_file__WEBPACK_IMPORTED_MODULE_3__["AudioFileState"].BUFFERED:
                return PlayFromFile.truncateFileNameIfTooLong(PlayFromFile.audioFile.getName(), 30);
            default:
                return "Error";
        }
    }
    static truncateFileNameIfTooLong(fullFileName, maxLength) {
        if (fullFileName.length <= maxLength) {
            return fullFileName;
        }
        return fullFileName.substr(0, maxLength - 11) +
            "..." +
            fullFileName.substr(fullFileName.length - 10);
    }
}
PlayFromFile.stepfile = new _stepfile__WEBPACK_IMPORTED_MODULE_2__["Stepfile"]();
PlayFromFile.audioFile = new _audio_html_audio_element_helper__WEBPACK_IMPORTED_MODULE_8__["HtmlAudioElementHelper"]();
PlayFromFile.PLAY_FROM_FILE_CLASS = "play-from-file";
PlayFromFile.MODE_RADIO_ID = "modeRadio";


/***/ }),

/***/ "./src/scripts/pages/play_from_online/online_playlist.ts":
/*!***************************************************************!*\
  !*** ./src/scripts/pages/play_from_online/online_playlist.ts ***!
  \***************************************************************/
/*! exports provided: OnlinePlaylistState, OnlinePlaylist */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnlinePlaylistState", function() { return OnlinePlaylistState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnlinePlaylist", function() { return OnlinePlaylist; });
/* harmony import */ var _stepfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../stepfile */ "./src/scripts/stepfile.ts");
/* harmony import */ var _playlist_client_playlist_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../playlist_client/playlist_client */ "./src/scripts/playlist_client/playlist_client.ts");
/* harmony import */ var _paginated_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../paginated_list */ "./src/scripts/paginated_list.ts");



var OnlinePlaylistState;
(function (OnlinePlaylistState) {
    OnlinePlaylistState[OnlinePlaylistState["NO_PLAYLIST"] = 0] = "NO_PLAYLIST";
    OnlinePlaylistState[OnlinePlaylistState["LOADING_PLAYLIST"] = 1] = "LOADING_PLAYLIST";
    OnlinePlaylistState[OnlinePlaylistState["PLAYLIST_READY"] = 2] = "PLAYLIST_READY";
    OnlinePlaylistState[OnlinePlaylistState["PLAYLIST_ERROR"] = 3] = "PLAYLIST_ERROR";
    OnlinePlaylistState[OnlinePlaylistState["LOADING_SONG"] = 4] = "LOADING_SONG";
    OnlinePlaylistState[OnlinePlaylistState["SONG_ERROR"] = 5] = "SONG_ERROR";
})(OnlinePlaylistState || (OnlinePlaylistState = {}));
class OnlinePlaylist extends _paginated_list__WEBPACK_IMPORTED_MODULE_2__["PaginatedList"] {
    constructor() {
        super();
        this.state = OnlinePlaylistState.NO_PLAYLIST;
        this.indexUrl = "";
        this.playlistClient = new _playlist_client_playlist_client__WEBPACK_IMPORTED_MODULE_1__["PlaylistClient"]();
    }
    kickOffLoadPlaylist(indexUrl) {
        this.indexUrl = indexUrl;
        this.state = OnlinePlaylistState.LOADING_PLAYLIST;
        this.playlistClient.initialize(indexUrl)
            .then(() => this.initializeDisplayedPlaylist())
            .catch(() => this.state = OnlinePlaylistState.PLAYLIST_ERROR);
    }
    initializeDisplayedPlaylist() {
        this.allContents = [];
        let songs = this.playlistClient.getPlaylist();
        for (let i = 0; i < songs.length; i++) {
            let song = songs[i];
            let entryColumns = this.songToColumns(song);
            this.allContents.push(entryColumns);
        }
        this.setPage(0);
        this.state = OnlinePlaylistState.PLAYLIST_READY;
    }
    kickOffLoadSong(displayedSongIndex, stepfile, audioFile) {
        audioFile.reset();
        stepfile.state = _stepfile__WEBPACK_IMPORTED_MODULE_0__["StepfileState"].NO_STEPFILE;
        this.loadedSongName = this.currentContents[displayedSongIndex][1];
        this.playlistClient.getSwf(this.getSongIndex(displayedSongIndex))
            .then((swfParseResponse) => this.loadSwfIntoStepfileAndAudioFile(swfParseResponse, stepfile, audioFile))
            .catch(() => this.state = OnlinePlaylistState.SONG_ERROR);
    }
    getSongIndex(displayedSongIndex) {
        return displayedSongIndex + this.pageSize * this.currentPage;
    }
    loadSwfIntoStepfileAndAudioFile(swfParseResponse, stepfile, audioFile) {
        stepfile.loadFfrBeatmap(swfParseResponse.chartData, this.loadedSongName);
        audioFile.loadBlob(swfParseResponse.blob);
    }
    songToColumns(song) {
        return [String(song.songDifficulty), song.songName];
    }
}


/***/ }),

/***/ "./src/scripts/pages/play_from_online/play_from_online.ts":
/*!****************************************************************!*\
  !*** ./src/scripts/pages/play_from_online/play_from_online.ts ***!
  \****************************************************************/
/*! exports provided: PlayFromOnline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayFromOnline", function() { return PlayFromOnline; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p5 */ "p5");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _online_playlist__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./online_playlist */ "./src/scripts/pages/play_from_online/online_playlist.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _stepfile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../stepfile */ "./src/scripts/stepfile.ts");
/* harmony import */ var _audio_html_audio_element_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../audio/html_audio_element_helper */ "./src/scripts/audio/html_audio_element_helper.ts");
/* harmony import */ var _radio_table__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../radio_table */ "./src/scripts/radio_table.ts");
/* harmony import */ var _page_controls__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../page_controls */ "./src/scripts/page_controls.ts");
/* harmony import */ var _storage_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../storage_util */ "./src/scripts/storage_util.ts");
/* harmony import */ var _leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../leaderboard/leaderboard */ "./src/scripts/pages/leaderboard/leaderboard.ts");
/* harmony import */ var _storage_replays__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../storage/replays */ "./src/scripts/pages/storage/replays.ts");














const playFromOnlineStepfile = new _stepfile__WEBPACK_IMPORTED_MODULE_7__["Stepfile"]();
const playFromOnlineAudioFile = new _audio_html_audio_element_helper__WEBPACK_IMPORTED_MODULE_8__["HtmlAudioElementHelper"]();
// This prevents loading previous song upon returning to a loaded playlist
let isSwfLoadStarted = false;
class PlayFromOnline {
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["drawHeading"])();
        let onlinePlaylist = _index__WEBPACK_IMPORTED_MODULE_0__["global"].onlinePlaylist;
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_0__["global"].playFromFileBackground);
        let urlInput = Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["createLabeledInput"])("Engine URL", "urlInput", onlinePlaylist.indexUrl, PlayFromOnline.PLAY_FROM_ONLINE_CLASS);
        // @ts-ignore
        let urlInputDiv = new p5__WEBPACK_IMPORTED_MODULE_1__["Element"](urlInput.element.parent());
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(urlInputDiv, 0.50, 0.21, 600, 38);
        let loadPlaylistButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
            return p.createButton("Load");
        }, "loadPlaylistButton");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(loadPlaylistButton.element, 0.85, 0.215, 62, 33);
        if (!loadPlaylistButton.alreadyExists) {
            loadPlaylistButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
            loadPlaylistButton.element.addClass(PlayFromOnline.PLAY_FROM_ONLINE_CLASS);
            loadPlaylistButton.element.mouseClicked(() => {
                let value = urlInput.element.value();
                if (typeof value === "string") {
                    Object(_util__WEBPACK_IMPORTED_MODULE_6__["disableButton"])(loadPlaylistButton.element);
                    onlinePlaylist.kickOffLoadPlaylist(value);
                }
            });
        }
        if (onlinePlaylist.state !== _online_playlist__WEBPACK_IMPORTED_MODULE_5__["OnlinePlaylistState"].LOADING_PLAYLIST) {
            Object(_util__WEBPACK_IMPORTED_MODULE_6__["enableButton"])(loadPlaylistButton.element);
        }
        let playlistMenuId = "playlistMenu";
        if (onlinePlaylist.state === _online_playlist__WEBPACK_IMPORTED_MODULE_5__["OnlinePlaylistState"].PLAYLIST_READY ||
            onlinePlaylist.state === _online_playlist__WEBPACK_IMPORTED_MODULE_5__["OnlinePlaylistState"].LOADING_SONG) {
            let pageControls = _page_controls__WEBPACK_IMPORTED_MODULE_10__["PageControls"].create(playlistMenuId, onlinePlaylist).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(pageControls, 0.5, 0.31, 140, 30);
            let playlistMenu = _radio_table__WEBPACK_IMPORTED_MODULE_9__["RadioTable"].create(playlistMenuId, 630, 250, [15, 85], ["Difficulty", "Song Title"], onlinePlaylist.currentContents).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(playlistMenu, 0.5, 0.60, 630, 250);
            let loadAndPlayButtonId = "loadAndPlayButton";
            let loadAndSyncButtonId = "loadAndSyncButton";
            let leaderboardButtonId = "leaderboardButton";
            let replaysButtonId = "replaysButton";
            if (playlistMenu.value() !== "") {
                let leaderboardButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
                    return p.createButton("Leaderboard");
                }, leaderboardButtonId);
                if (!leaderboardButton.alreadyExists) {
                    leaderboardButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                    this.setLeaderboardButtonBehavior(leaderboardButton.element, playlistMenu, onlinePlaylist);
                }
                let replaysButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
                    return p.createButton("Replays");
                }, replaysButtonId);
                if (!replaysButton.alreadyExists) {
                    replaysButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                    this.setReplaysButtonBehavior(replaysButton.element, playlistMenu, onlinePlaylist);
                }
                let loadAndPlayButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
                    return p.createButton("Load And Play");
                }, loadAndPlayButtonId);
                if (!loadAndPlayButton.alreadyExists) {
                    loadAndPlayButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                    this.setLoadAndPlayButtonBehavior(loadAndPlayButton.element, playlistMenu, onlinePlaylist);
                }
                let loadAndSyncButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
                    return p.createButton("Load Audio Sync Wizard");
                }, loadAndSyncButtonId);
                if (!loadAndSyncButton.alreadyExists) {
                    loadAndSyncButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                    this.setSyncButtonBehavior(loadAndSyncButton.element, playlistMenu, onlinePlaylist);
                }
                Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["spaceElementsHorizontally"])([leaderboardButton.element, replaysButton.element, loadAndPlayButton.element, loadAndSyncButton.element], [109, 79, 118, 176], 46, 420, 50);
                if (onlinePlaylist.state !== _online_playlist__WEBPACK_IMPORTED_MODULE_5__["OnlinePlaylistState"].LOADING_SONG) {
                    Object(_util__WEBPACK_IMPORTED_MODULE_6__["enableButton"])(loadAndPlayButton.element);
                }
                if (Object(_util__WEBPACK_IMPORTED_MODULE_6__["isFilesReady"])(playFromOnlineStepfile, playFromOnlineAudioFile) && isSwfLoadStarted) {
                    this.onSongLoaded();
                }
            }
            else {
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].removeElementById(loadAndPlayButtonId);
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].removeElementById(loadAndSyncButtonId);
                isSwfLoadStarted = false;
            }
        }
        else {
            _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].removeElementById(playlistMenuId);
        }
    }
    static setLeaderboardButtonBehavior(leaderboardButton, playlistMenu, onlinePlaylist) {
        leaderboardButton.mouseClicked(PlayFromOnline.loadSelectedSongAndDisableButton.bind(this, leaderboardButton, playlistMenu, onlinePlaylist, () => {
            let songhash = _storage_util__WEBPACK_IMPORTED_MODULE_11__["StorageUtil"].getKeyFromTracks(playFromOnlineStepfile.tracks);
            _leaderboard_leaderboard__WEBPACK_IMPORTED_MODULE_12__["Leaderboard"].initialize(songhash);
            _page_manager__WEBPACK_IMPORTED_MODULE_4__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].LEADERBOARD);
        }));
    }
    static setReplaysButtonBehavior(replayButton, playlistMenu, onlinePlaylist) {
        replayButton.mouseClicked(PlayFromOnline.loadSelectedSongAndDisableButton.bind(this, replayButton, playlistMenu, onlinePlaylist, () => {
            _storage_replays__WEBPACK_IMPORTED_MODULE_13__["Replays"].initialize(playFromOnlineStepfile, playFromOnlineAudioFile, _page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].PLAY_FROM_ONLINE);
            _page_manager__WEBPACK_IMPORTED_MODULE_4__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].REPLAYS);
        }));
    }
    static setLoadAndPlayButtonBehavior(loadAndPlayButton, playlistMenu, onlinePlaylist) {
        loadAndPlayButton.mouseClicked(PlayFromOnline.loadSelectedSongAndDisableButton.bind(this, loadAndPlayButton, playlistMenu, onlinePlaylist, () => Object(_util__WEBPACK_IMPORTED_MODULE_6__["initPlayingDisplay"])(playFromOnlineStepfile.tracks, playFromOnlineAudioFile, _page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].PLAY_FROM_ONLINE, playFromOnlineStepfile.songTitle)
            .then(() => _page_manager__WEBPACK_IMPORTED_MODULE_4__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].PLAY))));
    }
    static setSyncButtonBehavior(loadAndSyncButton, playlistMenu, onlinePlaylist) {
        loadAndSyncButton.mouseClicked(PlayFromOnline.loadSelectedSongAndDisableButton.bind(this, loadAndSyncButton, playlistMenu, onlinePlaylist, () => {
            Object(_util__WEBPACK_IMPORTED_MODULE_6__["initSyncGameDisplay"])(playFromOnlineStepfile.tracks, playFromOnlineAudioFile, _page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].PLAY_FROM_ONLINE, playFromOnlineStepfile.songTitle);
            _page_manager__WEBPACK_IMPORTED_MODULE_4__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_4__["Pages"].SYNC);
        }));
    }
    static loadSelectedSongAndDisableButton(button, playlistMenu, onlinePlaylist, onSongLoaded) {
        this.onSongLoaded = onSongLoaded;
        let value = playlistMenu.value();
        if (typeof value === "string") {
            value = parseInt(value);
        }
        if (Number.isInteger(value)) {
            Object(_util__WEBPACK_IMPORTED_MODULE_6__["disableButton"])(button);
            onlinePlaylist.kickOffLoadSong(value, playFromOnlineStepfile, playFromOnlineAudioFile);
            isSwfLoadStarted = true;
        }
    }
}
PlayFromOnline.PLAY_FROM_ONLINE_CLASS = "play-from-online";


/***/ }),

/***/ "./src/scripts/pages/play_results/play_results.ts":
/*!********************************************************!*\
  !*** ./src/scripts/pages/play_results/play_results.ts ***!
  \********************************************************/
/*! exports provided: PlayResults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayResults", function() { return PlayResults; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _database_client_put_response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../database_client/put_response */ "./src/scripts/database_client/put_response.ts");
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");
/* harmony import */ var _storage_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../storage_util */ "./src/scripts/storage_util.ts");
/* harmony import */ var _database_client_database_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../database_client/database_client */ "./src/scripts/database_client/database_client.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _replay_compressor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../replay_compressor */ "./src/scripts/replay_compressor.ts");










class PlayResults {
    static draw() {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.background("black");
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].resultsDisplay.draw();
        let returnButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
            return p.createButton("Return");
        }, "returnButton");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(returnButton.element, 0.5, 0.9, 73, 34);
        if (!returnButton.alreadyExists) {
            returnButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
            returnButton.element.mouseClicked(() => {
                _page_manager__WEBPACK_IMPORTED_MODULE_2__["PageManager"].setCurrentPage(this.messageFromLastPlay.returnPage);
            });
        }
        if (this.messageFromLastPlay.saveEnabled) {
            let saveReplayOfflineButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
                return p.createButton("Save Replay");
            }, "saveReplayOfflineButton");
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(saveReplayOfflineButton.element, 0.75, 0.9, 73, 34);
            if (!saveReplayOfflineButton.alreadyExists) {
                saveReplayOfflineButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                saveReplayOfflineButton.element.mouseClicked(() => {
                    this.saveScore(saveReplayOfflineButton.element);
                });
            }
            let onlineScoreSubmitStatus = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
                return p.createElement("span");
            }, "onlineScoreSubmitStatus");
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(onlineScoreSubmitStatus.element, 0.22, 0.9, 283, 18);
            if (!onlineScoreSubmitStatus.alreadyExists) {
                onlineScoreSubmitStatus.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                onlineScoreSubmitStatus.element.html("Submitting score...");
                this.submitScore()
                    .then(response => this.updateScoreSubmissionText(onlineScoreSubmitStatus.element, response))
                    .catch(reason => {
                    console.error(reason);
                    onlineScoreSubmitStatus.element.html("Score submission failed");
                });
            }
        }
    }
    static updateScoreSubmissionText(element, response) {
        if (response.code === _database_client_put_response__WEBPACK_IMPORTED_MODULE_4__["PutResponseCode"].SUCCESS || response.code === _database_client_put_response__WEBPACK_IMPORTED_MODULE_4__["PutResponseCode"].SCORE_TOO_LOW) {
            element.html("Submission result: " + response.message);
        }
    }
    static submitScore() {
        return new Promise(() => new _database_client_database_client__WEBPACK_IMPORTED_MODULE_7__["DatabaseClient"](_index__WEBPACK_IMPORTED_MODULE_0__["global"].config.username, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.password))
            .then((client) => {
            let songhash = _storage_util__WEBPACK_IMPORTED_MODULE_6__["StorageUtil"].getKeyFromTracks(this.messageFromLastPlay.noteManager.tracks);
            let putRequest = {
                songhash: songhash,
                songname: this.messageFromLastPlay.songTitle,
                score: _index__WEBPACK_IMPORTED_MODULE_0__["global"].resultsDisplay.currentScore.percentScore
            };
            return client.putIfBetterScore(putRequest);
        });
    }
    static saveScore(saveReplayOfflineButton) {
        Object(_util__WEBPACK_IMPORTED_MODULE_8__["disableButton"])(saveReplayOfflineButton);
        let compressedReplay = _replay_compressor__WEBPACK_IMPORTED_MODULE_9__["ReplayCompressor"].compress(this.messageFromLastPlay.accuracyRecording.linearRecording);
        _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_5__["OfflineStorageClient"].saveReplay(this.messageFromLastPlay.accuracyRecording, this.messageFromLastPlay.noteManager, this.messageFromLastPlay.songTitle)
            .then(() => saveReplayOfflineButton.html("Replay Saved"))
            .catch(() => {
            saveReplayOfflineButton.html("Save Failed");
            Object(_util__WEBPACK_IMPORTED_MODULE_8__["enableButton"])(saveReplayOfflineButton);
        });
    }
}


/***/ }),

/***/ "./src/scripts/pages/play_results/results_display.ts":
/*!***********************************************************!*\
  !*** ./src/scripts/pages/play_results/results_display.ts ***!
  \***********************************************************/
/*! exports provided: ResultsDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResultsDisplay", function() { return ResultsDisplay; });
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../rectangle */ "./src/scripts/rectangle.ts");
/* harmony import */ var _score_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../score_provider */ "./src/scripts/score_provider.ts");




class ResultsDisplay {
    constructor(config, noteManager, p, currentRecording, comparisonReplay, songTitle, returnPage) {
        this.config = config;
        this.noteManager = noteManager;
        this.p = p;
        this.currentRecording = currentRecording;
        this.songTitle = songTitle;
        this.returnPage = returnPage;
        this.totalNotes = this.noteManager.getTotalNotes();
        let scoreProvider = new _score_provider__WEBPACK_IMPORTED_MODULE_3__["ScoreProvider"](this.config, this.totalNotes);
        this.currentScore = scoreProvider.score(this.currentRecording.linearRecording);
        if (comparisonReplay !== undefined) {
            this.comparisonRecording = _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__["AccuracyRecording"].ofReplay(comparisonReplay);
            this.comparisonScore = scoreProvider.score(this.comparisonRecording.linearRecording);
        }
    }
    draw() {
        let heading = this.returnPage.name + "// " + this.songTitle;
        this.drawHeadingText(heading);
        let barsBounds = _rectangle__WEBPACK_IMPORTED_MODULE_2__["Rectangle"].fromTopLeft(0, 80, this.p.width * 0.9, this.p.height * 0.47);
        this.drawBars(barsBounds);
        let scoreSummaryBounds = _rectangle__WEBPACK_IMPORTED_MODULE_2__["Rectangle"].fromTopLeft(this.p.width * 0.2, barsBounds.topLeftY + barsBounds.height + 20, barsBounds.width, this.p.height * 0.12);
        this.drawScoreSummary(scoreSummaryBounds);
        if (this.comparisonRecording !== undefined) {
            let comparisonBarStatsBounds = _rectangle__WEBPACK_IMPORTED_MODULE_2__["Rectangle"].fromTopLeft(barsBounds.width + barsBounds.topLeftX - 20, barsBounds.topLeftY, 0, barsBounds.height);
            this.drawComparisonBarStats(comparisonBarStatsBounds);
            let comparisonScoreSummaryBounds = _rectangle__WEBPACK_IMPORTED_MODULE_2__["Rectangle"].fromTopLeft(comparisonBarStatsBounds.topLeftX, scoreSummaryBounds.topLeftY, 0, scoreSummaryBounds.height);
            this.drawComparisonScoreSummary(comparisonScoreSummaryBounds);
        }
    }
    drawHeadingText(heading) {
        let p = this.p;
        p.push();
        p.textAlign(p.LEFT, p.TOP);
        p.fill("white");
        p.textSize(20);
        p.text(heading, 8, 8);
        p.pop();
    }
    drawScoreSummary(bounds) {
        let numLines = 2;
        let lineSpacingRatio = 1 / 3;
        let lineHeight = bounds.height / (numLines + (numLines - 1) * lineSpacingRatio);
        let lineSpacing = lineSpacingRatio * lineHeight;
        let textSize = lineHeight * 0.9;
        let totalScore = "Total Score: " + this.currentScore.totalScore.toFixed(0);
        let y = bounds.topLeftY + lineHeight / 2;
        this.drawLeftAlignedText(bounds.topLeftX, y, totalScore, textSize);
        let percentScore = "Percent Score: " + this.currentScore.percentScore.toFixed(2) + "%";
        y += lineHeight + lineSpacing;
        this.drawLeftAlignedText(bounds.topLeftX, y, percentScore, textSize);
    }
    drawComparisonScoreSummary(bounds) {
        let numLines = 2;
        let lineSpacingRatio = 1 / 3;
        let lineHeight = bounds.height / (numLines + (numLines - 1) * lineSpacingRatio);
        let lineSpacing = lineSpacingRatio * lineHeight;
        let textSize = lineHeight * 0.9;
        let totalScore = this.comparisonScore.totalScore.toFixed(0);
        let y = bounds.topLeftY + lineHeight / 2;
        this.drawCenteredText(bounds.centerX, y, totalScore, textSize);
        let percentScore = this.comparisonScore.percentScore.toFixed(2) + "%";
        y += lineHeight + lineSpacing;
        this.drawCenteredText(bounds.centerX, y, percentScore, textSize);
    }
    drawComparisonBarStats(bounds) {
        let accuracyLabels = this.getAccuracyNamesDescending(this.config.accuracySettings);
        let numBars = accuracyLabels.length + 1; // plus one for the combo bar
        let barSpacingRatio = 1 / 3;
        let barHeight = bounds.height / (numBars + (numBars - 1) * barSpacingRatio);
        let barSpacing = barSpacingRatio * barHeight;
        let textSize = barHeight * 0.9;
        this.drawPBAccuracyStats(accuracyLabels, bounds, textSize, barHeight, barSpacing, numBars);
    }
    drawPBAccuracyStats(accuracyLabels, bounds, textSize, barHeight, barSpacing, numStats) {
        let startY = bounds.topLeftY;
        let headerText = "Personal Best";
        let headerSize = textSize * 0.8;
        this.drawCenteredText(bounds.centerX, startY - headerSize * 1.5, headerText, headerSize);
        // combo bar
        let statCenterY = this.getBarCenterY(startY, 0, barHeight, barSpacing);
        let combo = this.calculateCombo(this.comparisonRecording.linearRecording);
        this.drawCenteredText(bounds.centerX, statCenterY, combo.toString(), textSize);
        // other bars
        for (let i = 1; i < numStats; i++) {
            let accuracyLabel = accuracyLabels[i - 1];
            let numAccuracyEvents = this.getNumAccuracyEvents(this.comparisonRecording.perTrackRecording, accuracyLabel, this.config);
            let statCenterY = this.getBarCenterY(startY, i, barHeight, barSpacing);
            this.drawCenteredText(bounds.centerX, statCenterY, numAccuracyEvents.toString(), textSize);
        }
    }
    drawBars(bounds) {
        let accuracyLabels = this.getAccuracyNamesDescending(this.config.accuracySettings);
        let numBars = accuracyLabels.length + 1; // plus one for the combo bar
        let barSpacingRatio = 1 / 3;
        let barHeight = bounds.height / (numBars + (numBars - 1) * barSpacingRatio);
        let barWidth = bounds.width * 0.6;
        let barSpacing = barSpacingRatio * barHeight;
        let leftTextSize = 0.8 * barHeight;
        this.drawAccuracyBars(accuracyLabels, bounds, leftTextSize, barWidth, barHeight, barSpacing, numBars, _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].isConfiguredForBoos(this.config));
    }
    // return a list of unique accuracies sorted by the offset, with the best accuracy being first
    getAccuracyNamesDescending(accuracySettings) {
        let accuracyTable = accuracySettings.map(accuracy => {
            return {
                accuracyName: accuracy.name,
                sortValue: ResultsDisplay.getAccuracySortingValue(accuracy.lowerBound, accuracy.upperBound)
            };
        });
        let mergedAccuracyTable = this.mergeAccuraciesWithSameName(accuracyTable);
        mergedAccuracyTable.sort(ResultsDisplay.accuracyTableSortFunction);
        return mergedAccuracyTable.map(row => row.accuracyName);
    }
    static getAccuracySortingValue(lowerBound, upperBound) {
        if (lowerBound === null) {
            return Math.abs(upperBound);
        }
        if (upperBound === null) {
            return Math.abs(lowerBound);
        }
        return Math.abs((upperBound + lowerBound) / 2);
    }
    mergeAccuraciesWithSameName(accuracyTable) {
        let mergedAccuracyTable = [];
        while (accuracyTable.length > 0) {
            let keyAccuracyName = accuracyTable[0].accuracyName;
            let matchedAccuracies = accuracyTable.filter(row => row.accuracyName === keyAccuracyName);
            let sortValueAverage = matchedAccuracies
                .reduce((sum, row) => sum + row.sortValue, 0)
                / matchedAccuracies.length;
            mergedAccuracyTable.push({ accuracyName: keyAccuracyName, sortValue: sortValueAverage });
            accuracyTable = accuracyTable.filter(row => row.accuracyName !== keyAccuracyName);
        }
        return mergedAccuracyTable;
    }
    static accuracyTableSortFunction(a, b) {
        return a.sortValue - b.sortValue;
    }
    drawAccuracyBars(accuracyLabels, bounds, textSize, barWidth, barHeight, barSpacing, numBars, isBooForLastAccuracy) {
        let maxTextWidth = this.getMaxTextWidth(accuracyLabels, textSize);
        let startY = bounds.topLeftY;
        // combo bar
        let barCenterY = this.getBarCenterY(startY, 0, barHeight, barSpacing);
        let combo = this.calculateCombo(this.currentRecording.linearRecording);
        let percentFilled = combo / this.totalNotes;
        this.drawAccuracyBar(bounds.centerX, barCenterY, "Combo", combo.toString(), this.totalNotes.toString(), textSize, maxTextWidth, barWidth, barHeight, percentFilled);
        // other bars
        for (let i = 1; i < numBars; i++) {
            let accuracyLabel = accuracyLabels[i - 1];
            let numAccuracyEvents = this.getNumAccuracyEvents(this.currentRecording.perTrackRecording, accuracyLabel, this.config);
            let percentFilled = numAccuracyEvents / this.totalNotes;
            let barCenterY = this.getBarCenterY(startY, i, barHeight, barSpacing);
            if (isBooForLastAccuracy && i === numBars - 1) {
                this.drawAccuracyWithNoBar(bounds.centerX, barCenterY, accuracyLabel, numAccuracyEvents.toString(), this.totalNotes.toString(), textSize, maxTextWidth, barWidth);
            }
            else {
                this.drawAccuracyBar(bounds.centerX, barCenterY, accuracyLabel, numAccuracyEvents.toString(), this.totalNotes.toString(), textSize, maxTextWidth, barWidth, barHeight, percentFilled);
            }
        }
    }
    getBarCenterY(startY, i, barHeight, barSpacing) {
        return startY + i * (barHeight + barSpacing);
    }
    getNumAccuracyEvents(perTrackRecording, accuracyLabel, config) {
        return perTrackRecording.reduce((sum, trackRecording) => sum + trackRecording.filter(accuracyEvent => _accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].getAccuracyEventName(accuracyEvent.accuracyMillis, config) === accuracyLabel).length, 0);
    }
    getMaxTextWidth(textArray, textSize) {
        let p = this.p;
        p.push();
        p.textSize(textSize);
        let maxTextWidth = textArray.map((string) => p.textWidth(string))
            .reduce((maxWidth, width) => Math.max(maxWidth, width, -1));
        p.pop();
        return maxTextWidth;
    }
    drawAccuracyBar(centerX, centerY, label1, label2, label3, textSize, largestTextWidth, barWidth, barHeight, percentFilled) {
        let spacingBetweenBarAndLabel = 8;
        let totalWidth = largestTextWidth + spacingBetweenBarAndLabel + barWidth;
        let labelRightmostX = centerX - totalWidth / 2 + largestTextWidth;
        this.drawRightAlignedLabel(labelRightmostX, centerY, label1, textSize);
        let barRightX = centerX + totalWidth / 2;
        let barLeftX = barRightX - barWidth;
        let barCenterX = (barLeftX + barRightX) / 2;
        this.drawPartiallyFilledBar(barCenterX, centerY, barWidth, barHeight, percentFilled, textSize, label2, label3);
    }
    drawRightAlignedLabel(rightmostX, centerY, text, textSize) {
        let p = this.p;
        p.push();
        p.fill("white");
        p.textSize(textSize);
        p.textAlign(p.RIGHT, p.CENTER);
        p.text(text, rightmostX, centerY);
        p.pop();
    }
    drawPartiallyFilledBar(centerX, centerY, width, height, percentFilled, textSize, startLabel, endLabel) {
        let p = this.p;
        p.push();
        p.rectMode(p.CENTER);
        p.stroke("white");
        // draw the filled part of the bar
        p.fill("gray");
        p.rect(centerX - (width * (1 - percentFilled) / 2), centerY, width * percentFilled, height);
        // draw the outline of the bar
        p.noFill();
        p.rect(centerX, centerY, width, height);
        // draw the labels on the ends of the bar
        let labelSize = 1.5 * textSize;
        p.fill("white");
        p.textSize(labelSize);
        p.textAlign(p.LEFT, p.CENTER);
        p.text(startLabel, centerX - width / 2, centerY + 2);
        p.textAlign(p.RIGHT, p.CENTER);
        p.text(endLabel, centerX + width / 2, centerY + 2);
        p.pop();
    }
    drawAccuracyWithNoBar(centerX, centerY, label1, label2, label3, textSize, largestTextWidth, barWidth) {
        let spacingBetweenBarAndLabel = 8;
        let totalWidth = largestTextWidth + spacingBetweenBarAndLabel + barWidth;
        let labelRightmostX = centerX - totalWidth / 2 + largestTextWidth;
        this.drawRightAlignedLabel(labelRightmostX, centerY, label1, textSize);
        // draw the accuracy count label on the left end of the bar
        let labelSize = 1.5 * textSize;
        let barRightX = centerX + totalWidth / 2;
        let barLeftX = barRightX - barWidth;
        let barCenterX = (barLeftX + barRightX) / 2;
        let p = this.p;
        p.push();
        p.fill("white");
        p.textSize(labelSize);
        p.textAlign(p.LEFT, p.CENTER);
        p.text(label2, barCenterX - barWidth / 2, centerY + 2);
        p.pop();
    }
    drawLeftAlignedText(leftX, centerY, text, textSize) {
        let p = this.p;
        p.push();
        p.fill("white");
        p.textSize(textSize);
        p.textAlign(p.LEFT, p.CENTER);
        p.text(text, leftX, centerY);
        p.pop();
    }
    drawCenteredText(centerX, centerY, text, textSize) {
        let p = this.p;
        p.push();
        p.fill("white");
        p.textSize(textSize);
        p.textAlign(p.CENTER, p.CENTER);
        p.text(text, centerX, centerY);
        p.pop();
    }
    calculateCombo(entries) {
        let maxCombo = 0;
        let combo = 0;
        for (let i = 0; i < entries.length; i++) {
            let entry = entries[i];
            if (_accuracy_util__WEBPACK_IMPORTED_MODULE_1__["AccuracyUtil"].eventIsAHit(entry, this.config)) {
                combo++;
            }
            else {
                combo = 0;
            }
            if (combo > maxCombo) {
                maxCombo = combo;
            }
        }
        return maxCombo;
    }
}


/***/ }),

/***/ "./src/scripts/pages/replay/replay.ts":
/*!********************************************!*\
  !*** ./src/scripts/pages/replay/replay.ts ***!
  \********************************************/
/*! exports provided: Replay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Replay", function() { return Replay; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");

class Replay {
    static draw() {
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance.background("black");
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].replayDisplay.draw();
    }
}


/***/ }),

/***/ "./src/scripts/pages/replay/replay_display.ts":
/*!****************************************************!*\
  !*** ./src/scripts/pages/replay/replay_display.ts ***!
  \****************************************************/
/*! exports provided: ReplayDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplayDisplay", function() { return ReplayDisplay; });
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../accuracy_feedback_flash */ "./src/scripts/accuracy_feedback_flash.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../accuracy_feedback_text */ "./src/scripts/accuracy_feedback_text.ts");
/* harmony import */ var _hold_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hold_manager */ "./src/scripts/hold_manager.ts");
/* harmony import */ var _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../receptor_shrink_reaction */ "./src/scripts/receptor_shrink_reaction.ts");
/* harmony import */ var _note_manager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../note_manager */ "./src/scripts/note_manager.ts");
/* harmony import */ var _hold_glow__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hold_glow */ "./src/scripts/hold_glow.ts");
/* harmony import */ var _error_bar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../error_bar */ "./src/scripts/error_bar.ts");
/* harmony import */ var _hold_particles__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hold_particles */ "./src/scripts/hold_particles.ts");
/* harmony import */ var _combo_text__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../combo_text */ "./src/scripts/combo_text.ts");
/* harmony import */ var _display_manager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../display_manager */ "./src/scripts/display_manager.ts");
/* harmony import */ var _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../accuracy_feedback_particles */ "./src/scripts/accuracy_feedback_particles.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../rectangle */ "./src/scripts/rectangle.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../note */ "./src/scripts/note.ts");
/* harmony import */ var _playing_config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../playing_config */ "./src/scripts/playing_config.ts");
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _game_time_manager__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../game_time_manager */ "./src/scripts/game_time_manager.ts");
/* harmony import */ var _scroll_manager__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../scroll_manager */ "./src/scripts/scroll_manager.ts");
/* harmony import */ var _play_results_results_display__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../play_results/results_display */ "./src/scripts/pages/play_results/results_display.ts");
/* harmony import */ var _play_results_play_results__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../play_results/play_results */ "./src/scripts/pages/play_results/play_results.ts");
/* harmony import */ var _replay_manager__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../replay_manager */ "./src/scripts/replay_manager.ts");
/* harmony import */ var _accuracy_manager__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../accuracy_manager */ "./src/scripts/accuracy_manager.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../accuracy_util */ "./src/scripts/accuracy_util.ts");

























class ReplayDisplay {
    constructor(tracks, audioFile, config, scene, returnPage, replay) {
        this.isDebugMode = false;
        this.bounds = _rectangle__WEBPACK_IMPORTED_MODULE_14__["Rectangle"].fromTopLeft((scene.sketchInstance.width - 240) / 2, (scene.sketchInstance.height - 480) / 2, 240, 480);
        this.songTitle = replay.songTitle;
        this.showResultsScreen = false;
        this.audioFile = audioFile;
        this.config = config;
        this.scene = scene;
        this.returnPage = returnPage;
        this.noteManager = new _note_manager__WEBPACK_IMPORTED_MODULE_7__["NoteManager"](tracks);
        let numTracks = this.noteManager.tracks.length;
        this.accuracyRecording = _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__["AccuracyRecording"].ofReplay(replay);
        this.displayConfig = new _playing_config__WEBPACK_IMPORTED_MODULE_16__["PlayingConfig"](this.config, numTracks);
        this.displayManager = new _display_manager__WEBPACK_IMPORTED_MODULE_12__["DisplayManager"](this.noteManager, this.displayConfig, this.scene.sketchInstance, this.bounds);
        this.holdParticles = new _hold_particles__WEBPACK_IMPORTED_MODULE_10__["HoldParticles"](this.config, numTracks, this.displayManager);
        this.holdGlow = new _hold_glow__WEBPACK_IMPORTED_MODULE_8__["HoldGlow"](this.config, numTracks, this.displayManager);
        this.holdManager = new _hold_manager__WEBPACK_IMPORTED_MODULE_5__["HoldManager"](numTracks, this.onTrackHold.bind(this), this.onTrackUnhold.bind(this));
        this.gameEndTime = this.calculateGameEnd();
        this.replayManager = new _replay_manager__WEBPACK_IMPORTED_MODULE_22__["ReplayManager"](this.config, this.accuracyRecording, this.holdManager, this.handleAccuracyEvent.bind(this), this.handlePlayerKeyEvent.bind(this));
        this.accuracyManager = new _accuracy_manager__WEBPACK_IMPORTED_MODULE_23__["AccuracyManager"](this.noteManager, this.config, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.accuracyFeedbackText = new _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_4__["AccuracyFeedbackText"](this.bounds.center, this.config);
        this.comboText = new _combo_text__WEBPACK_IMPORTED_MODULE_11__["ComboText"](new _point_2d__WEBPACK_IMPORTED_MODULE_17__["Point2D"](this.bounds.center.x, this.bounds.center.y + 18), this.config);
        this.accuracyFeedbackFlash = new _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_1__["AccuracyFeedbackFlash"](this.config, this.displayManager, numTracks);
        this.receptorShrinkReaction = new _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_6__["ReceptorShrinkReaction"](this.config, this.displayConfig, numTracks);
        this.accuracyFeedbackParticles = new _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_13__["AccuracyFeedbackParticles"](this.config, this.displayManager, numTracks);
        this.errorBar = new _error_bar__WEBPACK_IMPORTED_MODULE_9__["ErrorBar"](this.config);
        this.bindKeyBindingsToActions();
        // initialize the time manager and play the audio as close together as possible to synchronize the audio with the game
        if (!this.isDebugMode) {
            this.timeManager = new _game_time_manager__WEBPACK_IMPORTED_MODULE_18__["GameTimeManager"](this.config);
            this.audioFile.play(config.pauseAtStartInSeconds);
        }
        if (this.isDebugMode) {
            this.timeManager = new _scroll_manager__WEBPACK_IMPORTED_MODULE_19__["ScrollManager"](this.config, this.scene.sketchInstance);
        }
    }
    handleAccuracyEvent(accuracyEvent) {
        this.accuracyFeedbackParticles.update(accuracyEvent);
        this.accuracyFeedbackText.update(accuracyEvent);
        this.accuracyFeedbackFlash.update(accuracyEvent);
        this.comboText.update(accuracyEvent);
        if (this.liveComparison !== undefined) {
            this.liveComparison.update(accuracyEvent);
        }
        this.errorBar.update(accuracyEvent);
        this.handleMiss(accuracyEvent);
    }
    draw() {
        let currentTimeInSeconds = this.timeManager.getCurrentTimeInSeconds(performance.now());
        if (currentTimeInSeconds >= this.gameEndTime && !this.showResultsScreen) {
            this.accuracyRecording.state = _accuracy_recording__WEBPACK_IMPORTED_MODULE_0__["AccuracyRecordingState"].READY;
            this.endSong();
        }
        this.replayManager.update(currentTimeInSeconds);
        this.displayManager.draw(currentTimeInSeconds);
        this.receptorShrinkReaction.draw();
        if (this.config.isAccuracyTextEnabled) {
            this.accuracyFeedbackText.draw(currentTimeInSeconds);
        }
        if (this.config.isComboTextEnabled) {
            this.comboText.draw(currentTimeInSeconds);
        }
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.draw(currentTimeInSeconds);
        }
        if (this.config.isAccuracyFlashEnabled) {
            this.accuracyFeedbackFlash.draw(currentTimeInSeconds);
        }
        if (this.config.isAccuracyParticlesEnabled) {
            this.accuracyFeedbackParticles.draw(currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.draw(currentTimeInSeconds);
        }
        if (this.liveComparison !== undefined && this.config.isLiveComparisonEnabled) {
            this.liveComparison.draw(currentTimeInSeconds);
        }
        if (this.config.isErrorBarEnabled) {
            this.errorBar.draw(currentTimeInSeconds);
        }
    }
    calculateGameEnd() {
        let audioDuration = this.audioFile.getDuration();
        let notesEndTime = this.getNotesEndTime();
        if (audioDuration < notesEndTime) {
            return notesEndTime + 1;
        }
        return Math.min(notesEndTime + 5, audioDuration);
    }
    getNotesEndTime() {
        let earliestAccuracy;
        if (this.config.accuracySettings[this.config.accuracySettings.length - 1].upperBound !== null) {
            earliestAccuracy = this.config.accuracySettings[this.config.accuracySettings.length - 1].upperBound;
        }
        else {
            earliestAccuracy = this.config.accuracySettings[this.config.accuracySettings.length - 2].upperBound;
        }
        return this.noteManager.getLatestNote().timeInSeconds + earliestAccuracy / 1000;
    }
    endSong() {
        this.audioFile.stop();
        _index__WEBPACK_IMPORTED_MODULE_3__["global"].resultsDisplay = new _play_results_results_display__WEBPACK_IMPORTED_MODULE_20__["ResultsDisplay"](this.config, this.noteManager, this.scene.sketchInstance, this.accuracyRecording, this.comparisonReplay, this.songTitle, this.returnPage);
        this.unbindKeys();
        clearInterval(this.timeDiffInterval);
        _play_results_play_results__WEBPACK_IMPORTED_MODULE_21__["PlayResults"].messageFromLastPlay = {
            accuracyRecording: this.accuracyRecording,
            noteManager: this.noteManager,
            returnPage: this.returnPage,
            songTitle: this.songTitle,
            saveEnabled: false
        };
        _page_manager__WEBPACK_IMPORTED_MODULE_2__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_2__["Pages"].PLAY_RESULTS);
    }
    bindKeyBindingsToActions() {
        _index__WEBPACK_IMPORTED_MODULE_3__["global"].keyboardEventManager.bindKeyToAction(_index__WEBPACK_IMPORTED_MODULE_3__["global"].config.quitKey, () => {
            this.endSong();
        });
        // bind key to nothing to make sure the default behavior is prevented
        let spacebarKeyCode = 32;
        _index__WEBPACK_IMPORTED_MODULE_3__["global"].keyboardEventManager.bindKeyToAction(spacebarKeyCode, () => {
        });
    }
    handlePlayerKeyEvent(playerKeyEvent) {
        this.receptorShrinkReaction.update(playerKeyEvent);
        this.accuracyManager.handlePlayerKeyEvent(playerKeyEvent);
    }
    onTrackHold(trackNumber, currentTimeInSeconds) {
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.holdTrack.call(this.holdGlow, trackNumber, currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.holdTrack.call(this.holdParticles, trackNumber, currentTimeInSeconds);
        }
    }
    onTrackUnhold(trackNumber, currentTimeInSeconds) {
        if (this.config.isHoldGlowEnabled) {
            this.holdGlow.unholdTrack.call(this.holdGlow, trackNumber, currentTimeInSeconds);
        }
        if (this.config.isHoldParticlesEnabled) {
            this.holdParticles.unholdTrack.call(this.holdParticles, trackNumber, currentTimeInSeconds);
        }
    }
    unbindKeys() {
        _index__WEBPACK_IMPORTED_MODULE_3__["global"].keyboardEventManager.unbindKey(_index__WEBPACK_IMPORTED_MODULE_3__["global"].config.quitKey);
        let keyBindings = _index__WEBPACK_IMPORTED_MODULE_3__["global"].config.keyBindings.get(this.noteManager.tracks.length);
        for (let i = 0; i < keyBindings.length; i++) {
            let keyBinding = keyBindings[i];
            _index__WEBPACK_IMPORTED_MODULE_3__["global"].keyboardEventManager.unbindKey(keyBinding.keyCode);
        }
    }
    handleMiss(accuracyEvent) {
        if (_accuracy_util__WEBPACK_IMPORTED_MODULE_24__["AccuracyUtil"].MISS_ACCURACY_FLAG !== accuracyEvent.accuracyMillis) {
            return;
        }
        let track = this.noteManager.tracks[accuracyEvent.trackNumber];
        let missedNote = track[accuracyEvent.noteIndex];
        missedNote.state = _note__WEBPACK_IMPORTED_MODULE_15__["NoteState"].MISSED;
        if (missedNote.type === _note__WEBPACK_IMPORTED_MODULE_15__["NoteType"].TAIL) {
            if (this.holdManager.isTrackHeld(accuracyEvent.trackNumber)) {
                // Force a hold release upon missing the tail
                this.holdManager.unholdTrack(accuracyEvent.trackNumber, accuracyEvent.timeInSeconds);
            }
        }
        else if (missedNote.type === _note__WEBPACK_IMPORTED_MODULE_15__["NoteType"].HOLD_HEAD) {
            let nextNote = track[accuracyEvent.noteIndex + 1];
            if (nextNote !== undefined) {
                if (nextNote.type === _note__WEBPACK_IMPORTED_MODULE_15__["NoteType"].TAIL) {
                    nextNote.state = _note__WEBPACK_IMPORTED_MODULE_15__["NoteState"].MISSED; // Miss the tail when you miss the head
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/scripts/pages/storage/replays.ts":
/*!**********************************************!*\
  !*** ./src/scripts/pages/storage/replays.ts ***!
  \**********************************************/
/*! exports provided: Replays */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Replays", function() { return Replays; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _radio_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../radio_table */ "./src/scripts/radio_table.ts");
/* harmony import */ var _page_controls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../page_controls */ "./src/scripts/page_controls.ts");
/* harmony import */ var _replays_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./replays_list */ "./src/scripts/pages/storage/replays_list.ts");
/* harmony import */ var _storage_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../storage_util */ "./src/scripts/storage_util.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _replay_replay_display__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../replay/replay_display */ "./src/scripts/pages/replay/replay_display.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");









class Replays {
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["drawHeading"])();
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_0__["global"].playFromFileBackground);
        let replaysMenuId = "storage-menu";
        if (Replays.replaysList.state === _replays_list__WEBPACK_IMPORTED_MODULE_4__["ReplaysListState"].NO_STORAGE) {
            Replays.replaysList.kickOffLoadReplaysList(_storage_util__WEBPACK_IMPORTED_MODULE_5__["StorageUtil"].getKeyFromTracks(this.stepfile.tracks));
        }
        let viewReplayButtonId = "viewReplayButton";
        if (Replays.replaysList.state === _replays_list__WEBPACK_IMPORTED_MODULE_4__["ReplaysListState"].STORAGE_READY) {
            let pageControls = _page_controls__WEBPACK_IMPORTED_MODULE_3__["PageControls"].create(replaysMenuId, Replays.replaysList).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(pageControls, 0.5, 0.3, 140, 30);
            let replaysMenu = _radio_table__WEBPACK_IMPORTED_MODULE_2__["RadioTable"].create(replaysMenuId, 630, 300, [50, 25, 25], ["Timestamp", "Score", "Size"], Replays.replaysList.currentContents).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(replaysMenu, 0.5, 0.60, 630, 260);
            if (this.replayIsSelected(replaysMenu)) {
                let viewReplayButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_6__["DOMWrapper"].create(() => {
                    return p.createButton("View Replay");
                }, viewReplayButtonId);
                Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(viewReplayButton.element, 0.5, 0.2, 106, 34);
                if (!viewReplayButton.alreadyExists) {
                    viewReplayButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
                    this.setViewReplayButtonBehavior(viewReplayButton.element, replaysMenu);
                }
            }
        }
    }
    static initialize(stepfile, audioFile, returnPage) {
        Replays.stepfile = stepfile;
        Replays.audioFile = audioFile;
        Replays.replaysList = new _replays_list__WEBPACK_IMPORTED_MODULE_4__["ReplaysList"](_index__WEBPACK_IMPORTED_MODULE_0__["global"].config);
        Replays.returnPage = returnPage;
    }
    static replayIsSelected(replayRadio) {
        return replayRadio.value() !== "";
    }
    static setViewReplayButtonBehavior(button, replayRadio) {
        button.mouseClicked(() => {
            let indexOnCurrentPage = Number(replayRadio.value());
            let replay = this.replaysList.getReplay(indexOnCurrentPage);
            _index__WEBPACK_IMPORTED_MODULE_0__["global"].replayDisplay = new _replay_replay_display__WEBPACK_IMPORTED_MODULE_7__["ReplayDisplay"](this.stepfile.tracks, this.audioFile, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config, _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene, this.returnPage, replay);
            _page_manager__WEBPACK_IMPORTED_MODULE_8__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_8__["Pages"].REPLAY);
        });
    }
}


/***/ }),

/***/ "./src/scripts/pages/storage/replays_list.ts":
/*!***************************************************!*\
  !*** ./src/scripts/pages/storage/replays_list.ts ***!
  \***************************************************/
/*! exports provided: ReplaysListState, ReplaysList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaysListState", function() { return ReplaysListState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaysList", function() { return ReplaysList; });
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");
/* harmony import */ var _score_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../score_provider */ "./src/scripts/score_provider.ts");
/* harmony import */ var _paginated_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../paginated_list */ "./src/scripts/paginated_list.ts");



var ReplaysListState;
(function (ReplaysListState) {
    ReplaysListState[ReplaysListState["NO_STORAGE"] = 0] = "NO_STORAGE";
    ReplaysListState[ReplaysListState["LOADING_STORAGE"] = 1] = "LOADING_STORAGE";
    ReplaysListState[ReplaysListState["STORAGE_READY"] = 2] = "STORAGE_READY";
    ReplaysListState[ReplaysListState["STORAGE_ERROR"] = 3] = "STORAGE_ERROR";
})(ReplaysListState || (ReplaysListState = {}));
class ReplaysList extends _paginated_list__WEBPACK_IMPORTED_MODULE_2__["PaginatedList"] {
    constructor(config) {
        super();
        this.config = config;
        this.state = ReplaysListState.NO_STORAGE;
        this.storageClient = _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_0__["OfflineStorageClient"];
    }
    kickOffLoadReplaysList(key) {
        this.state = ReplaysListState.LOADING_STORAGE;
        this.allContents = [];
        this.storageClient.loadReplaysCompressed(key)
            .then((replays) => {
            this.compressedReplays = replays;
            for (let i = replays.length - 1; i >= 0; i--) {
                let entryColumns = this.storageEntryToColumns(replays[i]);
                this.allContents.push(entryColumns);
            }
        })
            .then(() => {
            this.setPage(0);
            this.state = ReplaysListState.STORAGE_READY;
        })
            .catch(() => this.state = ReplaysListState.STORAGE_ERROR);
    }
    storageEntryToColumns(compressedReplay) {
        let replay = this.storageClient.getUncompressedReplay(compressedReplay);
        let scoreProvider = new _score_provider__WEBPACK_IMPORTED_MODULE_1__["ScoreProvider"](this.config, replay.numNotes);
        let score = scoreProvider.score(replay.entries);
        let storedSizeKb = JSON.stringify(compressedReplay).length / 1000;
        let timestamp = replay.timestamp;
        let scoreString = score.percentScore.toFixed(2) + "%";
        let storedSize = storedSizeKb.toFixed(1) + " KB";
        return [timestamp, scoreString, storedSize];
    }
    getReplay(indexOnCurrentPage) {
        let index = this.currentPage * this.pageSize + indexOnCurrentPage;
        let reversedIndex = this.allContents.length - index - 1;
        let compressedReplay = this.compressedReplays[reversedIndex];
        return this.storageClient.getUncompressedReplay(compressedReplay);
    }
}


/***/ }),

/***/ "./src/scripts/pages/storage/storage.ts":
/*!**********************************************!*\
  !*** ./src/scripts/pages/storage/storage.ts ***!
  \**********************************************/
/*! exports provided: Storage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Storage", function() { return Storage; });
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _storage_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage_list */ "./src/scripts/pages/storage/storage_list.ts");
/* harmony import */ var _radio_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../radio_table */ "./src/scripts/radio_table.ts");
/* harmony import */ var _page_controls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../page_controls */ "./src/scripts/page_controls.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");







class Storage {
    static draw() {
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["drawHeading"])();
        let storageList = _index__WEBPACK_IMPORTED_MODULE_1__["global"].storageList;
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        p.background(_index__WEBPACK_IMPORTED_MODULE_1__["global"].playFromFileBackground);
        let storageMenuId = "storage-menu";
        let loadStorageButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            return p.createButton("Load");
        }, "loadStorageButton");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(loadStorageButton.element, 0.5, 0.2, 62, 33);
        if (!loadStorageButton.alreadyExists) {
            loadStorageButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            loadStorageButton.element.mouseClicked(() => {
                Object(_util__WEBPACK_IMPORTED_MODULE_6__["disableButton"])(loadStorageButton.element);
                _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].removeElementById(storageMenuId);
                storageList.kickOffLoadStorageList();
            });
        }
        if (storageList.state === _storage_list__WEBPACK_IMPORTED_MODULE_3__["StorageListState"].STORAGE_READY) {
            Object(_util__WEBPACK_IMPORTED_MODULE_6__["enableButton"])(loadStorageButton.element);
            let pageControls = _page_controls__WEBPACK_IMPORTED_MODULE_5__["PageControls"].create(storageMenuId, storageList).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(pageControls, 0.5, 0.3, 140, 30);
            let storageMenu = _radio_table__WEBPACK_IMPORTED_MODULE_4__["RadioTable"].create(storageMenuId, 630, 300, [60, 16, 10, 14], ["Song Title", "Top Score", "Replays", "Size"], storageList.currentContents).element;
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(storageMenu, 0.5, 0.60, 630, 260);
        }
    }
}


/***/ }),

/***/ "./src/scripts/pages/storage/storage_list.ts":
/*!***************************************************!*\
  !*** ./src/scripts/pages/storage/storage_list.ts ***!
  \***************************************************/
/*! exports provided: StorageListState, StorageList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageListState", function() { return StorageListState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageList", function() { return StorageList; });
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");
/* harmony import */ var _score_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../score_provider */ "./src/scripts/score_provider.ts");
/* harmony import */ var _paginated_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../paginated_list */ "./src/scripts/paginated_list.ts");



var StorageListState;
(function (StorageListState) {
    StorageListState[StorageListState["NO_STORAGE"] = 0] = "NO_STORAGE";
    StorageListState[StorageListState["LOADING_STORAGE"] = 1] = "LOADING_STORAGE";
    StorageListState[StorageListState["STORAGE_READY"] = 2] = "STORAGE_READY";
    StorageListState[StorageListState["STORAGE_ERROR"] = 3] = "STORAGE_ERROR";
})(StorageListState || (StorageListState = {}));
class StorageList extends _paginated_list__WEBPACK_IMPORTED_MODULE_2__["PaginatedList"] {
    constructor(config) {
        super();
        this.config = config;
        this.state = StorageListState.NO_STORAGE;
        this.storageClient = _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_0__["OfflineStorageClient"];
    }
    kickOffLoadStorageList() {
        this.state = StorageListState.LOADING_STORAGE;
        this.allContents = [];
        this.storageClient.iterate((value, key) => {
            let entryColumns = this.storageEntryToColumns(key, value);
            this.allContents.push(entryColumns);
        })
            .then(() => {
            this.setPage(0);
            this.state = StorageListState.STORAGE_READY;
        })
            .catch(() => this.state = StorageListState.STORAGE_ERROR);
    }
    storageEntryToColumns(key, value) {
        if (key.length > 120) {
            let replays = this.storageClient.stringToReplays(value);
            let scoreProvider = new _score_provider__WEBPACK_IMPORTED_MODULE_1__["ScoreProvider"](this.config, replays[0].numNotes);
            let bestReplay = this.storageClient.getBestReplay(replays, scoreProvider);
            let bestScore = scoreProvider.score(bestReplay.entries);
            let storedSizeKb = value.length / 1000;
            let songTitle = bestReplay.songTitle;
            let bestScoreString = bestScore.percentScore.toFixed(2) + "%";
            let numReplays = String(replays.length);
            let storedSize = storedSizeKb.toFixed(1) + " KB";
            return [songTitle, bestScoreString, numReplays, storedSize];
        }
        else {
            let item = value;
            let storedSizeKb = JSON.stringify(item).length / 1000;
            let storedSize = storedSizeKb.toFixed(1) + " KB";
            return [key, "", "", storedSize];
        }
    }
}


/***/ }),

/***/ "./src/scripts/pages/sync/sync.ts":
/*!****************************************!*\
  !*** ./src/scripts/pages/sync/sync.ts ***!
  \****************************************/
/*! exports provided: Sync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sync", function() { return Sync; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");

class Sync {
    static draw() {
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance.background("black");
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].syncGameDisplay.draw();
    }
}


/***/ }),

/***/ "./src/scripts/pages/sync/sync_game_display.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/pages/sync/sync_game_display.ts ***!
  \*****************************************************/
/*! exports provided: SyncGameDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SyncGameDisplay", function() { return SyncGameDisplay; });
/* harmony import */ var _display_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../display_manager */ "./src/scripts/display_manager.ts");
/* harmony import */ var _note_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../note_manager */ "./src/scripts/note_manager.ts");
/* harmony import */ var _miss_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../miss_manager */ "./src/scripts/miss_manager.ts");
/* harmony import */ var _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../accuracy_manager */ "./src/scripts/accuracy_manager.ts");
/* harmony import */ var _scroll_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../scroll_manager */ "./src/scripts/scroll_manager.ts");
/* harmony import */ var _hold_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hold_manager */ "./src/scripts/hold_manager.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./src/scripts/util.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _accuracy_recording__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../accuracy_recording */ "./src/scripts/accuracy_recording.ts");
/* harmony import */ var _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../accuracy_feedback_text */ "./src/scripts/accuracy_feedback_text.ts");
/* harmony import */ var _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../receptor_shrink_reaction */ "./src/scripts/receptor_shrink_reaction.ts");
/* harmony import */ var _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../accuracy_feedback_flash */ "./src/scripts/accuracy_feedback_flash.ts");
/* harmony import */ var _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../accuracy_feedback_particles */ "./src/scripts/accuracy_feedback_particles.ts");
/* harmony import */ var _hold_particles__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hold_particles */ "./src/scripts/hold_particles.ts");
/* harmony import */ var _hold_glow__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hold_glow */ "./src/scripts/hold_glow.ts");
/* harmony import */ var _playing_config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../playing_config */ "./src/scripts/playing_config.ts");
/* harmony import */ var _sync_results_sync_results_display__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../sync_results/sync_results_display */ "./src/scripts/pages/sync_results/sync_results_display.ts");
/* harmony import */ var _game_time_manager__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../game_time_manager */ "./src/scripts/game_time_manager.ts");
/* harmony import */ var _abstract_playing_display__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../abstract_playing_display */ "./src/scripts/abstract_playing_display.ts");
/* harmony import */ var _combo_text__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../combo_text */ "./src/scripts/combo_text.ts");
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../point_2d */ "./src/scripts/point_2d.ts");
/* harmony import */ var _error_bar__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../error_bar */ "./src/scripts/error_bar.ts");























class SyncGameDisplay extends _abstract_playing_display__WEBPACK_IMPORTED_MODULE_19__["AbstractPlayingDisplay"] {
    constructor(tracks, audioFile, config, scene, returnPage, songTitle) {
        super(tracks, audioFile, config, scene, returnPage, songTitle);
        this.initialize(tracks, audioFile, config, scene, returnPage);
    }
    replay() {
        this.initialize(this.noteManager.tracks, this.audioFile, this.config, this.scene, this.returnPage);
    }
    initialize(tracks, audioFile, config, scene, returnPage) {
        this.showResultsScreen = false;
        this.audioFile = audioFile;
        this.config = config;
        this.scene = scene;
        this.returnPage = returnPage;
        this.noteManager = new _note_manager__WEBPACK_IMPORTED_MODULE_1__["NoteManager"](tracks);
        let skipTimePosition = this.noteManager.getEarliestNote().timeInSeconds -
            this.config.additionalOffsetInSeconds - 2;
        let partialConfig = {
            additionalOffsetInSeconds: this.config.additionalOffsetInSeconds,
            pauseAtStartInSeconds: -skipTimePosition,
            scrollDirection: this.config.scrollDirection
        };
        this.noteManager.hideAllNotesAfterIndex(19);
        let numTracks = this.noteManager.tracks.length;
        this.accuracyRecording = new _accuracy_recording__WEBPACK_IMPORTED_MODULE_9__["AccuracyRecording"](numTracks);
        this.displayConfig = new _playing_config__WEBPACK_IMPORTED_MODULE_16__["PlayingConfig"](this.config, numTracks);
        this.displayManager = new _display_manager__WEBPACK_IMPORTED_MODULE_0__["DisplayManager"](this.noteManager, this.displayConfig, this.scene.sketchInstance, this.bounds);
        this.holdParticles = new _hold_particles__WEBPACK_IMPORTED_MODULE_14__["HoldParticles"](this.config, numTracks, this.displayManager);
        this.holdGlow = new _hold_glow__WEBPACK_IMPORTED_MODULE_15__["HoldGlow"](this.config, numTracks, this.displayManager);
        this.holdManager = new _hold_manager__WEBPACK_IMPORTED_MODULE_5__["HoldManager"](numTracks, this.onTrackHold.bind(this), this.onTrackUnhold.bind(this));
        this.gameEndTime = this.calculateGameEnd();
        this.accuracyManager = new _accuracy_manager__WEBPACK_IMPORTED_MODULE_3__["AccuracyManager"](this.noteManager, this.config, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.missManager = new _miss_manager__WEBPACK_IMPORTED_MODULE_2__["MissManager"](this.config, this.noteManager, this.accuracyRecording, this.holdManager, this.handleAccuracyEvent.bind(this));
        this.accuracyFeedbackText = new _accuracy_feedback_text__WEBPACK_IMPORTED_MODULE_10__["AccuracyFeedbackText"](this.bounds.center, this.config);
        this.comboText = new _combo_text__WEBPACK_IMPORTED_MODULE_20__["ComboText"](new _point_2d__WEBPACK_IMPORTED_MODULE_21__["Point2D"](this.bounds.center.x, this.bounds.center.y + 18), this.config);
        this.accuracyFeedbackFlash = new _accuracy_feedback_flash__WEBPACK_IMPORTED_MODULE_12__["AccuracyFeedbackFlash"](this.config, this.displayManager, numTracks);
        this.receptorShrinkReaction = new _receptor_shrink_reaction__WEBPACK_IMPORTED_MODULE_11__["ReceptorShrinkReaction"](this.config, this.displayConfig, numTracks);
        this.accuracyFeedbackParticles = new _accuracy_feedback_particles__WEBPACK_IMPORTED_MODULE_13__["AccuracyFeedbackParticles"](this.config, this.displayManager, numTracks);
        this.errorBar = new _error_bar__WEBPACK_IMPORTED_MODULE_22__["ErrorBar"](this.config);
        if (!Object(_util__WEBPACK_IMPORTED_MODULE_6__["isKeyBindingsDefined"])(numTracks)) {
            Object(_util__WEBPACK_IMPORTED_MODULE_6__["initializeKeyBindings"])(numTracks);
        }
        this.bindKeyBindingsToActions();
        // initialize the time manager and play the audio as close together as possible to synchronize the audio with the game
        if (!this.isDebugMode) {
            this.timeManager = new _game_time_manager__WEBPACK_IMPORTED_MODULE_18__["GameTimeManager"](partialConfig);
            this.audioFile.playFromTimeInSeconds(skipTimePosition);
            // This is just for debugging
            this.timeDiffInterval = setInterval(() => {
                let audioTime = this.audioFile.getCurrentTimeInSeconds();
                console.log("Audio time: " + audioTime);
                let gameTime = this.timeManager.getCurrentTimeInSeconds(performance.now());
                console.log("Game time: " + gameTime);
                let timeDiff = audioTime - gameTime;
                console.log("Time diff: " + timeDiff);
            }, 5000);
        }
        if (this.isDebugMode) {
            this.timeManager = new _scroll_manager__WEBPACK_IMPORTED_MODULE_4__["ScrollManager"](partialConfig, this.scene.sketchInstance);
        }
    }
    getNotesEndTime() {
        let earliestAccuracy;
        if (this.config.accuracySettings[this.config.accuracySettings.length - 1].upperBound !== null) {
            earliestAccuracy = this.config.accuracySettings[this.config.accuracySettings.length - 1].upperBound;
        }
        else {
            earliestAccuracy = this.config.accuracySettings[this.config.accuracySettings.length - 2].upperBound;
        }
        let latestNote = this.noteManager.getLatestUnhitNote();
        return latestNote.timeInSeconds + earliestAccuracy / 1000;
    }
    calculateGameEnd() {
        let notesEndTime = this.getNotesEndTime();
        return notesEndTime + 0.5;
    }
    endSong() {
        this.audioFile.stop();
        _index__WEBPACK_IMPORTED_MODULE_7__["global"].syncResultsDisplay = new _sync_results_sync_results_display__WEBPACK_IMPORTED_MODULE_17__["SyncResultsDisplay"](this.accuracyRecording, this.accuracyManager, this.config);
        _page_manager__WEBPACK_IMPORTED_MODULE_8__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_8__["Pages"].SYNC_RESULTS);
        this.unbindKeys();
        clearInterval(this.timeDiffInterval);
    }
}


/***/ }),

/***/ "./src/scripts/pages/sync_results/sync_results.ts":
/*!********************************************************!*\
  !*** ./src/scripts/pages/sync_results/sync_results.ts ***!
  \********************************************************/
/*! exports provided: SyncResults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SyncResults", function() { return SyncResults; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");




class SyncResults {
    static draw() {
        let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
        p.background("black");
        _index__WEBPACK_IMPORTED_MODULE_0__["global"].syncResultsDisplay.draw();
        let applyButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
            return p.createButton("Apply Changes");
        }, "applyButton");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(applyButton.element, 0.5, 0.8, 120, 34);
        if (!applyButton.alreadyExists) {
            applyButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
            applyButton.element.mouseClicked(() => {
                _index__WEBPACK_IMPORTED_MODULE_0__["global"].syncResultsDisplay.applyRecommendedChange();
                _index__WEBPACK_IMPORTED_MODULE_0__["global"].syncGameDisplay.replay();
                _page_manager__WEBPACK_IMPORTED_MODULE_2__["PageManager"].setCurrentPage(_page_manager__WEBPACK_IMPORTED_MODULE_2__["Pages"].SYNC);
            });
        }
        let returnButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
            return p.createButton("Return");
        }, "returnButton");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_1__["setElementCenterPositionRelative"])(returnButton.element, 0.5, 0.9, 74, 34);
        if (!returnButton.alreadyExists) {
            returnButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
            returnButton.element.mouseClicked(() => {
                _page_manager__WEBPACK_IMPORTED_MODULE_2__["PageManager"].setCurrentPage(_index__WEBPACK_IMPORTED_MODULE_0__["global"].syncGameDisplay.returnPage);
            });
        }
    }
}


/***/ }),

/***/ "./src/scripts/pages/sync_results/sync_results_display.ts":
/*!****************************************************************!*\
  !*** ./src/scripts/pages/sync_results/sync_results_display.ts ***!
  \****************************************************************/
/*! exports provided: SyncResultsDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SyncResultsDisplay", function() { return SyncResultsDisplay; });
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui_util */ "./src/scripts/ui_util.ts");
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../accuracy_util */ "./src/scripts/accuracy_util.ts");




class SyncResultsDisplay {
    constructor(accuracyRecording, accuracyManager, config) {
        this.accuracyRecording = accuracyRecording;
        this.accuracyManager = accuracyManager;
        this.config = config;
        this.calculateResults();
    }
    calculateResults() {
        let events = this.getAllAccuracyEntries();
        this.ignoreBoos(events);
        this.normalizeMissAccuracy(events);
        this.calculateAverageAccuracy(events);
        this.calculateStandardDeviation(events);
        this.calculateRecommendedOffsetChange();
    }
    getAllAccuracyEntries() {
        let events = [];
        for (let i = 0; i < this.accuracyRecording.perTrackRecording.length; i++) {
            let trackEvents = this.accuracyRecording.perTrackRecording[i];
            for (let j = 0; j < trackEvents.length; j++) {
                events.push(trackEvents[j]);
            }
        }
        return events;
    }
    ignoreBoos(events) {
        if (!_accuracy_util__WEBPACK_IMPORTED_MODULE_3__["AccuracyUtil"].isConfiguredForBoos(this.config)) {
            return;
        }
        let boo = this.getLastAccuracy();
        for (let i = 0; i < events.length; i++) {
            if (events[i].accuracyMillis >= boo.lowerBound) {
                events.splice(i, 1);
                i--;
            }
        }
    }
    getLastAccuracy() {
        return this.config.accuracySettings[this.config.accuracySettings.length - 1];
    }
    normalizeMissAccuracy(events) {
        let miss = this.getFirstAccuracy();
        for (let i = 0; i < events.length; i++) {
            if (events[i].accuracyMillis < miss.upperBound) {
                events[i].accuracyMillis = miss.upperBound;
            }
        }
    }
    getFirstAccuracy() {
        return this.config.accuracySettings[0];
    }
    calculateAverageAccuracy(events) {
        let sum = 0;
        for (let i = 0; i < events.length; i++) {
            sum += events[i].accuracyMillis;
        }
        this.averageAccuracy = sum / events.length;
    }
    calculateStandardDeviation(events) {
        let differencesSum = 0;
        for (let i = 0; i < events.length; i++) {
            differencesSum += Math.pow(events[i].accuracyMillis - this.averageAccuracy, 2);
        }
        this.accuracyStdDev = Math.sqrt(differencesSum / (events.length - 1));
    }
    calculateRecommendedOffsetChange() {
        let riskiness = this.accuracyStdDev / 2;
        if (Math.abs(this.averageAccuracy) < riskiness) {
            this.recommendedOffsetChangeMillis = 0;
        }
        else {
            let accuracySign = Math.sign(this.averageAccuracy);
            this.recommendedOffsetChangeMillis = this.averageAccuracy - accuracySign * riskiness;
        }
    }
    draw() {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let myText = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            return p.createElement("span");
        }, "text");
        Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementCenterPositionRelative"])(myText.element, 0.5, 0.5, 300, 37);
        if (!myText.alreadyExists) {
            myText.element.addClass(_index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass);
            myText.element.html(this.getAccuracyResultsText());
        }
    }
    getAccuracyResultsText() {
        let accuracyDirection = this.averageAccuracy < 0 ? "(late)" : "(early)";
        return "Average = " +
            SyncResultsDisplay.formatNumber(this.averageAccuracy) + " " + accuracyDirection +
            ", StdDev = " + SyncResultsDisplay.formatNumber(this.accuracyStdDev) +
            "<br> Recommended change: " + this.getRecommendedChangeText();
    }
    static formatNumber(x) {
        return x.toFixed(0) + "ms";
    }
    getRecommendedChangeText() {
        if (Math.round(this.recommendedOffsetChangeMillis) === 0) {
            return "none";
        }
        else {
            let currentOffset = this.config.additionalOffsetInSeconds * 1000;
            let newOffset = currentOffset + this.recommendedOffsetChangeMillis;
            return SyncResultsDisplay.formatNumber(currentOffset) + " => " + SyncResultsDisplay.formatNumber(newOffset);
        }
    }
    applyRecommendedChange() {
        let newOffsetMillis = Math.round(this.config.additionalOffsetInSeconds * 1000 + this.recommendedOffsetChangeMillis);
        this.config.additionalOffsetInSeconds = newOffsetMillis / 1000;
    }
}


/***/ }),

/***/ "./src/scripts/paginated_list.ts":
/*!***************************************!*\
  !*** ./src/scripts/paginated_list.ts ***!
  \***************************************/
/*! exports provided: PaginatedList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaginatedList", function() { return PaginatedList; });
class PaginatedList {
    getCurrentPage() {
        return this.currentPage;
    }
    nextPage() {
        this.setPage(this.currentPage + 1);
    }
    previousPage() {
        this.setPage(this.currentPage - 1);
    }
    setPage(pageNumber, pageSize) {
        pageSize = this.getValidPageSize(pageSize);
        if (!this.isValidPageNumber(pageNumber, pageSize)) {
            return;
        }
        let minIndex = pageNumber * pageSize;
        let maxIndex = minIndex + pageSize;
        this.currentContents = [];
        for (let i = minIndex; i < maxIndex; i++) {
            if (i < this.allContents.length) {
                this.currentContents.push(this.allContents[i]);
            }
        }
        this.currentPage = pageNumber;
        this.pageSize = pageSize;
    }
    isValidPageNumber(pageNumber, pageSize) {
        return 0 <= pageNumber && pageNumber <= this.getMaxPageNumber(pageSize);
    }
    getValidPageSize(pageSize) {
        if (pageSize === undefined) {
            return PaginatedList.DEFAULT_PAGE_SIZE;
        }
        else if (pageSize < 1) {
            return 1;
        }
        else if (pageSize > 100) {
            return 100;
        }
    }
    getMaxPageNumber(pageSize) {
        return Math.floor(this.allContents.length / pageSize);
    }
}
PaginatedList.DEFAULT_PAGE_SIZE = 50;


/***/ }),

/***/ "./src/scripts/parsing/byte_reader.ts":
/*!********************************************!*\
  !*** ./src/scripts/parsing/byte_reader.ts ***!
  \********************************************/
/*! exports provided: ByteReader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ByteReader", function() { return ByteReader; });
/**
 * File contents originally from:
 * @author: Velocity
 * @github: https://github.com/flashflashrevolution/web-beatbox-editor
 */
const RECORDHEADER_LENGTH_FULL = 0x3f
// null-character
, EOS = 0x00, styleCountExt = 0xFF;
class ByteReader {
    constructor(buffer) {
        this.buffer_raw = buffer;
        this.buffer = new DataView(buffer);
        this.pointer = 0;
        this.position = 1;
        this.current = 0;
        this.length = buffer.byteLength;
    }
    /**
     * Reads unsigned 16 or 32 Little Endian Bits
     * and advance pointer to next bits / 8 bytes
     *
     * @param {Number} bits
     * @return {Number} Value read from buffer
     */
    readUIntLE(bits) {
        let value = 0;
        switch (bits) {
            case 8:
                // @ts-ignore: the second parameter might only exist in ES6, let's see if this causes an error
                value = this.buffer.getUint8(this.pointer, true);
                break;
            case 16:
                value = this.buffer.getUint16(this.pointer, true);
                break;
            case 32:
                value = this.buffer.getUint32(this.pointer, true);
                break;
            default:
                throw "Unexpected number of bits: '" + bits + "'";
        }
        this.pointer += bits / 8;
        return value;
    }
    /**
     * Reads unsigned 8 bit from the buffer
     *
     * @return {Number} Value read from buffer
     */
    readUInt8() {
        return this.buffer.getUint8(this.pointer++);
    }
    ;
    /**
     * Reads float from the buffer
     *
     * @return {Number} Value read from buffer
     */
    readFloat() {
        let value = 0;
        try {
            value = this.buffer.getFloat32(this.pointer, true);
            this.pointer += 4;
        }
        catch (e) {
            throw e;
        }
        return value;
    }
    ;
    /**
     * Reads double from the buffer
     *
     * @return {Number} Value read from buffer
     */
    readDouble() {
        let value = 0;
        try {
            value = this.buffer.getFloat64(this.pointer, true);
            this.pointer += 8;
        }
        catch (e) {
            throw e;
        }
        return value;
    }
    ;
    /**
     * Reads 32-bit unsigned integers value encoded (1-5 bytes)
     *
     * @return {Number} 32-bit unsigned integer
     */
    readEncodedU32() {
        let i = 5, result = 0, nb;
        do
            result += (nb = this.nextByte());
        while ((nb & 128) && --i);
        return result;
    }
    ;
    /**
     * Reads an encoded data from buffer and returns a
     * string using the specified character set.
     *
     * @returns {String} Decoded string
     */
    readString() {
        let str = "";
        while (true) {
            let read = this.readUInt8();
            if (read === EOS)
                break;
            str += String.fromCharCode(read);
        }
        return str;
    }
    ;
    /**
     * Reads an encoded data from buffer and returns a
     * string using the specified character set.
     *
     * @returns {String} Decoded string
     */
    readStringFixed(readLength) {
        let str = "";
        while (readLength-- > 0) {
            let read = this.readUInt8();
            if (read === EOS)
                break;
            str += String.fromCharCode(read);
        }
        return str;
    }
    ;
    /**
     * Reads RECORDHEADER from next tag in the buffer
     *
     * @return {Object} Tag code and length
     */
    readTagCodeAndLength() {
        let p = this.pointer;
        let n = this.readUIntLE(16), tagType = n >> 6, tagLength = n & RECORDHEADER_LENGTH_FULL;
        if (n === 0)
            return null;
        if (tagLength === RECORDHEADER_LENGTH_FULL)
            tagLength = this.readUIntLE(32);
        return { start: p, end: this.pointer + tagLength, code: tagType, length: tagLength, position: this.pointer };
    }
    ;
    /**
     * Reads RECORDHEADER from next tag in the buffer
     *
     * @return {Object} Tag code and length
     */
    readAction() {
        let s = this.pointer;
        let a = this.readUInt8();
        let l = (a & 0x80) ? this.readUIntLE(16) : 0;
        let p = this.pointer;
        return { start: s, action: a, length: l, position: p };
    }
    ;
    /**
     * Reads RECT format
     *
     * @return {Rect} x, y, width and height of the RECT
     */
    readRect() {
        this.start();
        let NBits = this.readBits(5), Xmin = this.readBits(NBits, true) / 20, Xmax = this.readBits(NBits, true) / 20, Ymin = this.readBits(NBits, true) / 20, Ymax = this.readBits(NBits, true) / 20;
        return {
            x: Xmin,
            y: Ymin,
            width: (Xmax > Xmin ? Xmax - Xmin : Xmin - Xmax),
            height: (Ymax > Ymin ? Ymax - Ymin : Ymin - Ymax)
        };
    }
    /**
     * Sets internal pointer to the specified position;
     *
     * @param {Number} pos
     */
    seek(pos) {
        this.pointer = pos % this.buffer.byteLength;
    }
    ;
    /**
     * Resets position and sets current to next Byte in buffer
     */
    start() {
        this.current = this.nextByte();
        this.position = 1;
    }
    ;
    /**
     * Gets next Byte in the buffer and Increment internal pointer
     *
     * @return {Number} Next byte in buffer
     */
    nextByte() {
        return this.pointer > this.buffer.byteLength ? null : this.buffer.getUint8(this.pointer++);
    }
    ;
    /**
     * Reads b bits from current byte in buffer
     *
     * @param {Number} b
     * @return {Number} Bits read from buffer
     */
    readBits(b, signed = false) {
        let n = 0, r = 0, sign = signed && ++n && ((this.current >> (8 - this.position++)) & 1) ? -1 : 1;
        while (n++ < b) {
            if (this.position > 8)
                this.start();
            r = (r << 1) + ((this.current >> (8 - this.position++)) & 1);
        }
        return sign * r;
    }
    ;
    /**
     * Replace bytes in the ArrayBuffer with the provided bytes.
     * This slices the from `0 -> pointer` and `position_end -> bufferlength`
     * and inserts the given bytes between them.
     *
     * @return {Number} Bits read from buffer
     */
    replaceBytes(new_bytes, postion_end) {
        let buffer1 = this.buffer_raw.slice(0, this.pointer);
        let buffer2 = new_bytes;
        let buffer3 = this.buffer_raw.slice(postion_end);
        let tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength + buffer3.byteLength);
        tmp.set(new Uint8Array(buffer1), 0);
        tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
        tmp.set(new Uint8Array(buffer3), buffer1.byteLength + buffer2.byteLength);
        this.buffer_raw = tmp.buffer;
        this.buffer = new DataView(this.buffer_raw);
        this.pointer = 0;
        this.position = 1;
        this.current = 0;
        this.length = this.buffer.byteLength;
    }
    ;
}


/***/ }),

/***/ "./src/scripts/parsing/parse_sm.ts":
/*!*****************************************!*\
  !*** ./src/scripts/parsing/parse_sm.ts ***!
  \*****************************************/
/*! exports provided: PartialParse, FullParse, getPartialParse, getFullParse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PartialParse", function() { return PartialParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FullParse", function() { return FullParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPartialParse", function() { return getPartialParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFullParse", function() { return getFullParse; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./src/scripts/util.ts");
/* harmony import */ var _rhythm_classifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rhythm_classifier */ "./src/scripts/rhythm_classifier.ts");


class PartialParse {
}
class FullParse {
    constructor(partialParse) {
        this.metaData = partialParse.metaData;
        this.modes = partialParse.modes;
    }
}
/* Step One Of Parsing */
function getPartialParse(fileContents) {
    let partialParse = new PartialParse();
    partialParse.metaData = getTopMetaDataAsStrings(fileContents);
    partialParse.modes = getModesInfoAsStrings(fileContents);
    return partialParse;
}
function getTopMetaDataAsStrings(file) {
    // match any metadata tag excluding the "NOTES" tag (case-insensitive)
    let re = /#(?![nN][oO][tT][eE][sS])([^:]+):([^;]+);/g;
    let matches = [...file.matchAll(re)];
    let metaData = new Map();
    for (let i = 0; i < matches.length; i++) {
        let match = matches[i];
        metaData.set(cleanMetaDataString(match[1]).toUpperCase(), cleanMetaDataString(match[2]));
    }
    return metaData;
}
function getModesInfoAsStrings(fileContents) {
    // Get "NOTES" sections (case-insensitive). The first five values are postfixed with a colon.
    // Note data comes last, postfixed by a semicolon.
    let re = /#[nN][oO][tT][eE][sS]:([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):([^;]+;)/g;
    let matches = [...fileContents.matchAll(re)];
    let modes = [];
    let fieldNames = ["type", "desc/author", "difficulty", "meter", "radar"];
    for (let i = 0; i < matches.length; i++) {
        let match = matches[i];
        let mode = new Map();
        for (let j = 1; j < match.length - 1; j++) {
            mode.set(fieldNames[j - 1], cleanMetaDataString(match[j]));
        }
        mode.set("notes", match[match.length - 1]);
        modes.push(mode);
    }
    return modes;
}
function cleanMetaDataString(string) {
    return string.trim().replace(/\n/g, "");
}
/* Step Two Of Parsing */
function getFullParse(modeIndex, partialParse) {
    let fullParse = new FullParse(partialParse);
    let cleanedBeatsAndLines = getCleanedBeatsAndLines(partialParse, modeIndex);
    fullParse.offset = parseFloat(partialParse.metaData.get("OFFSET"));
    fullParse.bpms = parseBPMS(partialParse.metaData.get("BPMS"));
    fullParse.stops = parseStops(partialParse.metaData.get("STOPS"));
    let timesBeatsAndLines = getTimeInfoByLine(cleanedBeatsAndLines, fullParse.offset, fullParse.bpms, fullParse.stops);
    fullParse.tracks = getTracksFromLines(timesBeatsAndLines);
    return fullParse;
}
function getCleanedBeatsAndLines(partialParse, modeIndex) {
    let unparsedNotes = partialParse.modes[modeIndex].get("notes");
    let unparsedArray = unparsedNotes.split("\n");
    let measures = getMeasures(unparsedArray);
    let beatsAndLines = getBeatInfoByLine(measures);
    return removeBlankLines(beatsAndLines);
}
function getMeasures(unparsedArray) {
    let measures = [];
    let state = 0;
    let i = 0;
    let currentMeasure = [];
    while (i < unparsedArray.length) {
        let currentLine = unparsedArray[i];
        switch (state) {
            case 0:
                if (!currentLine.includes("//") && currentLine.trim() !== "") {
                    state = 1;
                }
                else {
                    i++;
                }
                break;
            case 1:
                if (!currentLine.includes(",") && !currentLine.includes(";") && currentLine.trim() !== "") {
                    currentMeasure.push(currentLine.trim());
                    i++;
                }
                else {
                    state = 2;
                }
                break;
            case 2:
                measures.push(currentMeasure);
                currentMeasure = [];
                i++;
                state = 0;
                break;
        }
    }
    return measures;
}
// assumes 4/4 time signature (4 beats per measure)
function getBeatInfoByLine(measures) {
    let beatsAndLines = [];
    let currentBeat = 0;
    for (let i = 0; i < measures.length; i++) {
        let measure = measures[i];
        for (let j = 0; j < measure.length; j++) {
            beatsAndLines.push({
                endBeat: currentBeat,
                lineInfo: measure[j],
                measure: getMeasureDescription(measure.length, j)
            });
            currentBeat += 4 / measure.length;
        }
    }
    return beatsAndLines;
}
function getMeasureDescription(measureDivisions, measurePosition) {
    return {
        divisions: measureDivisions,
        position: measurePosition,
        fraction: _rhythm_classifier__WEBPACK_IMPORTED_MODULE_1__["RhythmClassifier"].getBeatFraction(measureDivisions, measurePosition)
    };
}
function removeBlankLines(beatsAndLines) {
    let cleanedBeatsAndLines = [];
    for (let i = 0; i < beatsAndLines.length; i++) {
        let line = beatsAndLines[i];
        if (!isAllZeros(line.lineInfo)) {
            cleanedBeatsAndLines.push(line);
        }
    }
    return cleanedBeatsAndLines;
}
function isAllZeros(string) {
    for (let i = 0; i < string.length; i++) {
        if (string.charAt(i) !== '0') {
            return false;
        }
    }
    return true;
}
function getTimeInfoByLine(infoByLine, offset, bpms, stops) {
    let infoByLineWithTime = [];
    let currentTime = -offset + getElapsedTime(0, infoByLine[0].endBeat, bpms, stops);
    infoByLineWithTime.push(addTimeProperty(infoByLine[0], currentTime));
    for (let i = 1; i < infoByLine.length; i++) {
        let startBeat = infoByLine[i - 1].endBeat;
        let endBeat = infoByLine[i].endBeat;
        currentTime += getElapsedTime(startBeat, endBeat, bpms, stops);
        infoByLineWithTime.push(addTimeProperty(infoByLine[i], currentTime));
    }
    return infoByLineWithTime;
}
function addTimeProperty(b, time) {
    return {
        timeInSeconds: time,
        endBeat: b.endBeat,
        lineInfo: b.lineInfo,
        measure: b.measure
    };
}
function getElapsedTime(startBeat, endBeat, bpms, stops) {
    let currentBPMIndex = getStartBPMIndex(startBeat, bpms);
    let earliestBeat = startBeat;
    let elapsedTime = stops === null ? 0 : stoppedTime(startBeat, endBeat, stops);
    do {
        let nextBPMChange = getNextBPMChange(currentBPMIndex, bpms);
        let nextBeat = Math.min(endBeat, nextBPMChange);
        elapsedTime += (nextBeat - earliestBeat) / bpms[currentBPMIndex].bpm * 60;
        earliestBeat = nextBeat;
        currentBPMIndex++;
    } while (earliestBeat < endBeat);
    return elapsedTime;
}
function getStartBPMIndex(startBeat, bpms) {
    let startBPMIndex = 0;
    for (let i = 1; i < bpms.length; i++) {
        if (bpms[i].beat < startBeat) {
            startBPMIndex = i;
        }
    }
    return startBPMIndex;
}
// does NOT snap to nearest 1/192nd of beat
function stoppedTime(startBeat, endBeat, stops) {
    let time = 0;
    for (let i = 0; i < stops.length; i++) {
        let stopBeat = stops[i].beat;
        if (startBeat <= stopBeat && stopBeat < endBeat) {
            time += stops[i].stopDuration;
        }
    }
    return time;
}
function getNextBPMChange(currentBPMIndex, bpms) {
    if (currentBPMIndex + 1 < bpms.length) {
        return bpms[currentBPMIndex + 1].beat;
    }
    return Number.POSITIVE_INFINITY;
}
const EMPTY_NOTE = "0";
function getTracksFromLines(timesBeatsAndLines) {
    let numTracks = timesBeatsAndLines[0].lineInfo.length;
    let tracks = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getEmpty2dArray"])(numTracks);
    for (let i = 0; i < timesBeatsAndLines.length; i++) {
        let line = timesBeatsAndLines[i];
        for (let j = 0; j < line.lineInfo.length; j++) {
            let noteType = line.lineInfo.charAt(j);
            if (noteType !== EMPTY_NOTE) {
                tracks[j].push(addNoteTypeAndTrack(noteType, j, line));
            }
        }
    }
    return tracks;
}
function addNoteTypeAndTrack(noteType, trackNumber, line) {
    return {
        measure: line.measure,
        timeInSeconds: line.timeInSeconds,
        endBeat: line.endBeat,
        type: noteType,
        trackNumber: trackNumber
    };
}
function parseBPMS(bpmString) {
    if (bpmString === undefined) {
        return [];
    }
    let bpmArray = parseFloatEqualsFloatPattern(bpmString);
    let bpms = [];
    for (let i = 0; i < bpmArray.length; i++) {
        bpms.push({ beat: bpmArray[i][0], bpm: bpmArray[i][1] });
    }
    return bpms;
}
function parseStops(stopsString) {
    if (stopsString === undefined) {
        return [];
    }
    let stopsArray = parseFloatEqualsFloatPattern(stopsString);
    let stops = [];
    for (let i = 0; i < stopsArray.length; i++) {
        stops.push({ beat: stopsArray[i][0], stopDuration: stopsArray[i][1] });
    }
    return stops;
}
function parseFloatEqualsFloatPattern(string) {
    let stringArray = string.split(",").map(e => e.trim().split("="));
    let array = [];
    for (let i = 0; i < stringArray.length; i++) {
        array.push([parseFloat(stringArray[i][0]), parseFloat(stringArray[i][1])]);
    }
    return array;
}


/***/ }),

/***/ "./src/scripts/parsing/parse_swf.ts":
/*!******************************************!*\
  !*** ./src/scripts/parsing/parse_swf.ts ***!
  \******************************************/
/*! exports provided: parseSwfFromArrayBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseSwfFromArrayBuffer", function() { return parseSwfFromArrayBuffer; });
/* harmony import */ var _swf_tags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./swf-tags */ "./src/scripts/parsing/swf-tags.ts");
/* harmony import */ var _swf_reader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swf-reader */ "./src/scripts/parsing/swf-reader.ts");


function parseSwfFromArrayBuffer(input) {
    return swfFile_Ready(input);
}
let swf_tags;
function swfFile_Ready(buffer) {
    swf_tags = Object(_swf_reader__WEBPACK_IMPORTED_MODULE_1__["uncompress"])(buffer);
    // Chart Data
    let chart_tag = getBeatBox();
    let chart_data = chart_tag["variables"]["_root"]["beatBox"];
    // Music Data
    let music_binary = getAudio();
    let blob = new Blob([music_binary], { type: 'audio/mpeg' });
    return { blob: blob, chartData: chart_data };
}
/**
 * Find Beatbox in the swf_tags.
 */
function getBeatBox() {
    let len = swf_tags.tags.length;
    let i = 0;
    let elm = null;
    for (i = 0; i < len; i++) {
        elm = swf_tags.tags[i];
        if (elm.header.code === _swf_tags__WEBPACK_IMPORTED_MODULE_0__["SWFTags"].DOACTION)
            return elm;
    }
    return null;
}
/**
 * Find Beatbox in the swf_tags.
 */
function getAudio() {
    let len = swf_tags.tags.length;
    let i = 0;
    let elm = null;
    let audioSize = 0;
    // Loop All Audio Tags, get Total Byte Size
    for (i = 0; i < len; i++) {
        elm = swf_tags.tags[i];
        if (elm.header.code === _swf_tags__WEBPACK_IMPORTED_MODULE_0__["SWFTags"].DEFINESOUND || elm.header.code === _swf_tags__WEBPACK_IMPORTED_MODULE_0__["SWFTags"].STREAMBLOCK)
            audioSize += elm.audio_bytes;
    }
    // Loop All Audio Tags, get Total Byte Size
    let writePosition = 0;
    let binary = new Uint8Array(audioSize);
    for (i = 0; i < len; i++) {
        elm = swf_tags.tags[i];
        if (elm.header.code === _swf_tags__WEBPACK_IMPORTED_MODULE_0__["SWFTags"].DEFINESOUND || elm.header.code === _swf_tags__WEBPACK_IMPORTED_MODULE_0__["SWFTags"].STREAMBLOCK) {
            binary.set(new Uint8Array(elm.data), writePosition);
            writePosition += elm.audio_bytes;
        }
    }
    return binary;
}


/***/ }),

/***/ "./src/scripts/parsing/swf-reader.ts":
/*!*******************************************!*\
  !*** ./src/scripts/parsing/swf-reader.ts ***!
  \*******************************************/
/*! exports provided: SWF, concatSWFHeader, uncompress, readSWFBuff, readSWFTags */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SWF", function() { return SWF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatSWFHeader", function() { return concatSWFHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncompress", function() { return uncompress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readSWFBuff", function() { return readSWFBuff; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readSWFTags", function() { return readSWFTags; });
/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ "pako");
/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _swf_tags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swf-tags */ "./src/scripts/parsing/swf-tags.ts");
/* harmony import */ var _byte_reader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./byte_reader */ "./src/scripts/parsing/byte_reader.ts");



/**
 * File contents originally from:
 * @author: Velocity
 * @github: https://github.com/flashflashrevolution/web-beatbox-editor
 */
class SWF {
}
/**
 * Concat SWF Header with uncompressed Buffer
 */
function concatSWFHeader(buff, swf) {
    let tmp = new Uint8Array(buff.byteLength + 8);
    tmp.set(new Uint8Array(swf.slice(0, 8)));
    tmp.set(new Uint8Array(buff), 8);
    return tmp.buffer;
}
/**
 * Decompress SWF if needed and Read SWF
 */
function uncompress(swf) {
    let swf_bytes = new Uint8Array(swf);
    let compressed_buff = swf.slice(8);
    // uncompress buffer
    switch (swf_bytes[0]) { // MAGIC
        case 0x43: // 'C' = zlib compressed
            let uncompressed_buff = concatSWFHeader(pako__WEBPACK_IMPORTED_MODULE_0__["inflate"](compressed_buff), swf);
            return readSWFBuff(new _byte_reader__WEBPACK_IMPORTED_MODULE_2__["ByteReader"](uncompressed_buff), swf);
            break;
        case 0x46: // 'F' = uncompressed
            return readSWFBuff(new _byte_reader__WEBPACK_IMPORTED_MODULE_2__["ByteReader"](swf), swf);
            break;
        case 0x5a: // LZMA compressed
            alert('Cannot handle LZMA SWF compressions');
            break;
        default:
            alert('Unknown SWF compressions');
            break;
    }
}
/**
 * Reads the SWF from uncompressed buffer.
 */
function readSWFBuff(buff, compressed_buff) {
    buff.seek(0); // start
    let swf = new SWF();
    swf.buffer = buff;
    swf.magic = buff.readStringFixed(3);
    swf.version = buff.readUInt8();
    swf.fileLength = {
        compressed: compressed_buff.byteLength,
        uncompressed: buff.readUIntLE(32)
    };
    swf.frameSize = buff.readRect();
    swf.frameRate = buff.readUIntLE(16) / 256;
    swf.frameCount = buff.readUIntLE(16);
    try {
        swf.tags = readSWFTags(buff);
    }
    catch (e) {
        console.log(e);
    }
    return swf;
}
/**
 * Parses the SWF TAG data structure, keeping only the tags
 * we are interested in.
 * - Audio Tags: Audio Samples
 * - Do Action Tag: Containing the beatBox variable.
 */
function readSWFTags(buff) {
    let tags = [];
    let tagHeader;
    let mp3Seek = 0;
    let mp3Samples = 0;
    let mp3Id = 0;
    let mp3Format = 0;
    let mp3Stream = false;
    /* Reads TagCodeAndLength from Tag's RECORDHEADER */
    while ((tagHeader = buff.readTagCodeAndLength()) !== null) {
        let tag = {};
        tag.header = tagHeader;
        tag.doInclude = false;
        switch (tagHeader.code) {
            // Sound Tags - MP3 Extraction
            case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTags"].STREAMBLOCK:
                if (!mp3Stream || ((tagHeader.length - 4) === 0))
                    break;
                mp3Samples += buff.readUIntLE(16); // frame samples
                buff.readUIntLE(16); // seek samples
                tag.data = buff.buffer_raw.slice(buff.pointer, buff.pointer + (tagHeader.length - 4));
                tag.audio_bytes = (tagHeader.length - 4);
                tag.doInclude = true;
                break;
            case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTags"].STREAMHEAD:
            case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTags"].STREAMHEAD2:
                buff.readUIntLE(8);
                mp3Format = buff.readUIntLE(8);
                buff.readUIntLE(16); // average frame samples
                mp3Seek = buff.readUIntLE(16);
                if (((mp3Format >>> 4) & 0xf) === _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFOtherTags"].CODEC_MP3)
                    mp3Stream = true;
                break;
            case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTags"].DEFINESOUND:
                if (!mp3Stream) {
                    let id = buff.readUIntLE(16);
                    let format = buff.readUIntLE(8);
                    if (((format >>> 4) & 0xf) === _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFOtherTags"].CODEC_MP3) {
                        mp3Id = id;
                        mp3Format = format;
                        mp3Samples = buff.readUIntLE(32);
                        mp3Seek = buff.readUIntLE(16);
                        tag.data = buff.buffer_raw.slice(buff.pointer, buff.pointer + (tagHeader.length - 9));
                        tag.audio_bytes = (tagHeader.length - 9);
                        tag.doInclude = true;
                    }
                }
                break;
            // DoAction - Where the Beatbox Lives
            case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTags"].DOACTION:
                let _finishedReading = false;
                let actionStack = [];
                let actionVariables = {};
                let actionRegisters = [null, null, null, null];
                let constantPool = [];
                while (!_finishedReading) {
                    let action = buff.readAction();
                    // Read Action Tag
                    switch (action.action) {
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].END:
                            _finishedReading = true;
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].CONSTANTPOOL:
                            constantPool = [];
                            let constantCount = buff.readUIntLE(16);
                            for (let i = 0; i < constantCount; i++) {
                                constantPool.push(buff.readString());
                            }
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].PUSH:
                            while (buff.pointer < action.position + action.length) {
                                let pushValue = undefined;
                                let pushType = buff.readUIntLE(8);
                                switch (pushType) {
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].STRING_LITERAL:
                                        pushValue = buff.readString();
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].FLOAT_LITERAL:
                                        pushValue = buff.readFloat();
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].NULL:
                                        pushValue = null;
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].UNDEFINED:
                                        pushValue = undefined;
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].REGISTER:
                                        pushValue = actionRegisters[buff.readUIntLE(8)];
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].BOOLEAN:
                                        pushValue = Boolean(buff.readUIntLE(8));
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].DOUBLE:
                                        pushValue = buff.readDouble();
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].INTEGER:
                                        pushValue = buff.readUIntLE(32);
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].CONSTANT8:
                                        pushValue = constantPool[buff.readUIntLE(8)];
                                        break;
                                    case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFTypeTags"].CONSTANT16:
                                        pushValue = constantPool[buff.readUIntLE(16)];
                                        break;
                                    default:
                                        console.log("FOUND UNSUPPORTED PUSHDATA TYPE: " + pushType);
                                        break;
                                }
                                actionStack.push(pushValue);
                            }
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].POP:
                            actionStack.pop();
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].DUPLICATE:
                            actionStack.push(actionStack[actionStack.length - 1]);
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].STORE_REGISTER:
                            actionRegisters[buff.readUIntLE(8)] = actionStack[actionStack.length - 1];
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].GET_VARIABLE:
                            let gvName = actionStack.pop();
                            if (!(gvName in actionVariables))
                                actionVariables[gvName] = {};
                            actionStack.push(actionVariables[gvName]);
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].SET_VARIABLE:
                            let svValue = actionStack.pop();
                            actionVariables[actionStack.pop()] = svValue;
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].INIT_ARRAY:
                            let arraySize = actionStack.pop();
                            let array = [];
                            for (let i = 0; i < arraySize; i++)
                                array.push(actionStack.pop());
                            actionStack.push(array);
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].GET_MEMBER:
                            let gmName = actionStack.pop();
                            let gmObject = actionStack.pop();
                            if (!(gmName in gmObject))
                                gmObject[gmName] = {};
                            actionStack.push(gmObject[gmName]);
                            break;
                        case _swf_tags__WEBPACK_IMPORTED_MODULE_1__["SWFActionTags"].SET_MEMBER:
                            let smValue = actionStack.pop();
                            let smName = actionStack.pop();
                            actionStack.pop()[smName] = smValue;
                            break;
                        case 7:
                            // this tag isn't supported, but it seems to be in every file, so I'm ignoring it
                            break;
                        default:
                            console.log("FOUND UNSUPPORTED ACTION TAG: " + action.action.toString(16));
                            break;
                    }
                }
                if (actionVariables["_root"] !== undefined && actionVariables["_root"]["beatBox"])
                    tag.doInclude = true;
                tag.pool = constantPool;
                tag.variables = actionVariables;
                break;
            default:
                //tag.data = buff.buffer_raw.slice(buff.pointer, buff.pointer + tagHeader.length);
                break;
        }
        if (tag.doInclude) {
            delete tag.doInclude;
            tags.push(tag);
        }
        buff.seek(tagHeader.position + tagHeader.length);
    }
    return tags;
}


/***/ }),

/***/ "./src/scripts/parsing/swf-tags.ts":
/*!*****************************************!*\
  !*** ./src/scripts/parsing/swf-tags.ts ***!
  \*****************************************/
/*! exports provided: SWFTags, SWFActionTags, SWFTypeTags, SWFOtherTags */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SWFTags", function() { return SWFTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SWFActionTags", function() { return SWFActionTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SWFTypeTags", function() { return SWFTypeTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SWFOtherTags", function() { return SWFOtherTags; });
/**
 * Collection of SWF tags and tag types to assist with reading and parsing a .swf file.
 *
 * File contents originally from:
 * @author: Velocity
 * @github: https://github.com/flashflashrevolution/web-beatbox-editor
 */
class SWFTags {
}
SWFTags.END = 0;
SWFTags.SHOWFRAME = 1;
SWFTags.DOACTION = 12;
SWFTags.DEFINESOUND = 14;
SWFTags.STREAMHEAD = 18;
SWFTags.STREAMBLOCK = 19;
SWFTags.STREAMHEAD2 = 45;
SWFTags.FILEATTRIBUTES = 69;
class SWFActionTags {
}
SWFActionTags.END = 0;
SWFActionTags.CONSTANTPOOL = 0x88;
SWFActionTags.PUSH = 0x96;
SWFActionTags.POP = 0x17;
SWFActionTags.DUPLICATE = 0x4C;
SWFActionTags.STORE_REGISTER = 0x87;
SWFActionTags.GET_VARIABLE = 0x1C;
SWFActionTags.SET_VARIABLE = 0x1D;
SWFActionTags.INIT_ARRAY = 0x42;
SWFActionTags.GET_MEMBER = 0x4E;
SWFActionTags.SET_MEMBER = 0x4F;
class SWFTypeTags {
}
SWFTypeTags.STRING_LITERAL = 0;
SWFTypeTags.FLOAT_LITERAL = 1;
SWFTypeTags.NULL = 2;
SWFTypeTags.UNDEFINED = 3;
SWFTypeTags.REGISTER = 4;
SWFTypeTags.BOOLEAN = 5;
SWFTypeTags.DOUBLE = 6;
SWFTypeTags.INTEGER = 7;
SWFTypeTags.CONSTANT8 = 8;
SWFTypeTags.CONSTANT16 = 9;
class SWFOtherTags {
}
SWFOtherTags.CODEC_MP3 = 2;


/***/ }),

/***/ "./src/scripts/particle.ts":
/*!*********************************!*\
  !*** ./src/scripts/particle.ts ***!
  \*********************************/
/*! exports provided: Particle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Particle", function() { return Particle; });
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p5 */ "p5");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");


class Particle {
    constructor(initialPosition, initialVelocity, constantAcceleration, creationTimeInSeconds, color) {
        this.initialPosition = initialPosition;
        this.initialVelocity = initialVelocity;
        this.constantAcceleration = constantAcceleration;
        this.creationTimeInSeconds = creationTimeInSeconds;
        this.color = color;
    }
    draw(currentTimeInSeconds, color) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let elapsedTime = this.getElapsedTimeInSeconds(currentTimeInSeconds);
        let currentPosition = this.getPosition(p, elapsedTime);
        p.push();
        p.noStroke();
        p.fill(color);
        p.circle(currentPosition.x, currentPosition.y, Particle.particleSize);
        p.pop();
    }
    getPosition(p, elapsedTimeInSeconds) {
        let velocityComponent = p5__WEBPACK_IMPORTED_MODULE_0__["Vector"].mult(this.initialVelocity, elapsedTimeInSeconds);
        let accelerationComponent = p5__WEBPACK_IMPORTED_MODULE_0__["Vector"].mult(this.constantAcceleration, elapsedTimeInSeconds * elapsedTimeInSeconds / 2);
        return p5__WEBPACK_IMPORTED_MODULE_0__["Vector"].add(p5__WEBPACK_IMPORTED_MODULE_0__["Vector"].add(this.initialPosition, velocityComponent), accelerationComponent);
    }
    getElapsedTimeInSeconds(currentTimeInSeconds) {
        return currentTimeInSeconds - this.creationTimeInSeconds;
    }
}
Particle.particleSize = 2;


/***/ }),

/***/ "./src/scripts/particle_system.ts":
/*!****************************************!*\
  !*** ./src/scripts/particle_system.ts ***!
  \****************************************/
/*! exports provided: ParticleSystem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() { return ParticleSystem; });
/* harmony import */ var _particle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./particle */ "./src/scripts/particle.ts");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p5 */ "p5");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");



class ParticleSystem {
    constructor(particleLifetimeInSeconds, constantAcceleration) {
        this.particleLifetimeInSeconds = particleLifetimeInSeconds;
        this.constantAcceleration = constantAcceleration;
        this.particles = [];
    }
    draw(currentTimeInSeconds) {
        while (this.oldestParticleAge(currentTimeInSeconds) > this.particleLifetimeInSeconds) {
            this.removeOldestParticle();
        }
        for (let i = 0; i < this.particles.length; i++) {
            let particle = this.particles[i];
            let alphaAdjustedColor = this.getAlphaAdjustedColor(particle, currentTimeInSeconds);
            particle.draw(currentTimeInSeconds, alphaAdjustedColor);
        }
    }
    oldestParticleAge(currentTimeInSeconds) {
        if (this.particles.length > 0) {
            return this.particles[0].getElapsedTimeInSeconds(currentTimeInSeconds);
        }
        else {
            return -1;
        }
    }
    removeOldestParticle() {
        this.particles.shift();
    }
    getAlphaAdjustedColor(particle, currentTimeInSeconds) {
        let p = _index__WEBPACK_IMPORTED_MODULE_2__["global"].p5Scene.sketchInstance;
        let baseColor = particle.color;
        let particleAge = particle.getElapsedTimeInSeconds(currentTimeInSeconds);
        let lifeRemainingPercent = (this.particleLifetimeInSeconds - particleAge) / this.particleLifetimeInSeconds;
        let alpha = this.interpolate(0, 255, lifeRemainingPercent);
        let newColor = p.color(baseColor);
        newColor.setAlpha(alpha);
        return newColor;
    }
    interpolate(minValue, maxValue, ratio) {
        if (ratio <= 0) {
            return minValue;
        }
        else if (ratio > 0 && ratio < 1) {
            return minValue + (maxValue - minValue) * ratio;
        }
        else {
            return maxValue;
        }
    }
    addRandomizedParticles(initialPosition, initialVelocity, creationTimeInSeconds, numParticles, color) {
        let p = _index__WEBPACK_IMPORTED_MODULE_2__["global"].p5Scene.sketchInstance;
        for (let i = 0; i < numParticles; i++) {
            let newInitalVelocity = this.randomizeVector(p, initialVelocity);
            let newColor = this.randomizeColor(p, color);
            this.addParticle(initialPosition, newInitalVelocity, creationTimeInSeconds, newColor);
        }
    }
    randomizeVector(p, baseVector) {
        let directionRandomized = this.randomizeVectorDirection(p, baseVector);
        return this.randomizeVectorMagnitude(p, directionRandomized);
    }
    randomizeVectorDirection(p, baseVector) {
        p.push();
        p.angleMode(p.DEGREES);
        let angleInDegrees = baseVector.heading();
        let angleChangeInDegrees = p.random(-ParticleSystem.velocityAngleVariationInDegrees / 2, ParticleSystem.velocityAngleVariationInDegrees / 2);
        let finalAngleInRadians = p.radians(angleInDegrees + angleChangeInDegrees);
        let magnitude = baseVector.mag();
        p.pop();
        return p5__WEBPACK_IMPORTED_MODULE_1__["Vector"].fromAngle(finalAngleInRadians, magnitude);
    }
    randomizeVectorMagnitude(p, baseVector) {
        let magnitudeChangeInPercent = p.random(-ParticleSystem.velocityMagnitudeVariationInPercent / 2, ParticleSystem.velocityMagnitudeVariationInPercent / 2);
        let finalMagnitude = baseVector.mag() * (100 + magnitudeChangeInPercent) / 100;
        return baseVector.setMag(finalMagnitude);
    }
    randomizeColor(p, baseColor) {
        let newRed = this.boundedRandomize(p, p.red(baseColor), ParticleSystem.colorVariation, 0, 255);
        let newGreen = this.boundedRandomize(p, p.green(baseColor), ParticleSystem.colorVariation, 0, 255);
        let newBlue = this.boundedRandomize(p, p.blue(baseColor), ParticleSystem.colorVariation, 0, 255);
        return p.color(newRed, newGreen, newBlue);
    }
    boundedRandomize(p, value, variation, lowerBound, upperBound) {
        let newValue = value + p.random(-variation / 2, variation / 2);
        if (newValue <= lowerBound) {
            return lowerBound;
        }
        else if (lowerBound < newValue && newValue < upperBound) {
            return newValue;
        }
        else {
            return upperBound;
        }
    }
    addParticle(initialPosition, initialVelocity, creationTimeInSeconds, color) {
        this.particles.push(new _particle__WEBPACK_IMPORTED_MODULE_0__["Particle"](initialPosition, initialVelocity, this.constantAcceleration, creationTimeInSeconds, color));
    }
}
ParticleSystem.velocityAngleVariationInDegrees = 30;
ParticleSystem.velocityMagnitudeVariationInPercent = 30;
ParticleSystem.colorVariation = 30;


/***/ }),

/***/ "./src/scripts/player_key_action.ts":
/*!******************************************!*\
  !*** ./src/scripts/player_key_action.ts ***!
  \******************************************/
/*! exports provided: PlayerKeyEvent, KeyState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayerKeyEvent", function() { return PlayerKeyEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyState", function() { return KeyState; });
class PlayerKeyEvent {
    constructor(gameTime, track, keyState) {
        this.gameTime = gameTime;
        this.track = track;
        this.keyState = keyState;
    }
}
var KeyState;
(function (KeyState) {
    KeyState[KeyState["UP"] = 0] = "UP";
    KeyState[KeyState["DOWN"] = 1] = "DOWN";
})(KeyState || (KeyState = {}));


/***/ }),

/***/ "./src/scripts/playing_config.ts":
/*!***************************************!*\
  !*** ./src/scripts/playing_config.ts ***!
  \***************************************/
/*! exports provided: PlayingConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayingConfig", function() { return PlayingConfig; });
class PlayingConfig {
    constructor(config, numTracks) {
        this.noteSize = config.noteSize;
        this.noteSpacing = config.noteSpacing;
        this.pixelsPerSecond = config.pixelsPerSecond;
        this.receptorYPercent = config.receptorYPercent;
        this.scrollDirection = config.scrollDirection;
        this.receptorSizes = [];
        for (let i = 0; i < numTracks; i++) {
            this.receptorSizes.push(config.noteSize);
        }
    }
    getNoteSize() {
        return this.noteSize;
    }
    getNoteSpacing() {
        return this.noteSpacing;
    }
    getPixelsPerSecond() {
        return this.pixelsPerSecond;
    }
    getReceptorSizes() {
        return this.receptorSizes;
    }
    getReceptorYPercent() {
        return this.receptorYPercent;
    }
    getScrollDirection() {
        return this.scrollDirection;
    }
    setReceptorSize(trackNumber, receptorSize) {
        this.receptorSizes[trackNumber] = receptorSize;
    }
}


/***/ }),

/***/ "./src/scripts/playlist_client/parsing_helper.ts":
/*!*******************************************************!*\
  !*** ./src/scripts/playlist_client/parsing_helper.ts ***!
  \*******************************************************/
/*! exports provided: ParsingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParsingHelper", function() { return ParsingHelper; });
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../note */ "./src/scripts/note.ts");

class ParsingHelper {
    static beatmapToTrackArray(beatmap) {
        let tracks = [[], [], [], []];
        for (let i = 0; i < beatmap.length; i++) {
            let beatmapRow = beatmap[i];
            let trackNumber = this.trackNumberFromDirection(beatmapRow[1]);
            let note = this.noteFromBeatmapRow(beatmapRow, trackNumber);
            tracks[trackNumber].push(note);
        }
        return tracks;
    }
    static noteFromBeatmapRow(row, trackNumber) {
        let timeInSeconds = row[0] / 30;
        return {
            timeInSeconds: timeInSeconds,
            type: _note__WEBPACK_IMPORTED_MODULE_0__["NoteType"].NORMAL,
            state: _note__WEBPACK_IMPORTED_MODULE_0__["NoteState"].DEFAULT,
            trackNumber: trackNumber,
            beatFraction: this.colorToBeatFraction(row[2])
        };
    }
    static colorToBeatFraction(color) {
        switch (color) {
            case "red":
                return 4;
            case "blue":
                return 8;
            case "purple":
                return 12;
            case "yellow":
                return 16;
            case "pink":
                return 24;
            case "orange":
                return 32;
            case "cyan":
                return 48;
            case "green":
                return 64;
            case "white":
                return 192;
            default:
                return 192;
        }
    }
    static trackNumberFromDirection(direction) {
        switch (direction) {
            case "L":
                return 0;
                break;
            case "D":
                return 1;
                break;
            case "U":
                return 2;
                break;
            case "R":
                return 3;
                break;
            default:
                throw "Unknown track direction '" + direction + "'";
        }
    }
}


/***/ }),

/***/ "./src/scripts/playlist_client/playlist_client.ts":
/*!********************************************************!*\
  !*** ./src/scripts/playlist_client/playlist_client.ts ***!
  \********************************************************/
/*! exports provided: PlaylistClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistClient", function() { return PlaylistClient; });
/* harmony import */ var _song__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./song */ "./src/scripts/playlist_client/song.ts");
/* harmony import */ var _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playlist_client_state */ "./src/scripts/playlist_client/playlist_client_state.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/scripts/playlist_client/util.ts");
/* harmony import */ var _parsing_parse_swf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parsing/parse_swf */ "./src/scripts/parsing/parse_swf.ts");




class PlaylistClient {
    constructor() {
        this.corsWorkaround = 'https://cors-anywhere.herokuapp.com/';
        this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].NO_APIS;
    }
    getState() {
        return this.state;
    }
    getPlaylist() {
        return this.playlist;
    }
    async initialize(indexUrl) {
        try {
            await this.loadApis(indexUrl);
            await this.loadPlaylist();
        }
        catch (e) { }
    }
    async loadApis(indexUrl) {
        try {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].PROCESSING;
            await this.get(indexUrl)
                .then(request => this.saveApisFromPlaylistIndex(request));
        }
        catch (e) {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].ERROR;
            this.handleError(e);
            throw e;
        }
    }
    saveApisFromPlaylistIndex(request) {
        let responseXml = request.responseXML;
        this.songUrl = Object(_util__WEBPACK_IMPORTED_MODULE_2__["getContentsByTagName"])(responseXml, "songURL");
        this.playlistUrl = Object(_util__WEBPACK_IMPORTED_MODULE_2__["getContentsByTagName"])(responseXml, "playlistURL");
        this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].APIS_LOADED;
    }
    async loadPlaylist() {
        try {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].PROCESSING;
            await this.get(this.playlistUrl)
                .then(request => this.savePlaylist(request));
        }
        catch (e) {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].ERROR;
            this.handleError(e);
            throw e;
        }
    }
    savePlaylist(request) {
        let playlistText = request.response;
        // replace ampersands because the DOMParser doesn't like them
        playlistText = playlistText.replace(/&/g, '&amp;');
        let playlistXml = new DOMParser().parseFromString(playlistText, "text/xml");
        let songs = this.getSongsFromPlaylistXml(playlistXml);
        this.saveSongsIfValid(songs);
    }
    getSongsFromPlaylistXml(playlistXml) {
        let songsXml = playlistXml.getElementsByTagName("song");
        let songs = [];
        for (let i = 0; i < songsXml.length; i++) {
            let songXml = songsXml.item(i);
            let song = _song__WEBPACK_IMPORTED_MODULE_0__["Song"].ofXml(songXml);
            songs.push(song);
        }
        return songs;
    }
    saveSongsIfValid(songs) {
        if (songs.length === 0) {
            throw "Loaded a playlist with no songs.";
        }
        else {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].PLAYLIST_LOADED;
            this.playlist = songs;
        }
    }
    async getSwf(songIndex) {
        try {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].PROCESSING;
            return await this.get(this.getLevelUrl(songIndex), "arraybuffer")
                .then(request => this.getParsedSwf(request));
        }
        catch (e) {
            this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].ERROR;
            this.handleError(e);
        }
        return null;
    }
    getLevelUrl(songIndex) {
        let song = this.playlist[songIndex];
        let level = song.level;
        return this.songUrl + "level_" + level + ".swf";
    }
    getParsedSwf(request) {
        let parsedSwf = Object(_parsing_parse_swf__WEBPACK_IMPORTED_MODULE_3__["parseSwfFromArrayBuffer"])(request.response);
        this.state = _playlist_client_state__WEBPACK_IMPORTED_MODULE_1__["PlaylistClientState"].PLAYLIST_LOADED;
        return parsedSwf;
    }
    async get(url, responseType) {
        let getUrl = this.corsWorkaround + url;
        return new Promise(function (resolve, reject) {
            let request = new XMLHttpRequest();
            request.open('GET', getUrl, true);
            if (responseType !== undefined) {
                request.responseType = responseType;
            }
            // When the request loads, check whether it was successful
            request.onload = function () {
                if (request.status === 200) {
                    // If successful, resolve the promise by passing back the request
                    resolve(request);
                }
                else {
                    // If it fails, reject the promise with a error message
                    reject(Error("Get request failed with error code:" + request.statusText));
                }
            };
            request.onerror = function () {
                // Also deal with the case when the entire request fails to begin with
                // This is probably a network error, so reject the promise with an appropriate message
                reject(Error('There was a network error.'));
            };
            request.send();
        });
    }
    handleError(e) {
        console.error(e);
    }
}


/***/ }),

/***/ "./src/scripts/playlist_client/playlist_client_state.ts":
/*!**************************************************************!*\
  !*** ./src/scripts/playlist_client/playlist_client_state.ts ***!
  \**************************************************************/
/*! exports provided: PlaylistClientState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistClientState", function() { return PlaylistClientState; });
var PlaylistClientState;
(function (PlaylistClientState) {
    PlaylistClientState[PlaylistClientState["NO_APIS"] = 0] = "NO_APIS";
    PlaylistClientState[PlaylistClientState["APIS_LOADED"] = 1] = "APIS_LOADED";
    PlaylistClientState[PlaylistClientState["PLAYLIST_LOADED"] = 2] = "PLAYLIST_LOADED";
    PlaylistClientState[PlaylistClientState["PROCESSING"] = 3] = "PROCESSING";
    PlaylistClientState[PlaylistClientState["ERROR"] = 4] = "ERROR";
})(PlaylistClientState || (PlaylistClientState = {}));


/***/ }),

/***/ "./src/scripts/playlist_client/song.ts":
/*!*********************************************!*\
  !*** ./src/scripts/playlist_client/song.ts ***!
  \*********************************************/
/*! exports provided: Song */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Song", function() { return Song; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/scripts/playlist_client/util.ts");

class Song {
    constructor() { }
    static ofXml(xml) {
        let song = new Song();
        song.genre = parseInt(xml.getAttribute("genre"));
        song.songName = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songname");
        song.songAuthor = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songauthor");
        song.songAuthorUrl = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songauthorurl");
        song.songDifficulty = parseInt(Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songdifficulty"));
        song.songStyle = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songstyle");
        song.songLength = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songlength");
        song.songStepauthor = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "songstepauthor");
        song.level = Object(_util__WEBPACK_IMPORTED_MODULE_0__["getContentsByTagName"])(xml, "level");
        return song;
    }
}


/***/ }),

/***/ "./src/scripts/playlist_client/util.ts":
/*!*********************************************!*\
  !*** ./src/scripts/playlist_client/util.ts ***!
  \*********************************************/
/*! exports provided: getContentsByTagName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getContentsByTagName", function() { return getContentsByTagName; });
function getContentsByTagName(xml, tag) {
    return xml.getElementsByTagName(tag)[0].innerHTML;
}


/***/ }),

/***/ "./src/scripts/point_2d.ts":
/*!*********************************!*\
  !*** ./src/scripts/point_2d.ts ***!
  \*********************************/
/*! exports provided: Point2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Point2D", function() { return Point2D; });
class Point2D {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/scripts/radio_table.ts":
/*!************************************!*\
  !*** ./src/scripts/radio_table.ts ***!
  \************************************/
/*! exports provided: RadioTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioTable", function() { return RadioTable; });
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom_wrapper */ "./src/scripts/dom_wrapper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _ui_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui_util */ "./src/scripts/ui_util.ts");



class RadioTable {
    static create(uniqueId, width, height, columnWidths, headers, contents) {
        let p = _index__WEBPACK_IMPORTED_MODULE_1__["global"].p5Scene.sketchInstance;
        let radioName = uniqueId + "-radio";
        let divCreateResult = _dom_wrapper__WEBPACK_IMPORTED_MODULE_0__["DOMWrapper"].create(() => {
            return p.createElement("div");
        }, uniqueId);
        let div = divCreateResult.element;
        if (!divCreateResult.alreadyExists) {
            Object(_ui_util__WEBPACK_IMPORTED_MODULE_2__["setElementClasses"])(div, _index__WEBPACK_IMPORTED_MODULE_1__["global"].globalClass, "menu-table");
            let table = p.createElement("table").elt;
            table.style.width = width + "px";
            table.style.height = height + "px";
            this.addColumnGroup(table, columnWidths);
            this.addHeaderRow(table, [""].concat(headers));
            let tableBody = table.createTBody();
            for (let i = 0; i < contents.length; i++) {
                this.createRowWithRadio(tableBody, contents[i], radioName, i);
            }
            divCreateResult.element.elt.appendChild(table);
        }
        divCreateResult.element.value = RadioTable.getRadioValue.bind(this, radioName);
        return divCreateResult;
    }
    static addColumnGroup(table, columnWidths) {
        this.scaleNumbersToAddUpTo(columnWidths, 96);
        let colgroup = document.createElement("colgroup");
        this.addColumn(colgroup, 4);
        for (let i = 0; i < columnWidths.length; i++) {
            this.addColumn(colgroup, columnWidths[i]);
        }
        table.appendChild(colgroup);
    }
    static addColumn(columnGroup, widthPercent) {
        let column = document.createElement("col");
        column.span = 1;
        column.style.width = widthPercent + "%";
        columnGroup.appendChild(column);
    }
    static scaleNumbersToAddUpTo(numbers, targetSum) {
        let sum = 0;
        for (let i = 0; i < numbers.length; i++) {
            sum += numbers[i];
        }
        for (let i = 0; i < numbers.length; i++) {
            numbers[i] *= targetSum / sum;
        }
    }
    static getRadioValue(radioName) {
        let radioOptions = document.getElementsByName(radioName);
        for (let i = 0; i < radioOptions.length; i++) {
            let radioOption = radioOptions[i];
            if (radioOption.checked) {
                return radioOption.id;
            }
        }
        return "";
    }
    static createRowWithRadio(tableSection, contents, radioName, radioId) {
        let newRow = tableSection.insertRow();
        RadioTable.addRadioCellToRow(newRow, radioName, radioId);
        for (let i = 0; i < contents.length; i++) {
            let newCell = newRow.insertCell();
            newCell.innerText = contents[i];
        }
    }
    static addRadioCellToRow(row, radioName, radioId) {
        let radioCell = row.insertCell();
        let radioOption = RadioTable.createRadioInput(radioName, radioId);
        radioCell.appendChild(radioOption);
        row.onclick = (e) => {
            let parent = e.target.parentElement;
            if (parent.tagName === "TR") {
                let innerInput = parent.getElementsByTagName("input")[0];
                innerInput.checked = true;
            }
        };
    }
    static createRadioInput(radioName, id) {
        let radioOption = document.createElement("input");
        radioOption.type = "radio";
        radioOption.value = "";
        radioOption.name = radioName;
        radioOption.id = String(id);
        return radioOption;
    }
    static addHeaderRow(table, contents) {
        let tableHeader = table.createTHead();
        let newRow = tableHeader.insertRow();
        for (let i = 0; i < contents.length; i++) {
            let newCell = document.createElement("th");
            newCell.innerText = contents[i];
            newRow.appendChild(newCell);
        }
    }
}


/***/ }),

/***/ "./src/scripts/receptor_shrink_reaction.ts":
/*!*************************************************!*\
  !*** ./src/scripts/receptor_shrink_reaction.ts ***!
  \*************************************************/
/*! exports provided: ReceptorShrinkReaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReceptorShrinkReaction", function() { return ReceptorShrinkReaction; });
/* harmony import */ var _player_key_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player_key_action */ "./src/scripts/player_key_action.ts");

class ReceptorShrinkReaction {
    constructor(config, displayConfig, numTracks) {
        this.config = config;
        this.displayConfig = displayConfig;
        this.numTracks = numTracks;
        this.trackHoldStates = [];
        for (let i = 0; i < numTracks; i++) {
            this.trackHoldStates.push(false);
        }
    }
    update(playerKeyEvent) {
        this.trackHoldStates[playerKeyEvent.track] = playerKeyEvent.keyState === _player_key_action__WEBPACK_IMPORTED_MODULE_0__["KeyState"].DOWN;
    }
    draw() {
        let numReceptors = this.displayConfig.getReceptorSizes().length;
        let shrink = 0.7;
        for (let i = 0; i < numReceptors; i++) {
            let sizeRatio = this.isTrackHeld(i) ? shrink : 1.0;
            this.displayConfig.setReceptorSize(i, this.config.noteSize * sizeRatio);
        }
    }
    isTrackHeld(trackNumber) {
        return this.trackHoldStates[trackNumber];
    }
}


/***/ }),

/***/ "./src/scripts/rectangle.ts":
/*!**********************************!*\
  !*** ./src/scripts/rectangle.ts ***!
  \**********************************/
/*! exports provided: Rectangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rectangle", function() { return Rectangle; });
/* harmony import */ var _point_2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point_2d */ "./src/scripts/point_2d.ts");

class Rectangle {
    constructor() {
    }
    static fromTopLeft(x, y, width, height) {
        let rect = new Rectangle();
        rect.width = width;
        rect.height = height;
        rect.topLeftX = x;
        rect.topLeftY = y;
        rect.topLeft = new _point_2d__WEBPACK_IMPORTED_MODULE_0__["Point2D"](rect.topLeftX, rect.topLeftY);
        rect.centerX = x + width / 2;
        rect.centerY = y + height / 2;
        rect.center = new _point_2d__WEBPACK_IMPORTED_MODULE_0__["Point2D"](rect.centerX, rect.centerY);
        return rect;
    }
    static fromCenter(x, y, width, height) {
        let rect = new Rectangle();
        rect.width = width;
        rect.height = height;
        rect.topLeftX = x - width / 2;
        rect.topLeftY = y - height / 2;
        rect.topLeft = new _point_2d__WEBPACK_IMPORTED_MODULE_0__["Point2D"](rect.topLeftX, rect.topLeftY);
        rect.centerX = x;
        rect.centerY = y;
        rect.center = new _point_2d__WEBPACK_IMPORTED_MODULE_0__["Point2D"](rect.centerX, rect.centerY);
        return rect;
    }
}


/***/ }),

/***/ "./src/scripts/replay_compressor.ts":
/*!******************************************!*\
  !*** ./src/scripts/replay_compressor.ts ***!
  \******************************************/
/*! exports provided: ReplayCompressor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplayCompressor", function() { return ReplayCompressor; });
class ReplayCompressor {
    static compress(linearRecording) {
        let uncompressed = this.getUncompressedReplay(linearRecording);
        let compressed = {
            trackNumbers: this.compressTracks(uncompressed.trackNumbers),
            noteIndices: this.compressIndices(uncompressed.noteIndices),
            timesInSeconds: this.compressTimes(uncompressed.timesInSeconds),
            accuraciesMillis: this.compressAccuracies(uncompressed.accuraciesMillis),
            noteTypes: this.compressNoteTypes(uncompressed.noteTypes)
        };
        return JSON.stringify(compressed);
    }
    static uncompress(string) {
        let compressed = JSON.parse(string);
        let uncompressed = {
            trackNumbers: this.uncompressTracks(compressed.trackNumbers),
            noteIndices: this.uncompressIndices(compressed.noteIndices),
            timesInSeconds: this.uncompressTimes(compressed.timesInSeconds),
            accuraciesMillis: this.uncompressAccuracies(compressed.accuraciesMillis),
            noteTypes: this.uncompressNoteTypes(compressed.noteTypes)
        };
        return this.getAccuracyRecordingEntries(uncompressed);
    }
    static getUncompressedReplay(linearRecording) {
        let trackNumbers = [];
        let noteIndices = [];
        let timesInSeconds = [];
        let accuraciesMillis = [];
        let noteTypes = [];
        for (let i = 0; i < linearRecording.length; i++) {
            let entry = linearRecording[i];
            trackNumbers.push(entry.trackNumber);
            noteIndices.push(entry.noteIndex);
            timesInSeconds.push(entry.timeInSeconds);
            accuraciesMillis.push(entry.accuracyMillis);
            noteTypes.push(entry.noteType);
        }
        return {
            trackNumbers: trackNumbers,
            noteIndices: noteIndices,
            timesInSeconds: timesInSeconds,
            accuraciesMillis: accuraciesMillis,
            noteTypes: noteTypes
        };
    }
    static getAccuracyRecordingEntries(uncompressedReplay) {
        let entries = [];
        for (let i = 0; i < uncompressedReplay.trackNumbers.length; i++) {
            entries.push({
                trackNumber: uncompressedReplay.trackNumbers[i],
                noteIndex: uncompressedReplay.noteIndices[i],
                timeInSeconds: uncompressedReplay.timesInSeconds[i],
                accuracyMillis: uncompressedReplay.accuraciesMillis[i],
                noteType: uncompressedReplay.noteTypes[i]
            });
        }
        return entries;
    }
    static compressTracks(numbers) {
        return this.compress8BitNumbers(numbers);
    }
    static uncompressTracks(string) {
        return this.uncompress8BitNumbers(string);
    }
    static compressIndices(numbers) {
        return this.compressFloats(numbers);
    }
    static uncompressIndices(string) {
        return this.uncompressFloats(string);
    }
    static compressTimes(numbers) {
        return this.compressFloats(numbers);
    }
    static uncompressTimes(string) {
        return this.uncompressFloats(string);
    }
    static compressAccuracies(numbers) {
        return this.compressFloats(numbers);
    }
    static uncompressAccuracies(string) {
        return this.uncompressFloats(string);
    }
    static compressNoteTypes(noteTypes) {
        return this.compress8BitNumbers(noteTypes);
    }
    static uncompressNoteTypes(string) {
        return this.uncompress8BitNumbers(string);
    }
    static compressFloats(numbers) {
        let typed = new Float64Array(numbers);
        let split = new Uint16Array(typed.buffer);
        return this.decodeUTF8String(split);
    }
    static uncompressFloats(string) {
        let split = this.encodeUTF8String(string);
        let typed = new Float64Array(split.buffer);
        return Array.from(typed);
    }
    static compress8BitNumbers(numbers) {
        let converted;
        if (numbers.length % 2 !== 0) {
            converted = new Uint8Array(numbers.concat([ReplayCompressor.DELETE_FLAG_8BIT]));
        }
        else {
            converted = new Uint8Array(numbers);
        }
        let merged = new Uint16Array(converted.buffer);
        return this.decodeUTF8String(merged);
    }
    static uncompress8BitNumbers(string) {
        let codes = this.encodeUTF8String(string);
        let split = new Uint8Array(codes.buffer);
        let numbers = Array.from(split);
        if (numbers[numbers.length - 1] === ReplayCompressor.DELETE_FLAG_8BIT) {
            numbers.pop();
        }
        return numbers;
    }
    static decodeUTF8String(array) {
        let string = "";
        for (let i = 0; i < array.length; i++) {
            string += String.fromCharCode(array[i]);
        }
        return string;
    }
    static encodeUTF8String(string) {
        let characters = string.split("");
        let numbers = [];
        for (let i = 0; i < characters.length; i++) {
            numbers.push(characters[i].charCodeAt(0));
        }
        return new Uint16Array(numbers);
    }
}
ReplayCompressor.DELETE_FLAG_8BIT = 255;


/***/ }),

/***/ "./src/scripts/replay_manager.ts":
/*!***************************************!*\
  !*** ./src/scripts/replay_manager.ts ***!
  \***************************************/
/*! exports provided: ReplayManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplayManager", function() { return ReplayManager; });
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");
/* harmony import */ var _player_key_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player_key_action */ "./src/scripts/player_key_action.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");



class ReplayManager {
    constructor(config, accuracyRecording, holdManager, handleAccuracyEvent, handlePlayerKeyEvent) {
        this.config = config;
        this.accuracyRecording = accuracyRecording;
        this.holdManager = holdManager;
        this.handleAccuracyEvent = handleAccuracyEvent;
        this.handlePlayerKeyEvent = handlePlayerKeyEvent;
        this.lastCheckedEventIndices = [];
        for (let i = 0; i < accuracyRecording.perTrackRecording.length; i++) {
            this.lastCheckedEventIndices.push(0);
        }
    }
    update(currentTimeInSeconds) {
        for (let trackNumber = 0; trackNumber < this.accuracyRecording.perTrackRecording.length; trackNumber++) {
            this.handleAllNewEventsForTrack(trackNumber, currentTimeInSeconds);
        }
    }
    handleAllNewEventsForTrack(trackNumber, currentTimeInSeconds) {
        let indexOfLastCheckedEvent = this.lastCheckedEventIndices[trackNumber];
        let trackEvents = this.accuracyRecording.perTrackRecording[trackNumber];
        while (indexOfLastCheckedEvent < trackEvents.length) {
            let currentEvent = trackEvents[indexOfLastCheckedEvent];
            if (currentTimeInSeconds >= currentEvent.timeInSeconds) {
                this.handleNewEvent(currentEvent);
                indexOfLastCheckedEvent++;
            }
            else {
                break;
            }
        }
        this.lastCheckedEventIndices[trackNumber] = indexOfLastCheckedEvent;
    }
    handleNewEvent(entry) {
        if (_accuracy_util__WEBPACK_IMPORTED_MODULE_0__["AccuracyUtil"].MISS_ACCURACY_FLAG === entry.accuracyMillis) {
            this.generateAccuracyEvent(entry);
        }
        else {
            this.generatePlayerKeyEvents(entry);
        }
    }
    generateAccuracyEvent(entry) {
        let event = {
            accuracyName: _accuracy_util__WEBPACK_IMPORTED_MODULE_0__["AccuracyUtil"].getAccuracyEventName(entry.accuracyMillis, this.config),
            trackNumber: entry.trackNumber,
            noteIndex: entry.noteType,
            timeInSeconds: entry.timeInSeconds,
            accuracyMillis: entry.accuracyMillis,
            noteType: entry.noteType,
        };
        this.handleAccuracyEvent(event);
    }
    generatePlayerKeyEvents(entry) {
        if (this.holdManager.isTrackHeld(entry.trackNumber)) {
            this.generateKeyUpEvent(entry);
        }
        else {
            this.generateKeyDownEvent(entry);
            if (entry.noteType !== _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].HOLD_HEAD && entry.noteType !== _note__WEBPACK_IMPORTED_MODULE_2__["NoteType"].ROLL_HEAD) {
                this.generateKeyUpEvent(entry);
            }
        }
    }
    generateKeyUpEvent(entry) {
        let event = new _player_key_action__WEBPACK_IMPORTED_MODULE_1__["PlayerKeyEvent"](entry.timeInSeconds, entry.trackNumber, _player_key_action__WEBPACK_IMPORTED_MODULE_1__["KeyState"].UP);
        this.handlePlayerKeyEvent(event);
    }
    generateKeyDownEvent(entry) {
        let event = new _player_key_action__WEBPACK_IMPORTED_MODULE_1__["PlayerKeyEvent"](entry.timeInSeconds, entry.trackNumber, _player_key_action__WEBPACK_IMPORTED_MODULE_1__["KeyState"].DOWN);
        this.handlePlayerKeyEvent(event);
    }
}


/***/ }),

/***/ "./src/scripts/rhythm_classifier.ts":
/*!******************************************!*\
  !*** ./src/scripts/rhythm_classifier.ts ***!
  \******************************************/
/*! exports provided: RhythmClassifier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RhythmClassifier", function() { return RhythmClassifier; });
// Calculates the fraction of the beat associated with a measure position, ex: 4th, 8th, 24th, etc.
class RhythmClassifier {
    static getBeatFraction(measureDivisions, measurePosition) {
        for (let divisor = measureDivisions; divisor > 1; divisor--) {
            if ((measureDivisions % divisor === 0) &&
                (measurePosition % divisor === 0)) {
                return measureDivisions / divisor;
            }
        }
        return measureDivisions;
    }
}


/***/ }),

/***/ "./src/scripts/score_provider.ts":
/*!***************************************!*\
  !*** ./src/scripts/score_provider.ts ***!
  \***************************************/
/*! exports provided: Score, ScoreProvider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Score", function() { return Score; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScoreProvider", function() { return ScoreProvider; });
/* harmony import */ var _accuracy_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accuracy_util */ "./src/scripts/accuracy_util.ts");

class Score {
    constructor(totalScore, percentScore) {
        this.totalScore = totalScore;
        this.percentScore = percentScore;
    }
}
class ScoreProvider {
    constructor(config, numNotes) {
        this.config = config;
        this.numNotes = numNotes;
    }
    score(entries) {
        let total = 0;
        for (let i = 0; i < entries.length; i++) {
            total += this.scoreEntry(entries[i]);
        }
        let maxScore = this.getMaxScore();
        return new Score(total, total / maxScore * 100);
    }
    getMaxScore() {
        return this.numNotes * this.scoreHit(0);
    }
    scoreEntry(entry) {
        if (_accuracy_util__WEBPACK_IMPORTED_MODULE_0__["AccuracyUtil"].eventIsAHit(entry, this.config)) {
            return this.scoreHit(entry.accuracyMillis);
        }
        else if (_accuracy_util__WEBPACK_IMPORTED_MODULE_0__["AccuracyUtil"].eventIsAMiss(entry, this.config)) {
            return this.scoreMiss();
        }
        else if (_accuracy_util__WEBPACK_IMPORTED_MODULE_0__["AccuracyUtil"].eventIsABoo(entry, this.config)) {
            return this.scoreBoo();
        }
        return undefined;
    }
    scoreHit(accuracyMillis) {
        let a = 2.0149;
        let b = 2.9545;
        let s = 0.0153;
        let sec = accuracyMillis / 1000;
        let scale = a / s / Math.sqrt(2 * Math.PI);
        let exponent = -Math.pow(Math.abs(sec), b) / 2 / s / s;
        return scale * Math.exp(exponent);
    }
    scoreMiss() {
        return -10;
    }
    scoreBoo() {
        return -5;
    }
}


/***/ }),

/***/ "./src/scripts/scroll_direction.ts":
/*!*****************************************!*\
  !*** ./src/scripts/scroll_direction.ts ***!
  \*****************************************/
/*! exports provided: ScrollDirection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDirection", function() { return ScrollDirection; });
var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection[ScrollDirection["Up"] = 0] = "Up";
    ScrollDirection[ScrollDirection["Down"] = 1] = "Down";
})(ScrollDirection || (ScrollDirection = {}));


/***/ }),

/***/ "./src/scripts/scroll_manager.ts":
/*!***************************************!*\
  !*** ./src/scripts/scroll_manager.ts ***!
  \***************************************/
/*! exports provided: ScrollManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollManager", function() { return ScrollManager; });
/* harmony import */ var _scroll_direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scroll_direction */ "./src/scripts/scroll_direction.ts");
/* harmony import */ var _game_time_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game_time_manager */ "./src/scripts/game_time_manager.ts");


class ScrollManager extends _game_time_manager__WEBPACK_IMPORTED_MODULE_1__["GameTimeManager"] {
    constructor(config, p, scrollBounds) {
        super(config, 0);
        this.scrollBounds = scrollBounds;
        p.mouseWheel = function (e) {
            let scrollingAllowed = this.isScrollingAllowed(scrollBounds, p);
            if (scrollingAllowed) {
                let timeChangeInSeconds = (e.deltaY * 0.2) / 1000;
                let currentTimeInSeconds = this.getCurrentTimeInSeconds();
                if (this.config.scrollDirection === _scroll_direction__WEBPACK_IMPORTED_MODULE_0__["ScrollDirection"].Down) {
                    this.setCurrentTimeInSeconds(currentTimeInSeconds - timeChangeInSeconds);
                }
                else {
                    this.setCurrentTimeInSeconds(currentTimeInSeconds + timeChangeInSeconds);
                }
                // Equivalent to event.preventDefault
                return false;
            }
        }.bind(this);
    }
    getCurrentTimeInSeconds(ignoredArgument) {
        return super.getCurrentTimeInSeconds(0);
    }
    isScrollingAllowed(scrollBounds, p) {
        let allowScroll = false;
        if (scrollBounds !== undefined) {
            if (ScrollManager.mouseIsInBounds(p, this.scrollBounds)) {
                allowScroll = true;
            }
        }
        else {
            allowScroll = true;
        }
        return allowScroll;
    }
    static mouseIsInBounds(p, bounds) {
        return p.mouseX >= bounds.topLeftX &&
            p.mouseX <= bounds.topLeftX + bounds.width &&
            p.mouseY >= bounds.topLeftY &&
            p.mouseY <= bounds.topLeftY + bounds.height;
    }
}


/***/ }),

/***/ "./src/scripts/stepfile.ts":
/*!*********************************!*\
  !*** ./src/scripts/stepfile.ts ***!
  \*********************************/
/*! exports provided: StepfileState, Stepfile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepfileState", function() { return StepfileState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stepfile", function() { return Stepfile; });
/* harmony import */ var _parsing_parse_sm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsing/parse_sm */ "./src/scripts/parsing/parse_sm.ts");
/* harmony import */ var _playlist_client_parsing_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playlist_client/parsing_helper */ "./src/scripts/playlist_client/parsing_helper.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");




var StepfileState;
(function (StepfileState) {
    StepfileState[StepfileState["NO_STEPFILE"] = 0] = "NO_STEPFILE";
    StepfileState[StepfileState["DONE_READING"] = 1] = "DONE_READING";
    StepfileState[StepfileState["PARTIALLY_PARSED"] = 2] = "PARTIALLY_PARSED";
    StepfileState[StepfileState["FULLY_PARSED"] = 3] = "FULLY_PARSED";
    StepfileState[StepfileState["ERROR"] = 4] = "ERROR";
})(StepfileState || (StepfileState = {}));
function stringToNoteType(string) {
    switch (string) {
        case "1":
            return _note__WEBPACK_IMPORTED_MODULE_3__["NoteType"].NORMAL;
        case "2":
            return _note__WEBPACK_IMPORTED_MODULE_3__["NoteType"].HOLD_HEAD;
        case "3":
            return _note__WEBPACK_IMPORTED_MODULE_3__["NoteType"].TAIL;
        case "4":
            return _note__WEBPACK_IMPORTED_MODULE_3__["NoteType"].ROLL_HEAD;
        case "M":
            return _note__WEBPACK_IMPORTED_MODULE_3__["NoteType"].MINE;
        default:
            return _note__WEBPACK_IMPORTED_MODULE_3__["NoteType"].UNKNOWN;
    }
}
class Stepfile {
    constructor() {
        this.songTitle = "song title";
        this.state = StepfileState.NO_STEPFILE;
    }
    loadFile(file) {
        this.file = file;
        this.songTitle = this.file.name;
        this.loadTextFile(this.file, ((event) => {
            this.state = StepfileState.DONE_READING;
            this.partialParse = Object(_parsing_parse_sm__WEBPACK_IMPORTED_MODULE_0__["getPartialParse"])(event.target.result);
            if (this.partialParse.modes.length < 1) {
                this.state = StepfileState.ERROR;
            }
            else {
                this.state = StepfileState.PARTIALLY_PARSED;
                this.modes = this.getOrderedModes(this.partialParse.modes);
            }
        }));
    }
    loadTextFile(file, listener, options) {
        let fileReader = new FileReader();
        fileReader.readAsText(file);
        fileReader.addEventListener("loadend", listener, options);
    }
    getOrderedModes(modesMap) {
        let modeOptions = [];
        for (let i = 0; i < modesMap.length; i++) {
            let mode = modesMap[i];
            modeOptions.push({
                type: mode.get("type"),
                difficulty: mode.get("difficulty"),
                meter: mode.get("meter"),
                id: i
            });
        }
        modeOptions.sort(_util__WEBPACK_IMPORTED_MODULE_2__["compareModeOptions"]);
        return modeOptions;
    }
    loadFfrBeatmap(beatmap, songTitle) {
        this.songTitle = songTitle;
        this.tracks = _playlist_client_parsing_helper__WEBPACK_IMPORTED_MODULE_1__["ParsingHelper"].beatmapToTrackArray(beatmap);
        this.state = StepfileState.FULLY_PARSED;
    }
    finishParsing(modeIndex) {
        if (this.state === StepfileState.PARTIALLY_PARSED || this.state === StepfileState.FULLY_PARSED) {
            this.fullParse = Object(_parsing_parse_sm__WEBPACK_IMPORTED_MODULE_0__["getFullParse"])(modeIndex, this.partialParse);
            this.tracks = this.getNotesFromParsedNotes(this.fullParse.tracks);
            this.state = StepfileState.FULLY_PARSED;
        }
    }
    getNotesFromParsedNotes(parsedTracks) {
        let tracks = Object(_util__WEBPACK_IMPORTED_MODULE_2__["getEmpty2dArray"])(parsedTracks.length);
        for (let i = 0; i < parsedTracks.length; i++) {
            for (let j = 0; j < parsedTracks[i].length; j++) {
                tracks[i].push(this.getNoteFromParsedNote(parsedTracks[i][j]));
            }
        }
        return tracks;
    }
    getNoteFromParsedNote(parsedNote) {
        return {
            state: _note__WEBPACK_IMPORTED_MODULE_3__["NoteState"].DEFAULT,
            timeInSeconds: parsedNote.timeInSeconds,
            trackNumber: parsedNote.trackNumber,
            type: stringToNoteType(parsedNote.type),
            beatFraction: parsedNote.measure.fraction
        };
    }
}


/***/ }),

/***/ "./src/scripts/storage_util.ts":
/*!*************************************!*\
  !*** ./src/scripts/storage_util.ts ***!
  \*************************************/
/*! exports provided: StorageUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageUtil", function() { return StorageUtil; });
/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha3 */ "./node_modules/sha3/index.js");
/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sha3__WEBPACK_IMPORTED_MODULE_0__);

class StorageUtil {
    static getKeyFromTracks(tracks) {
        let hash = new sha3__WEBPACK_IMPORTED_MODULE_0__["SHA3"](512);
        let convertedNotes = this.convertNotes(tracks);
        let notesString = JSON.stringify(convertedNotes);
        hash.update(notesString);
        return hash.digest("hex");
    }
    static convertNotes(tracks) {
        let convertedNotes = [];
        for (let i = 0; i < tracks.length; i++) {
            convertedNotes.push([]);
            for (let j = 0; j < tracks[i].length; j++) {
                let note = tracks[i][j];
                convertedNotes[i].push({
                    noteType: note.type,
                    timeInSeconds: note.timeInSeconds,
                    trackNumber: note.trackNumber
                });
            }
        }
        return convertedNotes;
    }
}


/***/ }),

/***/ "./src/scripts/time_manager.ts":
/*!*************************************!*\
  !*** ./src/scripts/time_manager.ts ***!
  \*************************************/
/*! exports provided: TimeManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeManager", function() { return TimeManager; });
class TimeManager {
    constructor(systemTime) {
        if (systemTime === undefined) {
            this.systemTimeMillis = performance.now();
        }
        else {
            this.systemTimeMillis = systemTime;
        }
    }
    getSystemTimeDifferenceInSeconds(systemTimeMillis) {
        if (systemTimeMillis === undefined) {
            throw Error("Error: can't get elapsed time. Given systemTimeMillis is undefined");
        }
        return (systemTimeMillis - this.systemTimeMillis) / 1000;
    }
    setCurrentTimeInSeconds(currentTimeInSeconds) {
        this.systemTimeMillis -= 1000 * (currentTimeInSeconds - this.getCurrentTimeInSeconds(performance.now()));
    }
}


/***/ }),

/***/ "./src/scripts/ui_util.ts":
/*!********************************!*\
  !*** ./src/scripts/ui_util.ts ***!
  \********************************/
/*! exports provided: drawHeading, spaceElementsHorizontally, setElementPosition, setElementCenterPositionRelative, setElementToBottom, createLabeledInput, createLabel, createLabeledSelect, createLabeledTextArea, createFileInput, createLabeledCheckbox, YesNo, booleanToYesNo, yesNoToBoolean, encloseEachInputLabelPairIntoASubDiv, fixRadioDivElement, styleRadioOptions, setOnInputUnlessItAlreadyExists, createUserInput, setElementClasses */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "drawHeading", function() { return drawHeading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spaceElementsHorizontally", function() { return spaceElementsHorizontally; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setElementPosition", function() { return setElementPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setElementCenterPositionRelative", function() { return setElementCenterPositionRelative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setElementToBottom", function() { return setElementToBottom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLabeledInput", function() { return createLabeledInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLabel", function() { return createLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLabeledSelect", function() { return createLabeledSelect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLabeledTextArea", function() { return createLabeledTextArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFileInput", function() { return createFileInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLabeledCheckbox", function() { return createLabeledCheckbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YesNo", function() { return YesNo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "booleanToYesNo", function() { return booleanToYesNo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yesNoToBoolean", function() { return yesNoToBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encloseEachInputLabelPairIntoASubDiv", function() { return encloseEachInputLabelPairIntoASubDiv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixRadioDivElement", function() { return fixRadioDivElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styleRadioOptions", function() { return styleRadioOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOnInputUnlessItAlreadyExists", function() { return setOnInputUnlessItAlreadyExists; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createUserInput", function() { return createUserInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setElementClasses", function() { return setElementClasses; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var _pages_page_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/page_manager */ "./src/scripts/pages/page_manager.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/scripts/util.ts");
/* harmony import */ var _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom_wrapper */ "./src/scripts/dom_wrapper.ts");




function drawHeading() {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let headingClass = "navigation-heading";
    let playFromFileButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        return p.createButton("Play From File");
    }, "playFromFileButton");
    playFromFileButton.element.mousePressed(() => {
        _pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["PageManager"].setCurrentPage(_pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["Pages"].PLAY_FROM_FILE);
    });
    if (!playFromFileButton.alreadyExists) {
        playFromFileButton.element.addClass(headingClass);
        playFromFileButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
    }
    let playFromOnlineButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        return p.createButton("Play From Online");
    }, "playFromOnlineButton");
    playFromOnlineButton.element.mousePressed(() => {
        _pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["PageManager"].setCurrentPage(_pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["Pages"].PLAY_FROM_ONLINE);
    });
    if (!playFromOnlineButton.alreadyExists) {
        playFromOnlineButton.element.addClass(headingClass);
        playFromOnlineButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
    }
    let optionsButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        return p.createButton("Options");
    }, "optionsButton");
    optionsButton.element.mousePressed(() => {
        _pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["PageManager"].setCurrentPage(_pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["Pages"].OPTIONS);
    });
    if (!optionsButton.alreadyExists) {
        optionsButton.element.addClass(headingClass);
        optionsButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
    }
    let storageButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        return p.createButton("Storage");
    }, "storageButton");
    storageButton.element.mousePressed(() => {
        _pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["PageManager"].setCurrentPage(_pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["Pages"].STORAGE);
    });
    if (!storageButton.alreadyExists) {
        storageButton.element.addClass(headingClass);
        storageButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
    }
    let experimentalButton = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        return p.createButton("Experimental");
    }, "experimentalButton");
    experimentalButton.element.mousePressed(() => {
        _pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["PageManager"].setCurrentPage(_pages_page_manager__WEBPACK_IMPORTED_MODULE_1__["Pages"].EXPERIMENT_CONFIG);
    });
    if (!experimentalButton.alreadyExists) {
        experimentalButton.element.addClass(headingClass);
        experimentalButton.element.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
    }
    spaceElementsHorizontally([playFromFileButton.element, playFromOnlineButton.element, optionsButton.element, storageButton.element, experimentalButton.element], [130, 146, 90, 90, 123], 23.5, 0, 23.5);
}
function spaceElementsHorizontally(elements, widths, initialX, y, hSpacing) {
    let x = initialX;
    for (let i = 0; i < elements.length; i++) {
        setElementPosition(elements[i], x, y);
        x += hSpacing + widths[i];
    }
}
function setElementPosition(element, x, y) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let canvasPosition = p._renderer.position();
    element.position(canvasPosition.x + x, canvasPosition.y + y);
}
// Expects relativeX and relative Y to be between 0 and 1
function setElementCenterPositionRelative(element, relativeX, relativeY, width, height) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let canvasPosition = p._renderer.position();
    element.position(canvasPosition.x + (relativeX * p.width) - (width / 2), canvasPosition.y + (relativeY * p.height) - (height / 2));
}
function setElementToBottom(element, heightPercent, stylingWidth, stylingHeight) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let canvasPosition = p._renderer.position();
    let elementHeight = heightPercent / 100 * p.height;
    element.position(canvasPosition.x, canvasPosition.y + (p.height - elementHeight - stylingHeight));
    element.style("width: " + (p.width - stylingWidth) + "px");
    element.style("height: " + elementHeight + "px");
}
function createLabeledInput(labelString, inputId, inputInitialValue, customClass) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        let labeledInputClass = "labeled-input";
        let container = p.createDiv();
        container.addClass(customClass);
        container.addClass(labeledInputClass);
        container.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        let label = createLabel(p, labelString, inputId);
        label.addClass(customClass);
        label.addClass(labeledInputClass);
        label.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        label.parent(container);
        let input = p.createInput(inputInitialValue);
        input.addClass(customClass);
        input.addClass(labeledInputClass);
        input.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        input.parent(container);
        input.id(inputId);
        return container;
    }, inputId + "Container");
    let input = Object(_util__WEBPACK_IMPORTED_MODULE_2__["getFirstElementByTagName"])(container.element, "INPUT");
    return { element: input, alreadyExists: container.alreadyExists };
}
function createLabel(p, labelString, forId) {
    let label = p.createElement("label", labelString);
    if (forId !== undefined) {
        label.attribute("for", forId);
    }
    return label;
}
function createCheckbox(p, initialState) {
    let checkbox = p.createElement("checkbox");
    checkbox.elt.checked = initialState;
    return checkbox;
}
// TODO: check that optionsEnum is actually an Enum, and initialEnumValue is a value for that enum
function createLabeledSelect(labelString, selectId, OptionsEnum, initialEnumValue, customClass) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let select;
    let labeledSelectClass = "labeled-select";
    let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        let container = p.createDiv();
        container.addClass(customClass);
        container.addClass(labeledSelectClass);
        container.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        let label = createLabel(p, labelString, selectId);
        label.addClass(customClass);
        label.addClass(labeledSelectClass);
        label.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        label.parent(container);
        select = p.createSelect();
        select.addClass(customClass);
        select.addClass(labeledSelectClass);
        select.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        select.parent(container);
        select.id(selectId);
        return container;
    }, selectId + "Container");
    if (!container.alreadyExists) {
        let initialOptions = Object(_util__WEBPACK_IMPORTED_MODULE_2__["enumToStringArray"])(OptionsEnum);
        for (let i = 0; i < initialOptions.length; i++) {
            // @ts-ignore
            select.option(initialOptions[i]);
        }
        // @ts-ignore
        select.selected(Object(_util__WEBPACK_IMPORTED_MODULE_2__["enumToString"])(OptionsEnum, initialEnumValue));
        let options = select.elt.children;
        for (let i = 0; i < options.length; i++) {
            options.item(i).setAttribute("class", customClass + " " + labeledSelectClass + " " + _index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        }
    }
    return { element: select, alreadyExists: container.alreadyExists };
}
function createLabeledTextArea(labelString, inputId, inputInitialValue, customClass, rows = 4, cols = 40) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let textArea;
    let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        let labeledTextareaClass = "labeled-textarea";
        let container = p.createDiv();
        container.addClass(customClass);
        container.addClass(labeledTextareaClass);
        container.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        let label = createLabel(p, labelString, inputId);
        label.addClass(customClass);
        label.addClass(labeledTextareaClass);
        label.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        label.parent(container);
        textArea = p.createElement("textarea", inputInitialValue);
        textArea.addClass(customClass);
        textArea.addClass(labeledTextareaClass);
        textArea.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        textArea.parent(container);
        textArea.id(inputId);
        textArea.attribute("rows", rows.toString());
        textArea.attribute("cols", cols.toString());
        return container;
    }, inputId + "Container");
    return { element: textArea, alreadyExists: container.alreadyExists };
}
function createFileInput(labelString, buttonText, uniqueId, onFileLoad, customClass) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let buttonId = uniqueId + "Button";
    let containerId = uniqueId + "Container";
    let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        let fileInputClass = "file-input";
        let container = p.createDiv();
        container.addClass(customClass);
        container.addClass(fileInputClass);
        container.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        let fileInput = p.createFileInput(onFileLoad, "false");
        fileInput.parent(container);
        fileInput.hide();
        let button = p.createButton(buttonText);
        button.parent(container);
        button.id(buttonId);
        button.mouseClicked(() => {
            fileInput.elt.click();
        });
        button.addClass(customClass);
        button.addClass(fileInputClass);
        button.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        let label = createLabel(p, labelString, buttonId);
        label.addClass(customClass);
        label.addClass(fileInputClass);
        label.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        label.parent(container);
        return container;
    }, containerId);
    let label = Object(_util__WEBPACK_IMPORTED_MODULE_2__["getFirstElementByTagName"])(container.element, "LABEL");
    label.html(labelString);
    return container;
}
function createLabeledCheckbox(labelString, checkboxId, isChecked, customClass) {
    let p = _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene.sketchInstance;
    let checkbox;
    let container = _dom_wrapper__WEBPACK_IMPORTED_MODULE_3__["DOMWrapper"].create(() => {
        let labeledCheckboxClass = "labeled-checkbox";
        let container = p.createDiv();
        container.addClass(customClass);
        container.addClass(labeledCheckboxClass);
        container.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        let label = createLabel(p, labelString, checkboxId);
        label.addClass(customClass);
        label.addClass(labeledCheckboxClass);
        label.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        label.parent(container);
        checkbox = createCheckbox(p, isChecked);
        checkbox.addClass(customClass);
        checkbox.addClass(labeledCheckboxClass);
        checkbox.addClass(_index__WEBPACK_IMPORTED_MODULE_0__["global"].globalClass);
        checkbox.parent(container);
        checkbox.id(checkboxId);
        return container;
    }, checkboxId + "Container");
    return { element: checkbox, alreadyExists: container.alreadyExists };
}
var YesNo;
(function (YesNo) {
    YesNo[YesNo["Yes"] = 0] = "Yes";
    YesNo[YesNo["No"] = 1] = "No";
})(YesNo || (YesNo = {}));
function booleanToYesNo(boolean) {
    if (boolean) {
        return YesNo.Yes;
    }
    else {
        return YesNo.No;
    }
}
function yesNoToBoolean(yesNo) {
    if (yesNo === YesNo.Yes) {
        return true;
    }
    else {
        return false;
    }
}
// https://discourse.processing.org/t/how-to-organize-radio-buttons-in-separate-lines/10041/5
function encloseEachInputLabelPairIntoASubDiv(p, radioDivP5Element) {
    const inputs = selectAll(p, 'input', radioDivP5Element);
    const labels = selectAll(p, 'label', radioDivP5Element);
    const len = inputs.length;
    for (let i = 0; i < len; ++i) {
        p.createDiv().parent(radioDivP5Element).child(inputs[i]).child(labels[i]);
    }
}
// https://discourse.processing.org/t/how-to-organize-radio-buttons-in-separate-lines/10041/5
function fixRadioDivElement(radioDivP5Element) {
    // @ts-ignore
    radioDivP5Element._getInputChildrenArray = function () {
        return this.elt.getElementsByTagName('input');
    };
}
function styleRadioOptions(p, radioDivP5Element, styleClasses) {
    let divs = selectAll(p, 'div', radioDivP5Element);
    for (let i = 0; i < divs.length; i++) {
        divs[i].addClass(styleClasses.join(" "));
    }
    let inputs = selectAll(p, 'input', radioDivP5Element);
    for (let i = 0; i < inputs.length; i++) {
        inputs[i].addClass(styleClasses.join(" "));
    }
    let labels = selectAll(p, 'label', radioDivP5Element);
    for (let i = 0; i < inputs.length; i++) {
        labels[i].addClass(styleClasses.join(" "));
    }
}
function removeAllOccurrencesOfTag(html, tagName) {
    let tempDiv = document.createElement("div");
    let elements = tempDiv.getElementsByTagName(tagName);
    while (elements[0] !== undefined) {
        elements[0].parentNode.removeChild(elements[0]);
    }
    return tempDiv.innerHTML;
}
function setOnInputUnlessItAlreadyExists(inputElement, onInput) {
    if (!inputElement.alreadyExists) {
        // @ts-ignore
        inputElement.element.input(onInput);
    }
}
function selectAll(p, tagName, container) {
    if (container.id() === "") {
        throw "error: container used with selectAll must have an id";
    }
    let id = "#" + container.id();
    return p.selectAll(tagName, id);
}
function createUserInput(create, isValidInput, showInfo, showError, onValidInput, parent) {
    let created = create();
    if (!created.alreadyExists) {
        let element = created.element;
        parent.child(element.parent());
        element.mouseClicked(() => {
            let value = element.value();
            if (isValidInput(value)) {
                showInfo();
            }
            else {
                showError();
            }
        });
        // @ts-ignore
        element.input(() => {
            let value = element.value();
            if (isValidInput(value)) {
                showInfo();
                onValidInput(value);
            }
            else {
                showError();
            }
        });
    }
    return created;
}
function setElementClasses(element, ...classes) {
    element.class(classes.join(" "));
}


/***/ }),

/***/ "./src/scripts/util.ts":
/*!*****************************!*\
  !*** ./src/scripts/util.ts ***!
  \*****************************/
/*! exports provided: defaultIfUndefined, isUndefined, getMissBoundaryInSeconds, isKeyBindingsDefined, initializeKeyBindings, setConfigKeyBinding, enumToStringArray, getKeyString, compareModeOptions, getFirstElementByTagName, findBindingInfoForTrack, generatePreviewNotes, isFilesReady, initPlayingDisplay, initSyncGameDisplay, initExperimentDisplay, enumToString, getFloat, getInt, getEnum, logArray, lerp, mapLinear, getTextWidth, getEmpty2dArray, disableButton, enableButton, getNowTimestamp, getRandomIntInclusive, mean, clampValueToRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultIfUndefined", function() { return defaultIfUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return isUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMissBoundaryInSeconds", function() { return getMissBoundaryInSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isKeyBindingsDefined", function() { return isKeyBindingsDefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeKeyBindings", function() { return initializeKeyBindings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setConfigKeyBinding", function() { return setConfigKeyBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enumToStringArray", function() { return enumToStringArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKeyString", function() { return getKeyString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareModeOptions", function() { return compareModeOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFirstElementByTagName", function() { return getFirstElementByTagName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findBindingInfoForTrack", function() { return findBindingInfoForTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generatePreviewNotes", function() { return generatePreviewNotes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFilesReady", function() { return isFilesReady; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPlayingDisplay", function() { return initPlayingDisplay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSyncGameDisplay", function() { return initSyncGameDisplay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initExperimentDisplay", function() { return initExperimentDisplay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enumToString", function() { return enumToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFloat", function() { return getFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getInt", function() { return getInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnum", function() { return getEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logArray", function() { return logArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLinear", function() { return mapLinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTextWidth", function() { return getTextWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEmpty2dArray", function() { return getEmpty2dArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableButton", function() { return disableButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableButton", function() { return enableButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNowTimestamp", function() { return getNowTimestamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomIntInclusive", function() { return getRandomIntInclusive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mean", function() { return mean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clampValueToRange", function() { return clampValueToRange; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/scripts/index.ts");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p5 */ "p5");
/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _stepfile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stepfile */ "./src/scripts/stepfile.ts");
/* harmony import */ var _audio_audio_file__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./audio/audio_file */ "./src/scripts/audio/audio_file.ts");
/* harmony import */ var _pages_play_playing_display__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/play/playing_display */ "./src/scripts/pages/play/playing_display.ts");
/* harmony import */ var _pages_sync_sync_game_display__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/sync/sync_game_display */ "./src/scripts/pages/sync/sync_game_display.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./note */ "./src/scripts/note.ts");
/* harmony import */ var _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./offline_storage_client/offline_storage_client */ "./src/scripts/offline_storage_client/offline_storage_client.ts");
/* harmony import */ var _score_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./score_provider */ "./src/scripts/score_provider.ts");
/* harmony import */ var _pages_experiment_experiment_display__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pages/experiment/experiment_display */ "./src/scripts/pages/experiment/experiment_display.ts");










function defaultIfUndefined(value, defaultValue) {
    return isUndefined(value) ? defaultValue : value;
}
function isUndefined(value) {
    return typeof value === "undefined";
}
function getMissBoundaryInSeconds(currentTime, config) {
    return currentTime + (config.accuracySettings[0].upperBound / 1000);
}
function isKeyBindingsDefined(numTracks) {
    return _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.keyBindings.get(numTracks) !== undefined;
}
function initializeKeyBindings(numTracks) {
    let mapping = [];
    if (numTracks <= 9) {
        let keySequence = ["A", "S", "D", "F", "G", "H", "J", "K", "L"];
        for (let i = 0; i < numTracks; i++) {
            let keyString = keySequence[i];
            mapping.push({ trackNumber: i, keyCode: keyString.charCodeAt(0), string: keyString });
        }
    }
    else {
        if (numTracks > 26) {
            console.error("Couldn't generate default key bindings for more than 26 tracks. Ran out of letters!");
            numTracks = 26;
        }
        for (let i = 0; i < numTracks; i++) {
            let characterCode = "A".charCodeAt(0) + i; // This is an ASCII character code
            mapping.push({ trackNumber: i, keyCode: characterCode, string: String.fromCharCode(characterCode) });
        }
    }
    _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.keyBindings.set(numTracks, mapping);
    _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_7__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_0__["global"].config);
}
function setConfigKeyBinding(trackNumber, numTracks, keyBinding) {
    let bindingIndex = getIndexOfTrackNumberBinding(trackNumber, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.keyBindings.get(numTracks));
    _index__WEBPACK_IMPORTED_MODULE_0__["global"].config.keyBindings.get(numTracks)[bindingIndex] = keyBinding;
    _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_7__["OfflineStorageClient"].saveConfig(_index__WEBPACK_IMPORTED_MODULE_0__["global"].config);
}
// Expects e to be an enum
function enumToStringArray(e) {
    return Object.values(e).filter((value) => typeof value === "string").map((value) => {
        return String(value);
    });
}
function getIndexOfTrackNumberBinding(trackNumber, bindings) {
    for (let i = 0; i < bindings.length; i++) {
        if (bindings[i].trackNumber === trackNumber) {
            return i;
        }
    }
    return -1;
}
function getKeyString(p) {
    return p.key.length === 1 ? p.key.toUpperCase() : p.key;
}
function compareModeOptions(a, b) {
    let typeA = a.type.toUpperCase();
    let typeB = b.type.toUpperCase();
    if (typeA !== typeB) {
        if (typeA < typeB) {
            return -1;
        }
        else {
            return 1;
        }
    }
    else {
        let difficultyA = a.difficulty.toUpperCase();
        let difficultyB = b.difficulty.toUpperCase();
        if (difficultyA !== difficultyB) {
            return difficultyRank(difficultyA) - difficultyRank(difficultyB);
        }
        else {
            let meterA = parseFloat(a.meter);
            let meterB = parseFloat(b.meter);
            if (meterA !== meterB) {
                return meterA - meterB;
            }
        }
    }
    return a.id = b.id;
}
function difficultyRank(difficulty) {
    switch (difficulty) {
        case "BEGINNER":
            return 0;
        case "EASY":
            return 1;
        case "MEDIUM":
            return 2;
        case "HARD":
            return 3;
        case "CHALLENGE":
            return 4;
        case "EDIT":
            return 5;
        default:
            return 6;
    }
}
function getFirstElementByTagName(div, tagName) {
    let childrenNodes = div.child();
    for (let i = 0; i < childrenNodes.length; i++) {
        let node = childrenNodes[i];
        // @ts-ignore
        if (node.tagName === tagName) {
            // @ts-ignore
            return new p5__WEBPACK_IMPORTED_MODULE_1__["Element"](node);
        }
    }
    return undefined;
}
function findBindingInfoForTrack(trackNumber, bindings) {
    for (let i = 0; i < bindings.length; i++) {
        if (bindings[i].trackNumber === trackNumber) {
            return bindings[i];
        }
    }
    return undefined;
}
function generatePreviewNotes(numTracks) {
    let notes = [];
    let isHold = false;
    let currentTime = 0.1;
    let timeIncrement = 0.3 / numTracks;
    for (let i = 0; i < numTracks; i++) {
        let track = [];
        if (isHold) {
            track.push({
                type: _note__WEBPACK_IMPORTED_MODULE_6__["NoteType"].HOLD_HEAD,
                timeInSeconds: currentTime,
                state: _note__WEBPACK_IMPORTED_MODULE_6__["NoteState"].DEFAULT,
                trackNumber: i,
                beatFraction: 8
            });
            track.push({
                type: _note__WEBPACK_IMPORTED_MODULE_6__["NoteType"].TAIL,
                timeInSeconds: currentTime + 0.25,
                state: _note__WEBPACK_IMPORTED_MODULE_6__["NoteState"].DEFAULT,
                trackNumber: i,
                beatFraction: 8
            });
        }
        else {
            track.push({
                type: _note__WEBPACK_IMPORTED_MODULE_6__["NoteType"].NORMAL,
                timeInSeconds: currentTime,
                state: _note__WEBPACK_IMPORTED_MODULE_6__["NoteState"].DEFAULT,
                trackNumber: i,
                beatFraction: 8
            });
        }
        notes.push(track);
        isHold = !isHold;
        currentTime += timeIncrement;
    }
    return notes;
}
function isFilesReady(stepfile, audioFile) {
    let stepfileReady = stepfile.state === _stepfile__WEBPACK_IMPORTED_MODULE_2__["StepfileState"].PARTIALLY_PARSED ||
        stepfile.state === _stepfile__WEBPACK_IMPORTED_MODULE_2__["StepfileState"].FULLY_PARSED;
    let audioFileReady = audioFile.getState() === _audio_audio_file__WEBPACK_IMPORTED_MODULE_3__["AudioFileState"].BUFFERED;
    return stepfileReady && audioFileReady;
}
function initPlayingDisplay(tracks, audioFile, returnPage, songTitle) {
    let scoreProvider = new _score_provider__WEBPACK_IMPORTED_MODULE_8__["ScoreProvider"](_index__WEBPACK_IMPORTED_MODULE_0__["global"].config, countItemsIn2dArray(tracks));
    return _offline_storage_client_offline_storage_client__WEBPACK_IMPORTED_MODULE_7__["OfflineStorageClient"].loadPBReplay(tracks, scoreProvider)
        .then((replay) => {
        if (replay !== null) {
            _index__WEBPACK_IMPORTED_MODULE_0__["global"].playingDisplay = new _pages_play_playing_display__WEBPACK_IMPORTED_MODULE_4__["PlayingDisplay"](tracks, audioFile, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config, _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene, returnPage, songTitle, replay, scoreProvider);
        }
        else {
            _index__WEBPACK_IMPORTED_MODULE_0__["global"].playingDisplay = new _pages_play_playing_display__WEBPACK_IMPORTED_MODULE_4__["PlayingDisplay"](tracks, audioFile, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config, _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene, returnPage, songTitle);
        }
    });
}
function initSyncGameDisplay(tracks, audioFile, returnPage, songTitle) {
    _index__WEBPACK_IMPORTED_MODULE_0__["global"].syncGameDisplay = new _pages_sync_sync_game_display__WEBPACK_IMPORTED_MODULE_5__["SyncGameDisplay"](tracks, audioFile, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config, _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene, returnPage, songTitle);
}
function initExperimentDisplay(numTracks, returnPage, songTitle) {
    let tracks = getEmpty2dArray(numTracks);
    _index__WEBPACK_IMPORTED_MODULE_0__["global"].experimentDisplay = new _pages_experiment_experiment_display__WEBPACK_IMPORTED_MODULE_9__["ExperimentDisplay"](tracks, _index__WEBPACK_IMPORTED_MODULE_0__["global"].config, _index__WEBPACK_IMPORTED_MODULE_0__["global"].p5Scene, returnPage, songTitle);
}
function enumToString(TheEnum, value) {
    return TheEnum[value].toString();
}
function getFloat(value) {
    if (typeof value === "string") {
        return parseFloat(value);
    }
    return value;
}
function getInt(value) {
    if (typeof value === "string") {
        return parseInt(value);
    }
    return value;
}
function getEnum(value, EnumType) {
    let string = String(value);
    return EnumType[string];
}
function logArray(array) {
    for (let i = 0; i < array.length; i++) {
        let logEntry = i + ": " + JSON.stringify(array[i]);
        console.log(logEntry);
    }
}
function lerp(startValue, endValue, ratio) {
    if (ratio <= 0) {
        return startValue;
    }
    else if (ratio > 0 && ratio < 1) {
        return startValue + (endValue - startValue) * ratio;
    }
    else {
        return endValue;
    }
}
function mapLinear(fromStart, fromEnd, toStart, toEnd, fromValue) {
    let toValue = Math.abs(fromValue - fromStart) * Math.abs(toEnd - toStart) / Math.abs(fromEnd - fromStart);
    if (toEnd > toStart) {
        toValue = toValue + toStart;
    }
    else {
        toValue = -toValue + toStart;
    }
    return clampValueToRange(toValue, Math.min(toStart, toEnd), Math.max(toStart, toEnd));
}
function getTextWidth(text, textSize) {
    let p = this.p;
    p.push();
    p.textSize(textSize);
    let textWidth = p.textWidth(text);
    p.pop();
    return textWidth;
}
function getEmpty2dArray(numRows) {
    let array = [];
    for (let i = 0; i < numRows; i++) {
        array.push([]);
    }
    return array;
}
function countItemsIn2dArray(array2d) {
    return array2d.reduce((sum, array) => sum + array.length, 0);
}
function disableButton(button) {
    button.attribute("disabled", "");
}
function enableButton(button) {
    button.removeAttribute("disabled");
}
function getNowTimestamp() {
    return new Date().toISOString();
}
// The maximum is inclusive and the minimum is inclusive
function getRandomIntInclusive(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1) + min);
}
function mean(array) {
    return array.reduce((sum, x) => sum + x) / array.length;
}
function clampValueToRange(value, lowerBound, upperBound) {
    if (value < lowerBound) {
        return lowerBound;
    }
    if (value > upperBound) {
        return upperBound;
    }
    return value;
}


/***/ }),

/***/ "aws-sdk":
/*!**********************!*\
  !*** external "AWS" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = AWS;

/***/ }),

/***/ "p5":
/*!*********************!*\
  !*** external "p5" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = p5;

/***/ }),

/***/ "pako":
/*!***********************!*\
  !*** external "pako" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = pako;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,